<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[markdown 总结]]></title>
      <url>/2018/markdown/</url>
      <content type="html"><![CDATA[<p>md也写了很久了，最近想倒腾一个自定义渲染风格的md解析器，所以回过头写一篇基础总结，确实发现了一些之前不知道的细节，就当一篇markdown的语法备忘。<br><a id="more"></a></p>
<h2 id="语法导航"><a href="#语法导航" class="headerlink" title="语法导航"></a>语法导航</h2><p>翻译自<a href="https://spec.commonmark.org/0.28" target="_blank" rel="external">官方标准V0.28</a>，<br>官网举例非常详细，我仅翻译一个我觉得够用的版本。</p>
<h3 id="Space"><a href="#Space" class="headerlink" title="Space"></a>Space</h3><ul>
<li>多个空格会被视为一个空格</li>
<li>多个空行也会被渲染为一个（因此换行需要两个回车）</li>
</ul>
<h4 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h4><ul>
<li><p>根据空格的规则，一般情况下的tab键只会被渲染为一个空格</p>
<p>  但在块结构中会被解析为4个空格，比如代码块</p>
</li>
<li><p>和<code>列表标签</code>组合使用时，</p>
<ul>
<li>换行+<code>tab</code>+列表标签，产生子列表效果</li>
<li>换行+一个<code>tab</code>能产生<code>缩进</code>效果</li>
<li><p>换行+两个<code>tab</code>能产生<code>引用块</code>的效果</p>
<pre><code>block quote context
</code></pre></li>
<li><p>列表标签直接跟两个<code>tab</code>同样产生<code>引用块</code>的效果</p>
</li>
</ul>
</li>
<li><p>和<code>&gt;</code>符号组合使用，<code>&gt;</code>+两个<code>tab</code>，能产生缩进两格的代码块效果</p>
<blockquote>
<pre><code>an indented code block starting with two spaces.
</code></pre></blockquote>
</li>
<li><p>和<code>*</code>符号组合，<code>*   *   *</code>为<code>分割线</code>效果</p>
<hr>
</li>
<li>和<code>#</code>符合组合产生标题</li>
</ul>
<h3 id="Blocks-and-inlines"><a href="#Blocks-and-inlines" class="headerlink" title="Blocks-and-inlines"></a>Blocks-and-inlines</h3><ul>
<li>块元素的渲染优先级高于行元素</li>
<li><p>块元素分为两种，一种继续包含其他块元素，称为<code>container-blocks</code></p>
<p>  另外一种不能，称为<code>leaf blocks</code></p>
</li>
</ul>
<h4 id="Leaf-blocks"><a href="#Leaf-blocks" class="headerlink" title="Leaf-blocks"></a>Leaf-blocks</h4><h5 id="Thematic-breaks"><a href="#Thematic-breaks" class="headerlink" title="Thematic-breaks"></a>Thematic-breaks</h5><p>一行包括<code>0-3</code>个缩进，跟着连续的三个或者更多的 <code>“*”</code>， <code>“_”</code>，<code>“-”</code> 其中任意一个字符，中间和结尾都可以有任意数量空格，后续不可再跟其他非空白字符。即组成了专题隔断（<code>Thematic breaks</code>），也就是通常所说的<code>分割线</code></p>
<blockquote>
<pre><code>***
---
___
</code></pre></blockquote>
<ul>
<li>必须是三个或更多的相同字符，不可任意组合</li>
<li>分割线前后不需要空白行</li>
<li>分割线能分割段落</li>
<li>当使用<code>破折号</code>分隔符<code>&quot;-&quot;</code>分割段落时，会将前面的内容渲染成<a href="#setext-headings">Setext heading</a></li>
<li><p>使用<code>&quot;*&quot;</code>符号组成分隔符，如果遇到<code>*</code>开头的列表符号，分隔符优先级更高</p>
<p>  列表中使用分隔符需要使用不一样的符号，例如</p>
<pre><code>- Foo
- * * *
</code></pre></li>
</ul>
<h5 id="ATX-headings"><a href="#ATX-headings" class="headerlink" title="ATX-headings"></a>ATX-headings</h5><p>标题行也是一种<code>leaf blocks</code>，组成规则如下：</p>
<ul>
<li><code>0-3</code>个空格缩进</li>
<li>组成标题行的符号为<code>#</code>, 根据标题级数可由<code>1-6</code>个组成</li>
<li><code>#</code>符号之后<code>必须有至少一个空格或者换行符</code>，然后才跟标题内容</li>
<li>结尾可选跟任意数量的<code>#</code>符号作为结束标志</li>
<li><code>#</code>符号前加<code>\</code>会被转义</li>
<li>标题内容安装普通文本解析</li>
<li>前后空白字符在解析时会被忽略</li>
<li>标题前后不需要空白行分割，会自动分割段落</li>
<li>标题可以为空 <code># #</code></li>
</ul>
<h5 id="Setext-headings"><a href="#Setext-headings" class="headerlink" title="Setext-headings"></a>Setext-headings</h5><p>setext(Structure Enhanced Text) heading，强调标题</p>
<ul>
<li>由一行或多行文本组成,每一行至少包含一个非空字符</li>
<li>每行可有0-3个空格缩进</li>
<li>文本行的最后跟<code>setext heading underline</code>(强调标题下划线符号)：<code>“=”</code>或<code>“-”</code></li>
<li>去掉<code>setext heading underline</code>符号时，文本应该翻译为一个段落，因此使用的场景<code>不包括</code>代码块、标题、引用块、分割线、列表和html段落等</li>
<li>如果使用<code>=</code>，文本会被渲染为一级标题的格式</li>
<li>如果使用<code>-</code>，文本会被渲染为二级标题的格式</li>
<li>可以使用任意数量的<code>setext heading underline</code>，但中间不能有空格</li>
<li>使用<code>-</code>时，需要和<code>列表</code>的使用区分开</li>
</ul>
<p>example<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">Setext-headings level 1</span></div><div class="line">===</div><div class="line"><span class="section">Setext-headings level 2</span></div><div class="line">---</div></pre></td></tr></table></figure></p>
<h5 id="Indented-code-blocks"><a href="#Indented-code-blocks" class="headerlink" title="Indented-code-blocks"></a>Indented-code-blocks</h5><ul>
<li>一个缩进的代码块由一个或多个缩进块（indented chunks）组成</li>
<li>缩进块（indented chunks）是由一组非空行组成，每一行至少有<code>4空格</code>缩进</li>
<li>缩进块的内容就是输入的文字内容。行尾需要换行，行首的4空格缩进不会被渲染</li>
<li>当<code>缩进块</code>和<code>列表</code>同时出现时，列表的渲染级别更高</li>
</ul>
<h5 id="Fenced-code-blocks"><a href="#Fenced-code-blocks" class="headerlink" title="Fenced-code-blocks"></a>Fenced-code-blocks</h5><ul>
<li>由至少三个连续的反引号字符包裹, 行首可选不超过3个空格的缩进</li>
<li>围栏头部可选一个信息字符串(info string)，第一个单词表明代码的类型</li>
</ul>
<h4 id="Container-blocks"><a href="#Container-blocks" class="headerlink" title="Container-blocks"></a>Container-blocks</h4><p>容器块，就是可以将其他块当做它的内容，这里有两种基本的容器块</p>
<ul>
<li>块引用（block quotes）</li>
<li>列表（list items）</li>
</ul>
<h5 id="Block-quotes"><a href="#Block-quotes" class="headerlink" title="Block-quotes"></a>Block-quotes</h5><p>块引用的组成为：0-3个缩进，加上一个<code>&quot;&gt;&quot;</code>符号，再加可选的空格</p>
<ul>
<li><code>&gt;</code>可单独一行</li>
<li><code>&gt;</code>和引用内容之间的内容可省略</li>
<li>多个<code>&gt;</code>代表多级引用</li>
<li>引用可和其他渲染格式组合使用，比如<code>&gt;</code>+两个<code>tab</code>，形成引用代码块</li>
</ul>
<h5 id="List-items"><a href="#List-items" class="headerlink" title="List-items"></a>List-items</h5><p>分为有序和项目标记列表</p>
<ul>
<li>项目标记列表的组成符号为<code>&quot;*&quot;</code>, <code>&quot;-&quot;</code>或 <code>&quot;+&quot;</code>三种</li>
<li>有序列表的组成为<code>0-9</code>数字，跟着一个点号或者反括号</li>
<li>列表符号和内容之间的至少有一个空格</li>
<li>多级列表相对上一级需要增加<code>多个</code>缩进</li>
<li><p>项目标记符号不同是中间会新增一个空行</p>
<pre><code>- one
- two
+ three
</code></pre><p>  相当于如下代码：</p>
<pre><code>- one
- two
&lt;!-- --&gt;
- three
</code></pre></li>
<li>存在多级标题时，上下级之间增加空行能增加行距</li>
</ul>
<h4 id="Inlines"><a href="#Inlines" class="headerlink" title="Inlines"></a>Inlines</h4><h5 id="Backslash-escapes"><a href="#Backslash-escapes" class="headerlink" title="Backslash-escapes"></a>Backslash-escapes</h5><p>任何的ASCII 符号字符都能被反斜杠转义，必要的时候使用</p>
<h5 id="Entity-and-numeric-character-references"><a href="#Entity-and-numeric-character-references" class="headerlink" title="Entity-and-numeric-character-references"></a>Entity-and-numeric-character-references</h5><p>所有的合法HTML实体引用以及数字符号引用，只要不是出现在代码块或者代码域中，都能被识别为对应的unicode字符。</p>
<p>常见的引用有：</p>
<ul>
<li><code>&amp;nbsp;</code> 代表空格</li>
</ul>
<ul>
<li><p>&amp; &copy; &AElig; &Dcaron;<br>&frac34; &HilbertSpace; &DifferentialD;<br>&ClockwiseContourIntegral; &ngE; 的表示依次如下</p>
<pre><code>&amp;amp; &amp;copy; &amp;AElig; &amp;Dcaron;
&amp;frac34; &amp;HilbertSpace; &amp;DifferentialD;
&amp;ClockwiseContourIntegral; &amp;ngE;
</code></pre></li>
</ul>
<h5 id="Code-spans"><a href="#Code-spans" class="headerlink" title="Code-spans"></a>Code-spans</h5><p>由反引号包裹的字符串称之为<code>code span</code>, 中文翻译成“代码域”似乎有点别扭，将就吧，知道是啥就行。这个用的很多，通常用作单词的高亮处理</p>
<h5 id="Emphasis-and-strong-emphasis"><a href="#Emphasis-and-strong-emphasis" class="headerlink" title="Emphasis-and-strong-emphasis"></a>Emphasis-and-strong-emphasis</h5><p>强调和着重强调，在markdown中由<code>*</code>和<code>_</code>标识符引导</p>
<p>这里面的细节规则很多，但普通用户掌握最基本的用法就好</p>
<ul>
<li><p>示例：<em>普通强调</em> </p>
<pre><code>*普通强调*
</code></pre></li>
<li><p>示例：<strong>着重强调</strong></p>
<pre><code>**着重强调**
</code></pre></li>
<li><p>示例：<strong><em>着重强调</em></strong></p>
<pre><code>***着重强调***
</code></pre></li>
</ul>
<h5 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h5><p>链接的规则为</p>
<ul>
<li><p><code>[link_text](url &quot;title&quot;)</code>, title可省略</p>
<p>  eg：</p>
<pre><code>[link](#fragment) 页面内跳转（全小写字母）
[link](http://example.com#fragment)
</code></pre></li>
<li><p>当不需要说明，仅展示url文本的链接,由尖括号包裹链接即可</p>
<p>  <code>&lt;whatever-url-it-is&gt;</code></p>
</li>
</ul>
<h5 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h5><p>图片的引用和链接非常像, 前面多一个感叹号</p>
<ul>
<li><code>![foo](/url &quot;title&quot;)</code></li>
</ul>
<h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>markdown是一种类似html的标记语言，让使用者更加专注于内容的编写，而不关心样式。但它仍然是一门<code>语言</code>。</p>
<p>之前介绍的都是语法。语法虽然简单，但使用时依然会遇到一些问题。</p>
<h3 id="语法渲染差异"><a href="#语法渲染差异" class="headerlink" title="语法渲染差异"></a>语法渲染差异</h3><p>常见的场景就是选择了不同的markdown编辑器，在这个里面打开视图没问题，去另外的就会出现渲染问题。</p>
<ul>
<li>比如标题符号<code>#</code>后面要不要紧跟空格<br>eg:  <code>## 我是二级标题</code><br><code>haroopad</code>的语法可带可不带，而<code>vscode</code>必须带空格</li>
<li>haroopad支持高亮语法<br>eg: <code>==highlight==</code><br>vscode没有</li>
</ul>
<p>这些看起来是编辑器差异，其实是markdown规范实现的差异</p>
<h3 id="markdown规范"><a href="#markdown规范" class="headerlink" title="markdown规范"></a>markdown规范</h3><p>啰嗦几句规范的意义。</p>
<p>语言规范就是标准的定义。</p>
<p>只要符合这个标准，具体的实现不限，当然还可以自行添加新特性。</p>
<p>markdown的基本规范是<a href="http://commonmark.org/help/" target="_blank" rel="external">CommonMark </a></p>
<p>规范也是可以不断更新，版本迭代的，截止到本文编写的时间，CommonMark的最新版本是<code>v0.28, 2017-08-01</code></p>
<p>历史版本见<a href="https://spec.commonmark.org/" target="_blank" rel="external">历史版本列表</a></p>
<p>规范只有一个，但实现可以有多种，markdown的实现也是一样，根据<code>commonMark</code>的官方统计，目前在册的已经有几十种了。具体可参考<br><a href="https://github.com/commonmark/CommonMark/wiki/Markdown-Flavors" target="_blank" rel="external">规范实现列表</a></p>
<p>之前的语法渲染问题的原因就是，vscode支持的markdown语法只是最基本标准的实现，haroopad根据规范有一套自己的实现，也就是<a href="http://pad.haroopress.com/page.html?f=haroopad-flavored-markdown" target="_blank" rel="external">Haroopad Flavored Markdown</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因此，编辑器的选择只是表象。<br>如果只是编写标准的markdown，那用什么编辑器都一样。<br>然而如果选择的是某一特定版本的实现，则需要参考相对应的使用说明，以及选择对应的渲染方式</p>
<p>当写markdown时，一定要清楚自己写的是哪一种实现，一般来说写标准的肯定没错，但一些有特色的特性也很有吸引力，如果使用时务必要使用对应的解析和渲染手段才能达到预期效果。</p>
]]></content>
      
        <categories>
            
            <category> Markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次面试总结]]></title>
      <url>/2018/an-interview-summary/</url>
      <content type="html"><![CDATA[<p>嗯，最近出去面试了(嘘……看到了保密)，说下最近的一次，本来以为挺有希望的，但还是准备不充分，说了很多即兴不过脑子的回答，可能给人留下一种很不靠谱的感觉吧。不过这都不是最重点，重点是面试中被问到了一个很有“想法”的问题，当时我没能捋清思路，回答的不是很完美。但在我回来研究了一下之后，发现面试官给的答案其实也不对……whatever，我只想总结下这次值得学习的经历。<br><a id="more"></a></p>
<h2 id="问题回顾"><a href="#问题回顾" class="headerlink" title="问题回顾"></a>问题回顾</h2><p>印象中记得<code>document ready</code>是网页加载完成的标志事件。一般借助<code>jQuery</code>实现应用，常见的三种语法是：</p>
<ul>
<li><code>$(document).ready(callback)</code></li>
<li><code>$().ready(callback)</code></li>
<li><code>$(callback)</code></li>
</ul>
<p>作用是监听文档加载状态，在加载完成时调用回调函数做一些操作。</p>
<p>由于没有深入总结过，我的认知只停留在这个层次，直到我在面试中被问到这样一个问题</p>
<pre><code>如何判断一个页面完全加载完成?
</code></pre><ul>
<li>我的回答是通过<code>seleniumLibrary</code>的库关键字<code>确认页面title</code>以及<code>定位一个已知页面元素</code>是否存在</li>
<li>这个回答被质疑，定位页面中的一个元素的存在就能确认整个页面加载完成么？</li>
<li>质疑很合理，页面中会有异步数据请求然后重新渲染DOM的操作，如何确认异步请求完成？</li>
<li>我继续回答异步请求拿AJAX举例，成功或失败时都会用回调函数，可以做一些操作当作完成标志，比如弹个窗</li>
<li>虽然回答没有大的问题，但还不是提问者心里的答案</li>
<li>我想了一会儿又补充了一个方法，在文档最后追加一个<code>script</code>，里面append一个隐藏元素，然后定位该元素的存在</li>
<li>这个答案也被否定，现在想想确实风马牛不相及，当时脑子一定短路了</li>
</ul>
<p>最后我询问提问者能否给出好的解决方法，他说的是<code>document ready</code>。</p>
<p>说实话当时只感觉没get到提问者的问题点，翻译下他的问题应该是<code>页面加载完成有什么标志?</code>。</p>
<p>如果能get到这个点的话，我应该能反应过来。</p>
<p>甚至还能说一下<code>$(document).ready(callback)</code> 和 <code>window.onload = callback</code>的区别</p>
<p>不过回来后仍给我带来了一些思考？</p>
<ul>
<li><code>document ready</code>是文档同步加载完成（仅指页面内<code>&lt;html</code>&gt;标签所包含的元素）的标志没问题，也能监听异步的文档渲染么？</li>
<li>浏览器拿到服务端的html是如何完成解析的</li>
</ul>
<p>以下主要探讨这两个问题</p>
<h2 id="document-ready"><a href="#document-ready" class="headerlink" title="$(document).ready"></a>$(document).ready</h2><p>先说结论，<code>jquery ready</code>只是文档同步加载完成的标志，它并不能监测到<code>异步的文档渲染</code>。</p>
<p>实例验证如下：</p>
<p>延迟3秒向页面中添加一个<code>p</code>元素，并监听<code>document.ready</code>事件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">      $(document).ready(function () &#123;</div><div class="line">          alert('document is ready')</div><div class="line">      &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      this is a div</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">      setTimeout(() =&gt; &#123;</div><div class="line">        $('body').append("<span class="tag">&lt;<span class="name">p</span>&gt;</span>You can't see me<span class="tag">&lt;/<span class="name">p</span>&gt;</span>")</div><div class="line">      &#125;, 3000);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于<code>alert</code>有中断浏览器渲染的作用，所以<code>alert</code>出现时，观察页面元素即可得出结论。</p>
<p>结果是:</p>
<ul>
<li>页面立即显示<code>alert</code>的内容</li>
<li>出现<code>alert</code>时，<code>&lt;div&gt;</code>和<code>&lt;button&gt;</code>元素已经存在，说明确实是加载完成才触发的<code>ready</code>事件。</li>
<li>点击alert的确认，三秒后添加的<code>&lt;p&gt;</code>元素出现，说明<code>alert</code>的中断确实起作用，且异步文档渲染不在<code>ready</code>事件监控范围内。</li>
</ul>
<p>如果觉得样例不够还可自行验证，我结合后端模拟了ajax请求，结论也是如此。</p>
<p>这里不再重复举例，因为原理都是一样的，异步的文档操作都是对文档的重绘或者重画，不算在当前页面加载的范围内。</p>
<p><code>jQuery ready</code>只是同步文档加载完成的标志，不参与异步的监听。</p>
<h2 id="文档渲染流程"><a href="#文档渲染流程" class="headerlink" title="文档渲染流程"></a>文档渲染流程</h2><p>根据<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState" target="_blank" rel="external">Web API</a><br>文档的加载状态 <code>Document.readyState</code> 分三个阶段</p>
<ul>
<li><code>loading</code>, 仍在加载</li>
<li><code>interactive</code>， 文档已经完成加载并解析完成，但例如图片，样式文件、子窗口等子资源仍在加载中。对应<code>jquery ready</code>事件，同步文档已经渲染完成，可以获取DOM。</li>
<li><code>complete</code>，所有子资源均加载完成，触发<code>load</code>事件。如果此时注册<code>window.onload</code>回调函数，则会被调用</li>
</ul>
<p>eg：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (<span class="built_in">document</span>.readyState) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">"loading"</span>:</div><div class="line">    <span class="comment">// The document is still loading.</span></div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="string">"interactive"</span>:</div><div class="line">    <span class="comment">// The document has finished loading.</span></div><div class="line">    <span class="comment">// We can now access the DOM elements.</span></div><div class="line">    <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</div><div class="line">    span.textContent = <span class="string">"A &lt;span&gt; element."</span>;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(span);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="string">"complete"</span>:</div><div class="line">    <span class="comment">// The page is fully loaded.</span></div><div class="line">    <span class="keyword">let</span> CSS_rule = <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].cssRules[<span class="number">0</span>].cssText;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`The first CSS rule is: <span class="subst">$&#123;CSS_rule &#125;</span>`</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>总结来说，我们日常说的页面加载完成，基本指的是当前页面内的元素以同步的方式加载完成。</p>
<p>加载渲染会经历三个阶段：</p>
<ul>
<li>loading，加载中</li>
<li>interactive，加载完成（除了图片、样式、子窗口等元素），可以访问DOM元素，触发<code>jQuery ready</code>事件。</li>
<li>complete, 渲染完成（不包括异步的DOM操作），样式也有了，触发<code>load</code>事件，调用注册的<code>window.onload</code>函数</li>
</ul>
<h2 id="More-Details"><a href="#More-Details" class="headerlink" title="More Details"></a>More Details</h2><p>前两部分的总结，基本清楚了html文档的整体加载过程，知道了大体分三个阶段，每个阶段都有哪些标志，但还不够具体。</p>
<p>查阅资料得知页面的渲染机制如下流程图所示：</p>
<p><img src="http://opxo4bto2.bkt.clouddn.com/html_parsing.png" alt="html_parsing"></p>
<p>以webkit内核的渲染流程举例来说：</p>
<p><img src="http://opxo4bto2.bkt.clouddn.com/webkit-render-flow.png" alt="webkit-render-flow"></p>
<p>浏览器拿到html的解析由渲染引擎来做，这部分是不同于网络资源加载时的多线程，而是单线程的</p>
<ul>
<li>从<code>&lt;html&gt;</code>节点开始分析，从上到下</li>
<li>遇到<code>&lt;script&gt;</code>,对于外链的JavaScript文件，需要先加载该文件内容，再进行解析，然后立即执行。这整个过程都会<code>阻塞文档解析</code>，直到脚本执行完才会继续解析文档节点。所以一般<code>&lt;script&gt;</code>标签都建议放在最后的<code>&lt;/body&gt;</code>元素之前，HTML5提供<code>defer</code>和<code>async</code>两个属性支持延迟和异步加载JavaScript文件</li>
<li>针对上文说的脚本阻塞文档解析，主流浏览器如Chrome和FireFox等都有一些优化。<br>比如在执行脚本时，开启另外的线程(一般限制在2-6个)解析剩余的文档以找出并加载其他的待下载外部资源（不改变主线程的DOM树，仅优化加载外部资源）。</li>
<li>对样式的处理也会阻塞文档解析，加载外部样式时后续js和文档解析都不会继续进行</li>
<li>在脚本中请求样式信息，如果样式尚未加载或解析，将会得到<code>错误信息</code></li>
<li>为了更友好的用户体验，浏览器会尽可能快的展现内容，而不会等到文档所有内容到达才开始解析和构建/布局渲染树，而是每次处理一部分，并展现在屏幕上，这也是为什么我们经常可以看到页面加载的时候内容是从上到下一点一点展现的。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在在让我回答</p>
<ul>
<li><p>如何确定一个页面完全加载完成？</p>
<ul>
<li>我的回答依然会是确认页面title以及确认页面是否包含一个或一些目标元素（熟悉seleniumLibray的同学应该清楚，有两个库关键字来做这个工作，<code>Title Should Be</code>和<code>Element Should Contain</code>，当然还有一个<code>Wait Until Element Contains</code>会更合适)<br>这里就算是考虑异步加载数据并重新渲染文档的情况，也可以把要加载的元素当做定位元素去确认。<br>如果非要纠结异步结束的标志，这题根本没法答。因为页面上如果存在10个异步操作，怎么确认谁是最后完成的那个呢？</li>
</ul>
</li>
<li><p>如何确定异步请求的结束？</p>
<ul>
<li>只能通过异步请求自身的消息监听，外部无法获取它的状态变化</li>
</ul>
</li>
<li><p><code>document ready</code>事件和<code>window load</code>事件分别是什么动作完成的标志</p>
<ul>
<li>前者是<code>当前文档内</code>（异步DOM操作不包含在内）的DOM树构建完成的标志，可以进行DOM操作了，但是还没有完成渲染</li>
<li>后者是整个页面加载并渲染完成的标志</li>
</ul>
</li>
<li><p>js的下载和执行顺序能保证么？</p>
<ul>
<li>js的下载顺序不能保证，因为网络部分是多线程下载的；执行顺序是可以保证的，会按照页面<code>&lt;script&gt;</code>标签出现的顺序执行内部同步代码（异步操作加入事件循环），因为渲染引擎是单线程的</li>
</ul>
</li>
<li><p>页面的解析渲染流程？</p>
<ul>
<li>从html头开始，一边解析一边渲染，主线程会被外部资源的加载以及js的执行阻塞，因此资源放置的位置以及顺序是有影响的</li>
</ul>
</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState" target="_blank" rel="external">Web API</a></li>
<li>《WebKit技术内幕》</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Common-sense </category>
            
            <category> Summary </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[async/await]]></title>
      <url>/2018/async-await/</url>
      <content type="html"><![CDATA[<p>async/await, 号称js异步的终极方案……虽然似乎只是语法糖，但确实减少了代码量，让代码同步化，一直拖着没用，但不学不行啊<br><a id="more"></a></p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ul>
<li><code>async</code>修饰放在函数声明前，表示函数里有异步操作</li>
<li><code>async</code>函数的返回值会被封装为<code>promise</code>对象</li>
<li><code>await</code>只能出现在<code>async</code>函数中，表示后面的表达式需要等待结果，</li>
<li><code>await</code>后面的返回值一般是promise对象，如果不是也会被<code>Promise.resolve()</code>转换</li>
<li><code>await</code>后面的promise对象状态如果变为<code>reject</code>,会有<code>return</code> 的效果，不再执行后续语句</li>
<li>如果希望前一个异步失败不影响后面的状态，需要将<code>await</code>语句用<code>try...catch</code>包裹</li>
</ul>
<p>基本示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(resolve, ms);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">value, ms</span>) </span>&#123;</div><div class="line">  <span class="keyword">await</span> timeout(ms);</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">  <span class="keyword">return</span> <span class="string">'bye'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">asyncPrint(<span class="string">'hello world'</span>, <span class="number">2000</span>).then(<span class="function"><span class="params">ret</span>=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(ret);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>await状态转为失败时的处理<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">await</span> somethingThatReturnsAPromise();</div><div class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 另一种写法</span></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">await</span> somethingThatReturnsAPromise()</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="同时执行"><a href="#同时执行" class="headerlink" title="同时执行"></a>同时执行</h3><p><code>await</code>语句会保持顺序执行，如果不存在顺序关系的两个操作，可以并行执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方式一</span></div><div class="line"><span class="keyword">var</span> [foo, bar] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([getFoo(), getBar()])</div><div class="line"><span class="comment">//方式二</span></div><div class="line"><span class="keyword">let</span> fooPromise = getFoo();</div><div class="line"><span class="keyword">let</span> barPromise = getBar();</div><div class="line"><span class="keyword">let</span> foo = <span class="keyword">await</span> fooPromise;</div><div class="line"><span class="keyword">let</span> bar = <span class="keyword">await</span> barPromise;</div></pre></td></tr></table></figure></p>
<h3 id="await与for循环"><a href="#await与for循环" class="headerlink" title="await与for循环"></a>await与for循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>)=&gt;</span>&#123;</div><div class="line">    setTimeout(res, <span class="number">1000</span>*i, i)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</div><div class="line">        <span class="built_in">console</span>.time(i);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ret: '</span> + <span class="keyword">await</span> f(i));</div><div class="line">        <span class="built_in">console</span>.timeEnd(i)</div><div class="line">    &#125;   </div><div class="line">&#125;</div><div class="line"></div><div class="line">test()</div></pre></td></tr></table></figure>
<p>这段输出如下，for循环有被中断的效果<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ret: <span class="number">0</span></div><div class="line"><span class="number">0</span>: <span class="number">5.512</span>ms</div><div class="line">ret: <span class="number">1</span></div><div class="line"><span class="number">1</span>: <span class="number">1000.404</span>ms</div><div class="line">ret: <span class="number">2</span></div><div class="line"><span class="number">2</span>: <span class="number">2000.869</span>ms</div><div class="line">ret: <span class="number">3</span></div><div class="line"><span class="number">3</span>: <span class="number">3001.408</span>ms</div><div class="line">ret: <span class="number">4</span></div><div class="line"><span class="number">4</span>: <span class="number">4000.921</span>ms</div></pre></td></tr></table></figure></p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>async/await 从promise迁移过来使用还是很简单的，之前已经总结了部分错误处理</p>
<p>那就是<code>try...catch</code>,但每个await写个<code>try...catch</code>实在是不够优雅</p>
<p>那就简单写个封装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">to</span>(<span class="params">promise</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> promise.then(<span class="function"><span class="params">ret</span>=&gt;</span>&#123;</div><div class="line">        <span class="keyword">return</span> [<span class="literal">null</span>, ret]</div><div class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>[err])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    [err, ret] = <span class="keyword">await</span> to(getFoo())</div><div class="line">    <span class="keyword">if</span>(err)&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;</div><div class="line">    [err, ret] = <span class="keyword">await</span> to(getBar())</div><div class="line">    <span class="keyword">if</span>(err)&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>虽然也没有多高级，但显然比<code>try...catch</code>要优雅的多……</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本来想从ES6的generator开始总结起，然而ES6规范还没普及就被ES7的async/await干掉了……</p>
<p>不存在兼容性问题的情况下，直接使用async/await能让语义更清晰，也能减少代码量，值得学习和使用</p>
<p>参考资料：</p>
<ul>
<li><a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="external">async函数</a></li>
<li><a href="https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/" target="_blank" rel="external">How to write async await without try-catch blocks in Javascript</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Async-await </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基本数据结构：Python vs Javascript]]></title>
      <url>/2018/datatype-py-vs-js/</url>
      <content type="html"><![CDATA[<p>写多了nodejs再回来写python提笔就忘，说出来还被人说代码量少……嗯，无法反驳。<br>仔细想了下，徒手写代码到底困难在哪儿，想来大概是数据结构和基本语法了。<br>把这两种语言放一块儿对比着来总结下，主要就数据结构和基本语法两部分，备忘。<br><a id="more"></a></p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>六大基本类型以及引用类型</p>
<p>基本类型：number, string, boolean(true/false), null, undefined, Symbol<br>引用类型：Object</p>
<p>对象还可细分为 <code>Array</code>, <code>Functio</code>n, <code>Date</code>, <code>Math</code>等</p>
<p>ES6新增了<code>Set</code>和<code>Map</code>对象等</p>
<h3 id="py"><a href="#py" class="headerlink" title="py"></a>py</h3><p>基本类型和集合</p>
<p>基本类型：number, string, boolean(True/False), None(空值)<br>集合：list, tuple, set, dictionary</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="py-1"><a href="#py-1" class="headerlink" title="py"></a>py</h3><p>python的变量不用特殊声明，除非在局部作用域使用全局变量需要使用<code>global</code>声明</p>
<p>另外，python里一切皆对象，变量的赋值相当于将name和object绑定在一起<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a= <span class="number">3</span></div></pre></td></tr></table></figure></p>
<ul>
<li>创建name a</li>
<li>创建object 3</li>
<li>将name a 关联到 3这个object </li>
</ul>
<p>以后就可以用a来调用3这个object</p>
<h3 id="js-1"><a href="#js-1" class="headerlink" title="js"></a>js</h3><p>相比python，js就要显得麻烦一些</p>
<h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><p>ES6新增<code>let</code>,<code>const</code>声明关键字</p>
<ul>
<li><code>let</code>，块级作用域</li>
<li><code>var</code>，函数作用域</li>
<li><code>const</code>， 声明变量值不可更改，对象则是指针的指向不可变</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">a <span class="comment">// ReferenceError: a is not defined.</span></div><div class="line">b <span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">  <span class="keyword">let</span> i = <span class="string">'lalala'</span> <span class="comment">//不会报错，for循环体和循环条件是两个作用域</span></div><div class="line">  <span class="built_in">console</span>.log(i) </div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i); <span class="comment">//ReferenceError: i is not defined</span></div></pre></td></tr></table></figure>
<ul>
<li><code>var</code>可重复声明，后续变量值会覆盖前面</li>
<li><code>let</code>和<code>const</code>均不可重复声明，否则会报错</li>
</ul>
<h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><ul>
<li><code>var</code>存在变量提升，</li>
<li><code>let</code>和<code>const</code>不存在变量提升</li>
<li>函数声明也会得到提升<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined, 声明未赋值</span></div><div class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></div><div class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></div><div class="line"><span class="keyword">const</span> bar = <span class="number">2</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>再举一个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(tmp);</div><div class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</div><div class="line">    <span class="keyword">var</span> tmp = <span class="string">'hello world'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">f();</div></pre></td></tr></table></figure></p>
<p>输出不是当前日期，而是<code>undefined</code>, 因为函数内部tmp的声明被提升</p>
<p>虽然日常代码不会这么写，但非常具备迷惑性</p>
<h4 id="let和const的暂时性死区（Temporal-Dead-Zone）"><a href="#let和const的暂时性死区（Temporal-Dead-Zone）" class="headerlink" title="let和const的暂时性死区（Temporal Dead Zone）"></a>let和const的暂时性死区（Temporal Dead Zone）</h4><p>只要<code>块级作用域</code>内存在let或const命令，它所声明的变量就<code>绑定</code>（binding）这个区域，不再受外部的影响。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></div><div class="line">  <span class="keyword">let</span> tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果注释掉let的声明，这段代码是没有问题的</p>
<p>但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错</p>
<pre><code>总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量
</code></pre><h2 id="数据类型判断"><a href="#数据类型判断" class="headerlink" title="数据类型判断"></a>数据类型判断</h2><h3 id="js-2"><a href="#js-2" class="headerlink" title="js"></a>js</h3><ul>
<li><code>typeof</code>, 运算符，返回表达式数据类型的全小写<code>字符串</code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="number">123</span>       <span class="comment">// 'number'</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>       <span class="comment">// 'number'</span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> <span class="string">'abc'</span>     <span class="comment">// 'string`</span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// 'undefined'</span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> <span class="literal">null</span>      <span class="comment">// 'object'</span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> <span class="literal">true</span>      <span class="comment">// 'boolean'</span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> &#123;&#125;        <span class="comment">// 'object'</span></div><div class="line"><span class="keyword">typeof</span> []        <span class="comment">// 'object'</span></div><div class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;    <span class="comment">// 'function'</span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> unknownVariable <span class="comment">// 'undefined'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>数组的判断使用ES6里的新增方法<code>Array.isArray</code>, 接受一个参数返回布尔值。</p>
<p>或者自行如下实现<br><code>Object.prototype.toString.call(arg) === &#39;[object Array]&#39;;</code></p>
<p><code>NaN</code>的判断使用<code>Number.isNaN</code></p>
<h3 id="py-2"><a href="#py-2" class="headerlink" title="py"></a>py</h3><ul>
<li><p><code>type(var)</code>,和已知变量类型对比</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">type(myInt) <span class="keyword">is</span> type(<span class="number">1</span>)</div><div class="line">type(myFloat) <span class="keyword">is</span> type(<span class="number">.1</span>)</div><div class="line">type(myLong) <span class="keyword">is</span> type(<span class="number">1111111111111</span>)</div><div class="line">type(myBool) <span class="keyword">is</span> type(<span class="keyword">True</span>)</div><div class="line">type(myStr) <span class="keyword">is</span> type(<span class="string">"a"</span>)</div><div class="line">type(myList) <span class="keyword">is</span> type([<span class="number">1</span>])</div><div class="line">type(myTuple) <span class="keyword">is</span> type((<span class="number">1</span>,))</div><div class="line">type(mySet) <span class="keyword">is</span> type(set([<span class="number">1</span>]))</div><div class="line">type(myDict) <span class="keyword">is</span> type(&#123;<span class="number">1</span>:<span class="number">2</span>&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p><code>isinstance(object, class-or-type-or-tuple)</code>, 返回布尔值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">isinstance(myInt, int)</div><div class="line">isinstance(myFloat, float)</div><div class="line">isinstance(myLong, float)</div><div class="line">isinstance(myBool, bool)</div><div class="line">isinstance(myStr, str)</div><div class="line">isinstance(myList, list)</div><div class="line">isinstance(myTuple, tuple)</div><div class="line">isinstance(mySet, set)</div><div class="line">isinstance(myDict, dict)</div><div class="line"><span class="comment"># 第二个参数使用tuple类型</span></div><div class="line">isinstance(myDict, (list, tuple, set, dict))</div></pre></td></tr></table></figure>
</li>
<li><p>内置库，types</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> types</div><div class="line"></div><div class="line">type(myInt) <span class="keyword">is</span> types.IntType</div><div class="line">type(myFloat) <span class="keyword">is</span> types.FloatType</div><div class="line">type(myLong) <span class="keyword">is</span> types.LongType</div><div class="line">type(myBool) <span class="keyword">is</span> types.BooleanType</div><div class="line">type(myStr) <span class="keyword">is</span> types.String</div><div class="line">type(myList) <span class="keyword">is</span> types.ListType</div><div class="line">type(myTuple) <span class="keyword">is</span> types.TupleType</div><div class="line"><span class="comment"># types库中没有对应的set类型，需要前两种方法</span></div><div class="line">type(myDict) <span class="keyword">is</span> types.DictType</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="判断相等"><a href="#判断相等" class="headerlink" title="判断相等"></a>判断相等</h2><h3 id="js-3"><a href="#js-3" class="headerlink" title="js"></a>js</h3><p>使用<code>===</code>,不建议使用<code>==</code>来自找麻烦<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="literal">null</span> === <span class="literal">null</span>            <span class="comment">//true</span></div><div class="line"><span class="literal">undefined</span> === <span class="literal">undefined</span>  <span class="comment">//true</span></div><div class="line">&#123;&#125; === &#123;&#125;                <span class="comment">//false</span></div><div class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>              <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<h3 id="py-3"><a href="#py-3" class="headerlink" title="py"></a>py</h3><p>判断相等，python和js出入较大</p>
<p>python的对象包含三要素:id，type，value</p>
<ul>
<li><code>is</code>，id和value都相等</li>
<li><code>==</code>，value相等</li>
<li><code>!=</code>，value不相等<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">a = b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>&#125; </div><div class="line">e = &#123;<span class="string">'a'</span>:<span class="number">1</span>&#125; </div><div class="line"></div><div class="line"><span class="keyword">print</span> a == b  <span class="comment"># True</span></div><div class="line"><span class="keyword">print</span> a == c  <span class="comment"># True !!!</span></div><div class="line"><span class="keyword">print</span> a <span class="keyword">is</span> b  <span class="comment"># True</span></div><div class="line"><span class="keyword">print</span> a <span class="keyword">is</span> c  <span class="comment"># True</span></div><div class="line"><span class="keyword">print</span> d == e  <span class="comment"># True !!!</span></div><div class="line"><span class="keyword">print</span> <span class="keyword">None</span> <span class="keyword">is</span> <span class="keyword">None</span> <span class="comment"># True</span></div><div class="line"><span class="keyword">print</span> <span class="keyword">None</span> == <span class="keyword">None</span> <span class="comment"># True</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>这里主要说明了<code>is</code>和<code>==</code>的区别。同时也引出了第二个问题，对象相等</p>
<p>另外同一类的实例对象，一般是不相等，因为内存地址不同</p>
<p>但可以重载<code>__eq__</code>方法实现定制</p>
<p>与之相反的是<code>__ne__</code>方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name=name</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name == other.name</div><div class="line"></div><div class="line"><span class="keyword">print</span> Foo(<span class="string">'zhangsan'</span>) == Foo(<span class="string">'lisi'</span>)     <span class="comment"># False</span></div><div class="line"><span class="keyword">print</span> Foo(<span class="string">'zhangsan'</span>) == Foo(<span class="string">'zhangsan'</span>) <span class="comment"># True</span></div></pre></td></tr></table></figure></p>
<p>从而不难理解为什么python里引用类型也会出现相等的情况了，其实只是单纯的值相等而已</p>
<h2 id="假值"><a href="#假值" class="headerlink" title="假值"></a>假值</h2><h3 id="js-4"><a href="#js-4" class="headerlink" title="js"></a>js</h3><ul>
<li><code>false</code> (boolean)</li>
<li>空字符串</li>
<li>数值为<code>0</code></li>
<li><code>undefined</code></li>
<li><code>null</code></li>
<li><code>NaN</code><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3></li>
<li><code>False</code> (boolean)</li>
<li>空序列，包括空字符串, [], {}, ()</li>
<li>数值为<code>0</code></li>
<li><code>None</code></li>
</ul>
<h2 id="判断及循环"><a href="#判断及循环" class="headerlink" title="判断及循环"></a>判断及循环</h2><h3 id="js-5"><a href="#js-5" class="headerlink" title="js"></a>js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// if/else</span></div><div class="line"><span class="keyword">if</span>()&#123;</div><div class="line"></div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>&#123;</div><div class="line"></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//while</span></div><div class="line"><span class="keyword">while</span>()&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//for</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;  <span class="comment">//i: index or key</span></div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> array_obj)&#123; <span class="comment">//x: value</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="python-1"><a href="#python-1" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># if/else</span></div><div class="line"><span class="keyword">if</span> cond:</div><div class="line">    statement</div><div class="line"><span class="keyword">elif</span> cond:</div><div class="line">    statement</div><div class="line"><span class="keyword">else</span></div><div class="line">    statement</div><div class="line"></div><div class="line"><span class="comment"># while</span></div><div class="line"><span class="keyword">while</span> cond:</div><div class="line">    statement</div><div class="line"></div><div class="line"><span class="comment"># for, 任何可迭代的对象都可以for循环</span></div><div class="line"><span class="keyword">for</span> value <span class="keyword">in</span> array_list:</div><div class="line">    <span class="keyword">print</span> value</div><div class="line"></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range[len(array_list)]</div><div class="line">    <span class="keyword">print</span> index</div><div class="line"></div><div class="line">d = [(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>)]  </div><div class="line"><span class="comment"># 迭代二元list </span></div><div class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> d:  </div><div class="line">    <span class="keyword">print</span> x, y</div><div class="line"></div><div class="line">d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span>, <span class="string">'Paul'</span>: <span class="number">74</span> &#125;  </div><div class="line"></div><div class="line"><span class="comment"># 迭代dict的键，相当于将字典转换成key的list，相比iterkeys更费内存 </span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.keys():  </div><div class="line">    <span class="keyword">print</span> x  </div><div class="line">  </div><div class="line"><span class="comment"># 也可以采用这种方式迭代  </span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.iterkeys():  </div><div class="line">    <span class="keyword">print</span> x  </div><div class="line">  </div><div class="line"><span class="comment"># 迭代dict的值  </span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.values():  </div><div class="line">    <span class="keyword">print</span> x  </div><div class="line">  </div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.itervalues():  </div><div class="line">    <span class="keyword">print</span> x  </div><div class="line">  </div><div class="line"><span class="comment"># 迭代键值对  </span></div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():  </div><div class="line">    <span class="keyword">print</span> k, <span class="string">":"</span>, v  </div><div class="line">  </div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.iteritems():  </div><div class="line">    <span class="keyword">print</span> k, <span class="string">":"</span>, v</div></pre></td></tr></table></figure>
<h2 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h2><h3 id="js-6"><a href="#js-6" class="headerlink" title="js"></a>js</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组 - []"></a>数组 - <code>[]</code></h4><ul>
<li>索引越界访问返回<code>undefined</code></li>
</ul>
<p>常用属性方法：</p>
<ul>
<li><code>length</code> 返回数组长度</li>
<li><code>push(element1[, ...[, elementN]])</code>,</li>
<li><code>unshift(element1[, ...[, elementN]])</code></li>
<li><code>pop()</code></li>
<li><code>shift()</code></li>
<li><code>sort([compareFunction])</code>, 默认从小到大</li>
<li><code>includes()</code></li>
<li><code>join()</code>， 返回字符串，默认逗号分隔</li>
</ul>
<h4 id="对象"><a href="#对象" class="headerlink" title="对象 - {}"></a>对象 - <code>{}</code></h4><ul>
<li>key-value赋值，点运算符或<code>[属性名]</code>均可</li>
<li>访问不存在的属性返回<code>undefined</code></li>
<li><code>key</code>一般为字符串</li>
<li>for循环取到的是key值</li>
<li>ES6 支持对象属性解构</li>
<li><code>Object.keys(obj)</code>,返回对象可枚举属性的字符串数组</li>
<li><code>Object.values(obj)</code>,返回对象可枚举属性值的数组</li>
</ul>
<h3 id="py-4"><a href="#py-4" class="headerlink" title="py"></a>py</h3><h4 id="list"><a href="#list" class="headerlink" title="list - []"></a>list - <code>[]</code></h4><ul>
<li>索引越界访问返回<code>IndexError</code></li>
<li><code>-1</code>做索引可以取到最后一个元素，依次类推</li>
<li>获取长度使用<code>len(list_var)</code></li>
</ul>
<p>常用属性方法</p>
<ul>
<li><code>append(element)</code>, 追加元素到末尾</li>
<li><code>insert(index, element)</code>, 查人元素到指定位置</li>
<li><code>pop(index)</code>, 删除指定位置的元素，返回该元素</li>
</ul>
<p>列表生成器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">l = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>)]</div></pre></td></tr></table></figure></p>
<p>将中括号<code>[]</code>换成括号<code>()</code>,即返回一个生成器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">3</span>))</div><div class="line"><span class="keyword">print</span> next(g) <span class="comment"># 0</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> g:</div><div class="line">    <span class="keyword">print</span> x</div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># 4</span></div></pre></td></tr></table></figure></p>
<h4 id="tuple"><a href="#tuple" class="headerlink" title="tuple - ()"></a>tuple - <code>()</code></h4><p>和list类似，但是tuple一旦初始化就<code>不能修改</code>（指向）</p>
<p>也因此没有动态修改的方法，只有通过索引来访问值</p>
<p>定义一个tuple使用<code>t=()</code><br>但是定义一个元素的tuple要使用<code>t=(1,)</code>,否则会返回<code>数字1</code></p>
<h4 id="dict"><a href="#dict" class="headerlink" title="dict - {}"></a>dict - <code>{}</code></h4><ul>
<li><p>访问通过索引或者<code>get</code>方法</p>
<ul>
<li>通过索引访问的key不存在会报<code>keyError</code></li>
<li>通过get方法，返回None或指定值<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;d[<span class="string">'tom'</span>] = <span class="number">7</span></div><div class="line">&gt;&gt;&gt;d[<span class="string">'jerry'</span>]</div><div class="line">keyError</div><div class="line">&gt;&gt;&gt;d.get(<span class="string">'jerry'</span>, <span class="number">-1</span>)</div><div class="line"><span class="number">-1</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>key</code>值可以是任意类型，但必须是<code>不可变对象</code></p>
</li>
<li><code>pop(key)</code>, 删除指定key，返回value</li>
</ul>
<h3 id="set"><a href="#set" class="headerlink" title="set - ([])"></a>set - <code>([])</code></h3><p>和<code>dict</code>类似，但set只是一组key的集合，key值不重复，且不包含value</p>
<p>重复值会被过滤掉，且不保证顺序，是数学意义上的无序不重复元素的集合</p>
<ul>
<li><p>初始化</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### 直接定义</span></div><div class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>&#125;     <span class="comment">#set([1,2,3])</span></div><div class="line"></div><div class="line"><span class="comment">### 接受一个list参数</span></div><div class="line">s= set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]) <span class="comment">#set([1,2,3])</span></div></pre></td></tr></table></figure>
</li>
<li><p>set的元素只能是不可变对象，可变对象无法哈希化确定唯一值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = &#123;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)&#125;    <span class="comment"># ok</span></div><div class="line">s = &#123;(<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>])&#125;  <span class="comment"># typeError</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>常用方法</p>
<ul>
<li><code>add(key)</code>, 添加新元素，重复添加无效</li>
<li><code>remove(key)</code>, 删除元素</li>
<li><code>s1 &amp; s2</code>, 取交集</li>
<li><code>s1 | s2</code>, 取并集</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Common-sense </category>
            
            <category> Data-structure </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[包机制：Python vs Node.js]]></title>
      <url>/2018/package-in-python-and-nodejs/</url>
      <content type="html"><![CDATA[<p>专注在nodejs上有一段时间了，回头看看python发现忘得差不多了，还是得多做做总结加强记忆啊。<br>先从包机制入手，对比来看下python和nodejs的异同<br><a id="more"></a></p>
<h2 id="python-package"><a href="#python-package" class="headerlink" title="python package"></a>python package</h2><h3 id="导出模块"><a href="#导出模块" class="headerlink" title="导出模块"></a>导出模块</h3><p>python将一个文件或一个文件夹视为一个模块</p>
<p>如果是文件件，需要显示的创建<code>__init__.py</code>来标明</p>
<p>模块内定义的所有变量都可以被导出</p>
<p>python中的变量不强制使用前声明，默认为局部变量，但使用前必须被定义或赋值</p>
<p>全局变量需要用<code>global</code>声明</p>
<h3 id="导出模块-1"><a href="#导出模块-1" class="headerlink" title="导出模块"></a>导出模块</h3><p>python2.6以后及python3 默认支持的是绝对引用，也推荐这种方式</p>
<p>通过<code>import</code>关键字引入模块, 模块名不需要带<code>.py</code>后缀<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pkg</div><div class="line"><span class="keyword">from</span> pkg <span class="keyword">import</span> foo</div><div class="line"><span class="keyword">from</span> pkg.moduleA <span class="keyword">import</span> foo</div><div class="line"><span class="keyword">from</span> pkg.moduleA <span class="keyword">import</span> foo <span class="keyword">as</span> bar</div><div class="line"><span class="keyword">from</span> pkg <span class="keyword">import</span> *</div></pre></td></tr></table></figure></p>
<p>python解释器会自动在<code>sys.path</code>下去搜索<code>pkg</code>包</p>
<p>windows下可以定义<code>PYTHONPATH</code>使得路径永久生效</p>
<p><code>python -m</code>的方案可解决一些包引入错误，原理即使将<code>当前目录</code>加到<code>sys.path</code>中，<br>相当于提供了顶级目录。</p>
<p>引入模块的时候会执行内部代码，一些不想在引入时执行的内容一般处理如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pkg.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'123'</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> __name__  <span class="comment">#pkg</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    test()</div></pre></td></tr></table></figure></p>
<p>当作为模块引入时<code>__name__</code> 为包名，直接执行时为<code>__main__</code>, 以此来做区分</p>
<p>引入一个文件夹包，相当于引入它目录下的<code>__init__.py</code>, 一般为空文件</p>
<p>如果在里面引入子模块，则后续可以用<code>.</code>的形式链式调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""</span></div><div class="line">pkg</div><div class="line">├── __init__.py</div><div class="line">└── main.py</div><div class="line">test.py</div><div class="line">"""</div><div class="line"><span class="comment"># main.py</span></div><div class="line">a = <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment"># __init__.py 为空时，从test.py 引入变量a</span></div><div class="line"><span class="comment"># test.py</span></div><div class="line"><span class="keyword">from</span> pkg.main <span class="keyword">import</span> a</div><div class="line"><span class="keyword">print</span> a</div><div class="line"></div><div class="line"><span class="comment"># __init__.py</span></div><div class="line"><span class="keyword">import</span> main</div><div class="line"></div><div class="line"><span class="comment"># 可以在__init__.py中提前引入模块，方便后续调用</span></div><div class="line"><span class="comment"># test.py</span></div><div class="line"><span class="keyword">import</span> pkg</div><div class="line"><span class="keyword">print</span> pkg.main.a</div></pre></td></tr></table></figure></p>
<p>模块的<code>__all__</code>变量可以定制对外暴露的对象，不在其中的内容不能被外部引用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""</span></div><div class="line">pkg</div><div class="line">├── test.py</div><div class="line">└── main.py</div><div class="line">"""</div><div class="line"><span class="comment"># main.py</span></div><div class="line">__all__ = [<span class="string">'a'</span>]</div><div class="line"></div><div class="line">a = <span class="number">2</span></div><div class="line">b = <span class="number">3</span></div><div class="line"><span class="comment"># test.py</span></div><div class="line"><span class="keyword">from</span> main <span class="keyword">import</span> *</div><div class="line"><span class="keyword">print</span> a</div><div class="line"><span class="keyword">print</span> b</div></pre></td></tr></table></figure></p>
<p>执行 <code>test.py</code>,会得到错误<code># NameError: name &#39;b&#39; is not defined</code></p>
<p>注释掉<code>__all__</code>那行就不会报错了</p>
<h2 id="node-package"><a href="#node-package" class="headerlink" title="node package"></a>node package</h2><h3 id="导出模块-2"><a href="#导出模块-2" class="headerlink" title="导出模块"></a>导出模块</h3><p>node中一个文件就是一个模块</p>
<p>如果是文件夹，则目录下的<code>index.js</code>为默认导出文件</p>
<p>导出的内容和python不同，<code>必须</code>显性指定到<code>module.exports</code>上，该值默认为<code>{}</code></p>
<p>ES6的语法，则是利用<code>export</code>关键字去实现导出<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">exports = <span class="built_in">module</span>.exports = &#123;&#125;</div><div class="line"><span class="comment">//ES6 </span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> &#123;a&#125;</div><div class="line"><span class="keyword">export</span> &#123;a <span class="keyword">as</span> b&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> a;</div></pre></td></tr></table></figure></p>
<h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><p>node中包导入方式：</p>
<ul>
<li>传统的<code>require</code>函数</li>
<li>ES6的<code>import</code>函数</li>
</ul>
<p>先看require函数的用法</p>
<h4 id="模块名导入"><a href="#模块名导入" class="headerlink" title="模块名导入"></a>模块名导入</h4><p>直接使用<code>不带路径</code>的模块名一般为内置包或安装的第三方包<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div></pre></td></tr></table></figure></p>
<h4 id="相对路径导入"><a href="#相对路径导入" class="headerlink" title="相对路径导入"></a>相对路径导入</h4><p>导入模块的后缀可省<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'./index'</span>)</div></pre></td></tr></table></figure></p>
<p>会寻找当前目录下的<code>index.js</code>,如果不存在则认为<code>index</code>是一个文件夹，<br>继续寻找<code>./index/index.js</code></p>
<h4 id="绝对路径导入"><a href="#绝对路径导入" class="headerlink" title="绝对路径导入"></a>绝对路径导入</h4><p>没什么可说的，参数数为模块的绝对路径</p>
<h4 id="import函数的用法"><a href="#import函数的用法" class="headerlink" title="import函数的用法"></a>import函数的用法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></div><div class="line"><span class="keyword">import</span> _, &#123; each, each <span class="keyword">as</span> forEach &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</div><div class="line"><span class="keyword">import</span> &#123; a &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>python 和 nodejs 均以单个文件为<code>module</code>, 同时也支持文件夹的包裹，细分又有很多不同</p>
<p>二者包的路径查找也有很大区别，python需要保证包在系统路径下，添加PYTHON_PATH可以永久添加</p>
<p>nodejs是在当前目录下查找，同时也支持全局安装包</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> module </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[express源码中的对象继承]]></title>
      <url>/2018/express-object-inheritance/</url>
      <content type="html"><![CDATA[<p>nodejs web框架<code>express</code>源码中, 多处封装涉及到了对象继承，单独拿出来总结下它们的特点，参考学习<br><a id="more"></a></p>
<h2 id="对象继承方式"><a href="#对象继承方式" class="headerlink" title="对象继承方式"></a>对象继承方式</h2><p>简单阅读源码所看到的对象继承方式有三种</p>
<ul>
<li>merge-descriptors</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"><span class="keyword">var</span> mixin = <span class="built_in">require</span>(<span class="string">'merge-descriptors'</span>);</div><div class="line"><span class="comment">//app对象从EventEmitter.prototype对象继承</span></div><div class="line">mixin(app, EventEmitter.prototype, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<ul>
<li>Object.create()</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//app.request对象从req对象继承，并定义app属性</span></div><div class="line">app.request = <span class="built_in">Object</span>.create(req, &#123;</div><div class="line">    <span class="attr">app</span>: &#123; <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">value</span>: app &#125;</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<ul>
<li>Object.setPrototypeOf()</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> setPrototypeOf = <span class="built_in">require</span>(<span class="string">'setprototypeof'</span>)</div><div class="line"><span class="comment">//将router对象的原型对象设置为proto</span></div><div class="line">setPrototypeOf(router, proto)</div></pre></td></tr></table></figure>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>这应该是最常用的的三种继承形式了</p>
<h3 id="属性拷贝"><a href="#属性拷贝" class="headerlink" title="属性拷贝"></a>属性拷贝</h3><p>第一种为属性值拷贝，没什么技巧就是把要继承的属性全部拷贝到自己身上, 可以选择是否覆盖同名属性</p>
<p>源码的实现如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//merge-descriptors</span></div><div class="line"><span class="built_in">module</span>.exports = merge</div><div class="line"></div><div class="line"><span class="keyword">var</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Merge the property descriptors of `src` into `dest`</div><div class="line"> *</div><div class="line"> * @param &#123;object&#125; dest Object to add descriptors to</div><div class="line"> * @param &#123;object&#125; src Object to clone descriptors from</div><div class="line"> * @param &#123;boolean&#125; [redefine=true] Redefine `dest` properties with `src` properties</div><div class="line"> * @returns &#123;object&#125; Reference to dest</div><div class="line"> * @public</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">dest, src, redefine</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!dest) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'argument dest is required'</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!src) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'argument src is required'</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (redefine === <span class="literal">undefined</span>) &#123;</div><div class="line">    <span class="comment">// Default to true</span></div><div class="line">    redefine = <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">Object</span>.getOwnPropertyNames(src).forEach(<span class="function"><span class="keyword">function</span> <span class="title">forEachOwnPropertyName</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!redefine &amp;&amp; hasOwnProperty.call(dest, name)) &#123;</div><div class="line">      <span class="comment">// Skip desriptor</span></div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Copy descriptor</span></div><div class="line">    <span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(src, name)</div><div class="line">    <span class="built_in">Object</span>.defineProperty(dest, name, descriptor)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> dest</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>拷贝继承，继承时会耗费更多时间和空间，但后续访问时理论上效率更高</p>
<p>常驻于内存中的对象更加适合这种继承方式, 一次继承多次使用</p>
<p>后两种可归为一类，均是从原型对象继承</p>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>原型继承，是js中常见的的继承方式，这里有两种操作方法</p>
<ul>
<li><p><code>Object.create(proto[, propertiesObject])</code></p>
<pre><code>返回在指定原型对象上添加新属性后的对象
即除了继承之外，还可以自定义属性
</code></pre></li>
<li><p><code>setprototypeof</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//setprototypeof</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="built_in">Object</span>.setPrototypeOf || (&#123;<span class="attr">__proto__</span>:[]&#125; <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? setProtoOf : mixinProperties);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setProtoOf</span>(<span class="params">obj, proto</span>) </span>&#123;</div><div class="line">	obj.__proto__ = proto;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixinProperties</span>(<span class="params">obj, proto</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> proto) &#123;</div><div class="line">		<span class="keyword">if</span> (!obj.hasOwnProperty(prop)) &#123;</div><div class="line">			obj[prop] = proto[prop];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一般来说调用的是原生接口<code>Object.setPrototypeOf</code></p>
<p>同时也提供了两种兼容方案</p>
<ul>
<li><code>obj.__proto__ = proto;</code> </li>
<li>属性值拷贝</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>自己写代码或者写库程序不可避免会涉及到继承封装，express提供了很好的最佳实践</p>
<ul>
<li>对于常驻对象推荐使用<code>属性拷贝</code>，用空间换时间</li>
<li>原型继承有<code>Object.create()</code>和<code>Object.setPrototypeOf()</code>等方法，分别有各自适合的场景，更多了解可以参照MDN的说明</li>
<li>不想自己造轮子，express的这俩久经考验的轮子也可以直接拿来使用，<code>merge-descriptors</code>和<code>setPrototypeOf</code>, 源码也十分简洁</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Express </category>
            
        </categories>
        
        
        <tags>
            
            <tag> express </tag>
            
            <tag> Object-inheritance </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[middleware]]></title>
      <url>/2018/middleware/</url>
      <content type="html"><![CDATA[<p>nodejs的经典web框架中很多均实现了中间件系统，设计合理，使用也十分方便，本文主要总结这些精简api背后的源码实现<br><a id="more"></a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>nodejs的web框架应该都是基于原生httpServer实现的，先回到原点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    res.end(<span class="string">'hello world'</span>)</div><div class="line">&#125;).listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure></p>
<p>nodejs提供了足够简单的api，几行代码就能构建一个http服务器</p>
<p>运行后访问<code>http://127.0.0.1:3000/</code>, 应该就能看到熟悉的字符</p>
<h2 id="中间件概念"><a href="#中间件概念" class="headerlink" title="中间件概念"></a>中间件概念</h2><p>在这里请允许我对中间件做一个望文生义的解释</p>
<pre><code>一个请求可能需要被多次处理，将处理流程模块化，每一个处理环节即为中间件
处理结束后可以选择终止处理返回结果，也可以将控制权转交给下一个模块
</code></pre><p>这是我根据框架的功能实现总结的概念，不够全面，但足够清晰</p>
<h2 id="connect的实现"><a href="#connect的实现" class="headerlink" title="connect的实现"></a>connect的实现</h2><p>选择connect来说明是因为它足够精简<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">'connect'</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = connect();</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line">  log(<span class="string">'middleware 1'</span>)</div><div class="line">  next()</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line">  log(<span class="string">'middleware 2'</span>)</div><div class="line">  next()</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// respond to all requests</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    log(<span class="string">'middleware 3'</span>)</div><div class="line">  res.end(<span class="string">'Hello from Connect!\n'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//create node.js http server and listen on port</span></div><div class="line">http.createServer(app).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure></p>
<p>connect的api也十分简单</p>
<ul>
<li>通过<code>app.use</code>注册中间件</li>
<li><code>next</code>函数做流程控制，处理结束后显示的调用next函数进入下一个中间件</li>
</ul>
<p>运行后访问<code>http://127.0.0.1:3000/</code>, 应该可以看到控制台的依次打印</p>
<ul>
<li>middleware 1</li>
<li>middleware 2</li>
<li>middleware 3</li>
</ul>
<h2 id="connect源码分析"><a href="#connect源码分析" class="headerlink" title="connect源码分析"></a>connect源码分析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = createServer;</div><div class="line"></div><div class="line"><span class="keyword">var</span> proto = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'utils-merge'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createServer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">app</span>(<span class="params">req, res, next</span>)</span>&#123; app.handle(req, res, next); &#125;</div><div class="line">  merge(app, proto);</div><div class="line">  merge(app, EventEmitter.prototype);</div><div class="line">  app.route = <span class="string">'/'</span>;</div><div class="line">  app.stack = [];</div><div class="line">  <span class="keyword">return</span> app;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整个connect模块对外接口为一个函数，调用后仍然返回一个app函数</p>
<p>先看注册流程</p>
<h3 id="中间件注册"><a href="#中间件注册" class="headerlink" title="中间件注册"></a>中间件注册</h3><p><code>app.use</code>实现了中间件的挂载, api有如下几类</p>
<ul>
<li><code>app.use(path, func)</code>, 第一个参数为注册路径，如果省略则默认为<code>/</code>, 将匹配所有请求，第二个参数为一个函数，即对该请求做相应处理</li>
<li><code>app.use(path， _app)</code>, <code>_app</code>是和<code>app</code>一样，均为<code>connect()</code>返回的函数对象，是第一类api的特殊情况，相当于挂载子应用</li>
<li><code>app.use(path, httpServer)</code>, 同上，也是特殊处理的情况，接受一个httpServer对象，处理时调用它的第一个请求处理函数</li>
</ul>
<p>源码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">proto.use = <span class="function"><span class="keyword">function</span> <span class="title">use</span>(<span class="params">route, fn</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> handle = fn;</div><div class="line">  <span class="keyword">var</span> path = route;</div><div class="line"></div><div class="line">  <span class="comment">// default route to '/'</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> route !== <span class="string">'string'</span>) &#123;</div><div class="line">    handle = route;</div><div class="line">    path = <span class="string">'/'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// wrap sub-apps</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handle.handle === <span class="string">'function'</span>) &#123;</div><div class="line">    <span class="keyword">var</span> server = handle;</div><div class="line">    server.route = path;</div><div class="line">    handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">      server.handle(req, res, next);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// wrap vanilla http.Servers</span></div><div class="line">  <span class="keyword">if</span> (handle <span class="keyword">instanceof</span> http.Server) &#123;</div><div class="line">    handle = handle.listeners(<span class="string">'request'</span>)[<span class="number">0</span>];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// strip trailing slash</span></div><div class="line">  <span class="keyword">if</span> (path[path.length - <span class="number">1</span>] === <span class="string">'/'</span>) &#123;</div><div class="line">    path = path.slice(<span class="number">0</span>, <span class="number">-1</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// add the middleware</span></div><div class="line">  debug(<span class="string">'use %s %s'</span>, path || <span class="string">'/'</span>, handle.name || <span class="string">'anonymous'</span>);</div><div class="line">  <span class="keyword">this</span>.stack.push(&#123; <span class="attr">route</span>: path, <span class="attr">handle</span>: handle &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>了解了api再来看源码，会清楚很多，做的事情即：</p>
<ul>
<li>中间件注册时需两个参数</li>
<li>第一个是路径参数，如果省略则默认为<code>/</code>，匹配所有路径。</li>
<li>第二个参数为处理参数（有普通函数，子应用，httpServer对象，共三种不同的表现形式）</li>
<li>随后路径和处理函数会被打包成一个对象存储在数组<code>app.stack</code>中</li>
</ul>
<p>完了再看处理流程</p>
<h3 id="中间件调用"><a href="#中间件调用" class="headerlink" title="中间件调用"></a>中间件调用</h3><p>app函数接受三个参数，对比原生api，多了一个next参数，在不了解的情况下，我们可以先做个如下实验<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line">    res.end(<span class="string">'goodbye world'</span>)</div><div class="line">    <span class="built_in">console</span>.log(next)</div><div class="line">&#125;).listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure></p>
<p>运行后访问，控制台打印为<code>undefined</code>, 可以肯定这个参数并非一开始存在的，而是后续封装的</p>
<p>通过<code>http.createServer(app).listen(3000);</code>可知，当有请求消息时，处理流程为</p>
<pre><code>app(req, res) =&gt; app.handle(req, res, next) 
此时的next为undefined
</code></pre><p>继续看app.handle函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">proto.handle = <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">req, res, out</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> index = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> protohost = getProtohost(req.url) || <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> removed = <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> slashAdded = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">var</span> stack = <span class="keyword">this</span>.stack;</div><div class="line"></div><div class="line">  <span class="comment">// final function handler</span></div><div class="line">  <span class="keyword">var</span> done = out || finalhandler(req, res, &#123;</div><div class="line">    <span class="attr">env</span>: env,</div><div class="line">    <span class="attr">onerror</span>: logerror</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// store the original URL</span></div><div class="line">  req.originalUrl = req.originalUrl || req.url;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (slashAdded) &#123;</div><div class="line">      req.url = req.url.substr(<span class="number">1</span>);</div><div class="line">      slashAdded = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (removed.length !== <span class="number">0</span>) &#123;</div><div class="line">      req.url = protohost + removed + req.url.substr(protohost.length);</div><div class="line">      removed = <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// next callback</span></div><div class="line">    <span class="keyword">var</span> layer = stack[index++];</div><div class="line"></div><div class="line">    <span class="comment">// all done</span></div><div class="line">    <span class="keyword">if</span> (!layer) &#123;</div><div class="line">      defer(done, err);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// route data</span></div><div class="line">    <span class="keyword">var</span> path = parseUrl(req).pathname || <span class="string">'/'</span>;</div><div class="line">    <span class="keyword">var</span> route = layer.route;</div><div class="line"></div><div class="line">    <span class="comment">// skip this layer if the route doesn't match</span></div><div class="line">    <span class="keyword">if</span> (path.toLowerCase().substr(<span class="number">0</span>, route.length) !== route.toLowerCase()) &#123;</div><div class="line">      <span class="keyword">return</span> next(err);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// skip if route match does not border "/", ".", or end</span></div><div class="line">    <span class="keyword">var</span> c = path[route.length];</div><div class="line">    <span class="keyword">if</span> (c !== <span class="literal">undefined</span> &amp;&amp; <span class="string">'/'</span> !== c &amp;&amp; <span class="string">'.'</span> !== c) &#123;</div><div class="line">      <span class="keyword">return</span> next(err);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// trim off the part of the url that matches the route</span></div><div class="line">    <span class="keyword">if</span> (route.length !== <span class="number">0</span> &amp;&amp; route !== <span class="string">'/'</span>) &#123;</div><div class="line">      removed = route;</div><div class="line">      req.url = protohost + req.url.substr(protohost.length + removed.length);</div><div class="line"></div><div class="line">      <span class="comment">// ensure leading slash</span></div><div class="line">      <span class="keyword">if</span> (!protohost &amp;&amp; req.url[<span class="number">0</span>] !== <span class="string">'/'</span>) &#123;</div><div class="line">        req.url = <span class="string">'/'</span> + req.url;</div><div class="line">        slashAdded = <span class="literal">true</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// call the layer handle</span></div><div class="line">    call(layer.handle, route, err, req, res, next);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  next();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>虽然是个大函数，但做的事情很简单</p>
<ul>
<li>接受三个参数</li>
<li>变量<code>done</code>被设置为<code>finalhandler</code>函数的返回值</li>
<li>定义<code>next</code>函数</li>
<li>调用<code>next</code>函数</li>
</ul>
<p>next函数内部的操作：</p>
<ul>
<li>按顺序从<code>app.stack</code>中取出一个对象</li>
<li>如果不匹配，递归调用<code>next</code>函数，相当于取下一个对象</li>
<li>如果遍历完都没有匹配的，调用<code>done</code>函数</li>
<li>匹配成功，调用<code>call(layer.handle, route, err, req, res, next)</code></li>
</ul>
<p>层层包装，到了<code>call</code>函数这里就是最后一层了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">handle, route, err, req, res, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arity = handle.length;</div><div class="line">  <span class="keyword">var</span> error = err;</div><div class="line">  <span class="keyword">var</span> hasError = <span class="built_in">Boolean</span>(err);</div><div class="line"></div><div class="line">  debug(<span class="string">'%s %s : %s'</span>, handle.name || <span class="string">'&lt;anonymous&gt;'</span>, route, req.originalUrl);</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span> (hasError &amp;&amp; arity === <span class="number">4</span>) &#123;</div><div class="line">      <span class="comment">// error-handling middleware</span></div><div class="line">      handle(err, req, res, next);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasError &amp;&amp; arity &lt; <span class="number">4</span>) &#123;</div><div class="line">      <span class="comment">// request-handling middleware</span></div><div class="line">      handle(req, res, next);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="comment">// replace the error</span></div><div class="line">    error = e;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// continue</span></div><div class="line">  next(error);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>通过handle函数（注册时的处理函数）形参个数来做不同处理，4个参数则是错误处理，3个参数则是请求处理</li>
<li>不管是成功还是失败，next均作为参数传入</li>
<li>如果处理错误继续调用next(err)</li>
</ul>
<p>至此，前文的流程可以继续走了</p>
<p>如果匹配到注册路径的中间件，则</p>
<pre><code>app(req, res) =&gt; app.handle(req, res, undefined) =&gt; handle(req, res, next)
</code></pre><p>如果中间抛出错误，且注册了错误处理函数（相比正常的错误函数多了一个参数，形如func(err, req, res, next))</p>
<pre><code>app(req, res) =&gt; app.handle(req, res, undefined) =&gt; handle(err,req, res, next)
</code></pre><p>如果一个都没匹配到</p>
<pre><code>app(req, res) =&gt; app.handle(req, res, undefined) =&gt; finalhandler(req, res, {env: env,onerror: logerror})(err)
</code></pre><p>next函数是通过闭包的方式实现，手动决定控制权的转移，也能控制错误的冒泡处理</p>
<p>至此，connect的原理基本都解析完毕了，源码就一个文件，注释加空行不到三百行但实现的功能却非常巧妙，如果你已经非常熟悉了中间件的api，那么这份源码非常值得一看</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结即是看完源码，写完上面一大坨后闭上眼看还剩下啥</p>
<ul>
<li>中间件的概念，自己编</li>
<li>中间件的实现，注册路径和处理函数，存在一个数组中，后续根据请求路径遍历数组，因此注册顺序很重要</li>
<li>控制权转让，手动调用next()即进入下一个中间件，如果出错也可以传递错误参数next(err), 交给后续错误处理中间件集中处理</li>
<li><p>中间件函数类型</p>
<pre><code>普通处理函数，处理完调下一个，此时必须有三个参数，eg：func(req, res, next)
响应返回函数，最后一道程序，处理完返回结果，此时不需要next函数，所以注册时两个或三个参数均可
错误处理函数，原则上应该放在最后注册，且参数必须为四个, eg: func(err, req, res, next), 当然可以注册多个错误处理函数，不同的错误依旧可通过next(err)向后传递
</code></pre></li>
<li>next 函数的实现，闭包，内部保留有存储中间件的数组以及传入的初始索引，递归调用或当做参数传递调用，可以达到遍历数组的效果</li>
</ul>
<p>嗯……似乎没啥剩下了，就这么多</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> middleware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XMLHttpRequest]]></title>
      <url>/2017/xhr/</url>
      <content type="html"><![CDATA[<p>据说前端培训班第一课就会讲<code>XMLHttpRequest</code>和<code>AJAX</code>。<br>不说别的，至少能得出结论，这是个很基础，很重要的概念。<br>我没去过培训班，在此总结一下，如果被问到这个问题，我会怎么回答。<br><a id="more"></a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul>
<li><p>XMLHttpRequest (XHR) 是干嘛用的</p>
<pre><code>使用xhr对象发送http请求和服务器通信
你可以通过一个url传输和获取服务端的数据
因为以前多用来传递xml格式的数据，所以名字里有个xml
但xhr可以发送和接收多种类型的数据资源（现在更多的是JSON、html、text files）
</code></pre></li>
<li><p>XHR 是什么</p>
<pre><code>是一个API
是一个类
是一个构造函数
</code></pre></li>
<li><p>为什么要用XHR</p>
<pre><code>支持页面局部更新
不用整体刷新页面，不会打断用户操作，用户体验好
</code></pre></li>
<li><p>哪些地方用到了XHR    </p>
<pre><code>XMLHttpRequest 在 AJAX 中被大量使用
</code></pre></li>
<li><p>所以AJAX 又是啥</p>
<pre><code>全称Asynchronous JavaScript And XML
它使用XHR对象和服务器通信
它是XHR的一个封装
特点是Asynchronous（异步）
</code></pre><h3 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h3></li>
</ul>
<p>XMLHttpRequest 是一个底层封装好的API, 通过它可以很容易的取回一个 URL 上的资源数据。尽管名字里有 XML，但 XMLHttpRequest 支持的数据类型并不局限于 XML。而且除了 HTTP ，它还支持 file 和 ftp 协议。</p>
<p>AJAX 则是对XMLHttpRequest的进一步封装，让使用更加方便</p>
<p>了解XMLHttpRequest，对AJAX的理解会更加深入</p>
<p>本文着重讲XMLHttpRequest</p>
<h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p>想通过javascript发送一个http请求，我们需要一个具有必备功能的对象去做这件事，这个对象就是<code>XMLHttpRequest</code>对象</p>
<p>这个概念最初由微软设计，在IE中作为一个”ActiveX”对象使用，被称作”XMLHTTP”,随后 Mozilla、Apple 和 Google跟进,<br>搞出了一个”XMLHttpRequest”对象，功能上和ActiveX对象差不多。如今，该对象已经被 W3C组织标准化。</p>
<p>以下代码可以很好的说明这段历史<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Old compatibility code, no longer needed.</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123; <span class="comment">// Mozilla, Safari, IE7+ ...</span></div><div class="line">    httpRequest = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123; <span class="comment">// IE 6 and older</span></div><div class="line">    httpRequest = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现代浏览器直接调用构造函数<code>new XMLHttpRequest()</code>即可创建一个新的xhr对象</p>
<hr>
<p>对象有了，怎么发送请求呢，当然调用对象方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">httpRequest.open(<span class="string">'GET'</span>, <span class="string">'http://www.example.org/some.file'</span>, <span class="literal">true</span>);</div><div class="line">httpRequest.send();</div></pre></td></tr></table></figure></p>
<h3 id="xhr-open-requestMethod-url-isAsync"><a href="#xhr-open-requestMethod-url-isAsync" class="headerlink" title="xhr.open(requestMethod, url, isAsync)"></a>xhr.open(requestMethod, url, isAsync)</h3><ul>
<li>第一个参数是http请求方法名，安装http标准应该全部为大写字母</li>
<li>发送请求的url地址，出于安全性考虑，采用同源策略</li>
<li>可选参数，是否异步（js继续执行，未收到服务器响应前用户可继续与页面交互），默认为true</li>
</ul>
<h3 id="xhr-send"><a href="#xhr-send" class="headerlink" title="xhr.send()"></a>xhr.send()</h3><ul>
<li>发送请求参数</li>
<li>如果是POST请求，发送表单数据时应该以一种服务器可以解析的格式，例如query字符串的形式</li>
<li>支持多种格式的数据发送，multipart/form-data, JSON, XML 等等.</li>
<li>如果是使用POST发送数据，还需要设定请求的MIME类型，即定义请求头部</li>
</ul>
<p>下例表示请求里的参数类型为query字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">httpRequest.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</div><div class="line">httpRequest.send(<span class="string">"name=value&amp;anothername="</span>+<span class="built_in">encodeURIComponent</span>(myVar)+<span class="string">"&amp;so=on"</span>)</div></pre></td></tr></table></figure></p>
<hr>
<p>发送请求后，需要接受响应。</p>
<p>在这个阶段，需要告诉xhr对象调用哪个函数去处理响应。</p>
<p>通过设置<code>onreadystatechange</code>属性值为一个函数，会在请求状态变化时调用</p>
<h3 id="xhr-onreadystatechange"><a href="#xhr-onreadystatechange" class="headerlink" title="xhr.onreadystatechange"></a>xhr.onreadystatechange</h3><ul>
<li>属性值为一个函数引用</li>
<li>函数无参数</li>
<li>相当于回调函数，处理服务器的响应</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">httpRequest.onreadystatechange = nameOfTheFunction;</div></pre></td></tr></table></figure>
<p>处理函数如何处理响应呢，答案是根据请求状态</p>
<h3 id="xhr-readyState"><a href="#xhr-readyState" class="headerlink" title="xhr.readyState"></a>xhr.readyState</h3><ul>
<li>0 (uninitialized) or (request not initialized)</li>
<li>1 (loading) or (server connection established)</li>
<li>2 (loaded) or (request received)</li>
<li>3 (interactive) or (processing request)</li>
<li>4 (complete) or (request finished and response is ready)</li>
</ul>
<p>details:</p>
<ul>
<li>0, <code>UNSENT</code>, Client has been created. open() not called yet.</li>
<li>1, <code>OPENED</code>, open() has been called.</li>
<li>2, <code>HEADERS_RECEIVED</code>, send() has been called, and headers and status are available.</li>
<li>3, <code>LOADING</code>, Downloading; responseText holds partial data.</li>
<li>4, <code>DONE</code>, The operation is complete.</li>
</ul>
<p>因此，响应处理函数的内容可以是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</div><div class="line">    <span class="comment">// Everything is good, the response was received.</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Not ready yet.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除此之外，还可以参考http响应的状态码，如<code>200 ok</code>来确认响应结果</p>
<h3 id="xhr-status"><a href="#xhr-status" class="headerlink" title="xhr.status"></a>xhr.status</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</div><div class="line">    <span class="comment">// Perfect!</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// There was a problem with the request.</span></div><div class="line">    <span class="comment">// For example, the response may have a 404 (Not Found)</span></div><div class="line">    <span class="comment">// or 500 (Internal Server Error) response code.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="xhr-responseType"><a href="#xhr-responseType" class="headerlink" title="xhr.responseType"></a>xhr.responseType</h3><p>属性<code>responseType</code>决定了响应的数据类型，如果返回的数据类型不符合设定，响应值将被置成<code>null</code></p>
<p>该属性只在异步请求中可用，同步请求设置该值会报错</p>
<p>支持的标准responseType如下：</p>
<ul>
<li><code>&quot;&quot;</code>, DOMString(default)</li>
<li><code>&quot;arraybuffer&quot;</code></li>
<li><code>&quot;blob&quot;</code></li>
<li><code>&quot;document&quot;</code></li>
<li><code>&quot;json&quot;</code></li>
<li><code>&quot;text&quot;</code>, DOMString</li>
</ul>
<h3 id="xhr-response"><a href="#xhr-response" class="headerlink" title="xhr.response"></a>xhr.response</h3><p>返回对应<code>responseType</code>中的内容实体</p>
<h3 id="xhr-responseText"><a href="#xhr-responseText" class="headerlink" title="xhr.responseText"></a>xhr.responseText</h3><p>将响应数据以<code>text</code>类型返回一个DOMString</p>
<h3 id="xhr-responseURL"><a href="#xhr-responseURL" class="headerlink" title="xhr.responseURL"></a>xhr.responseURL</h3><p>返回请求的url，如果不存在则返回空字符串</p>
<h3 id="xhr-responseXML"><a href="#xhr-responseXML" class="headerlink" title="xhr.responseXML"></a>xhr.responseXML</h3><p>返回一个XML 文档解析而来的 DOM 对象，也可用来解析HTML，设置responseType为document即可</p>
<h3 id="xhr-timeout"><a href="#xhr-timeout" class="headerlink" title="xhr.timeout"></a>xhr.timeout</h3><p>超时时长，单位为ms</p>
<hr>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul>
<li>对于相同请求，浏览器会默认缓存结果，不会重复提交请求。如果要请求相同内容，记得设置请求头部<code>Cache-Control: no-cache</code></li>
<li><p>请求报错时，错误会在响应处理函数内部抛出，可以使用try…catch捕获</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertContents</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</div><div class="line">      <span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</div><div class="line">        alert(httpRequest.responseText);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">'There was a problem with the request.'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span>( e ) &#123;</div><div class="line">    alert(<span class="string">'Caught Exception: '</span> + e.description);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>浏览器对xhr json格式响应数据的支持并不全面，需特殊处理，假设服务端返回的为json数据，处理可以如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertContents</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</div><div class="line">    <span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</div><div class="line">      <span class="keyword">var</span> response = <span class="built_in">JSON</span>.parse(httpRequest.responseText);</div><div class="line">      alert(response.computedString);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      alert(<span class="string">'There was a problem with the request.'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p><code>XMLHttpRequest</code>类从<code>XMLHttpRequestEventTarget</code>和<code>EventTarget</code>继承</p>
<p>简单来说，一个处理http请求事件，一个可以监听事件消息，众多浏览器均以支持。</p>
<p>提供标准的<code>addEventListener()</code>APIs注册消息，然后设置<code>on*</code>属性为消息处理函数</p>
<p>因此可以看到类似以下形式的api：</p>
<ul>
<li>xhr.onload = reqListener</li>
<li>xhr.onerror =  errorHandler</li>
<li>xhr.onprogress = progressHandler</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单过了一遍XHR，总体来看依旧是典型的对象编程，对于普通使用者无非就是熟悉api，看了XHR的api，再去看ajax的api，会感觉非常容易接受，甚至自己动手写个ajax也是不难实现的。</p>
<p>资料参考<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="external">MDN XMLHttpRequest</a></p>
]]></content>
      
        <categories>
            
            <category> Common-sense </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XMLHttpRequest </tag>
            
            <tag> AJAX </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cross-Origin]]></title>
      <url>/2017/cross-origin/</url>
      <content type="html"><![CDATA[<p>前端跨域(cross-origin)是个应该掌握的基本常识，网上很多资料都有讲，全面总结下加深印象<br><a id="more"></a></p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>跨域资源共享：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">Cross origin resource sharing(CORS)</a></p>
<p>浏览器的安全策略-同源策略: <a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="external">same origin policy)</a></p>
<p>总结来说</p>
<p>一个源的定义：</p>
<p>如果<code>协议</code>，<code>端口</code>（如果指定了一个）和<code>域名</code>对于两个页面是相同的，则两个页面具有相同的<code>源</code></p>
<p>请求<code>非同源</code>资源的请求叫做<code>跨域 HTTP 请求</code></p>
<p>出于安全原因，浏览器限制<code>从脚本内发起的</code>跨域HTTP请求</p>
<p>具体如何限制呢？</p>
<ul>
<li>请求成功，拦截响应（大部分是这条）</li>
<li>拦截请求（例如部分浏览器不允许HTTPS跨域访问HTTP）</li>
</ul>
<p>但是！跨越请求资源的需求不可或缺，所以需要想办法绕过限制</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="AJAX中的同源限制"><a href="#AJAX中的同源限制" class="headerlink" title="AJAX中的同源限制"></a>AJAX中的同源限制</h2><p>实例示范跨域请求资源被拦截</p>
<p>打开浏览器，在console中输入以下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'https://baidu.com'</span>)</div><div class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(xhr.responseText)</div><div class="line">&#125;</div><div class="line">xhr.send()</div></pre></td></tr></table></figure></p>
<p>可以看到请求是成功的，但是没有响应，会看到一串错误信息, 提示没有允许跨域请求头</p>
<p>原因就是XHR遵循了浏览器的同源策略</p>
<h2 id="天然跨域"><a href="#天然跨域" class="headerlink" title="天然跨域"></a>天然跨域</h2><p>然而上述场景很容易联想到另外的情况：表单提交<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>很显然这个是可以跳转成功的，类似的还有</p>
<ul>
<li><code>&lt;a&gt;</code>标签，GET请求， 会刷新或离开页面</li>
<li><code>&lt;img&gt;</code>src属性，GET请求， 加载外部图片</li>
<li><code>&lt;link&gt;</code>标签， GET请求，加载css等资源</li>
<li><code>&lt;script&gt;</code>， GET请求，加载脚本资源</li>
</ul>
<p>这些都实现了获取非同源资源的请求，为什么没有被浏览器限制呢？</p>
<p>有人称之为“天然跨越”，因为浏览器认为这些访问是安全的，从脚本内发起的资源请求则不在该范围内</p>
<h1 id="跨域方法"><a href="#跨域方法" class="headerlink" title="跨域方法"></a>跨域方法</h1><p>虽然有些html标签实现了“天然跨域”，但这远远不够，页面不总是静态的，如何让AJAX实现跨域请求资源呢，传统的三个方法如下：</p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>CORS 是一个 W3C 标准，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 ajax 只能同源使用的限制。</p>
<p>用法也很好理解，<code>响应头部</code>添加字段告诉浏览器，响应符合规范，是安全合法的，从而让浏览器不拦截响应</p>
<p>eg:</p>
<p><code>&#39;Access-Control-Allow-Origin&#39;: http://127.0.0.1:3000</code></p>
<p>字段值包括源的三个“身份值”，协议，域名，端口</p>
<p>当然这种设置只能是<code>服务器</code>去做，服务器有权决定自己的资源对谁开放</p>
<p>另外一个不太算缺点的缺点，该标准仅支持IE10 及以上</p>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>JSONP 全称为：JSON with padding，可用于解决老版本浏览器的跨域数据访问问题。</p>
<p>用法如下：</p>
<p>前端逻辑：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// jsonp/index.html</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jsonpCallback</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        alert(<span class="string">'获得 X 数据:'</span> + data.x);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://localhost:3000?callback=jsonpCallback"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>后端用nodejs来模拟<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jsonp/server.js</span></div><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line">	</div><div class="line"><span class="built_in">require</span>(<span class="string">'http'</span>).createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">const</span> data = &#123;</div><div class="line">		<span class="attr">x</span>: <span class="number">10</span></div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 拿到回调函数名</span></div><div class="line">	<span class="keyword">const</span> callback = url.parse(req.url, <span class="literal">true</span>).query.callback;</div><div class="line">	<span class="built_in">console</span>.log(callback);</div><div class="line">	res.writeHead(<span class="number">200</span>);</div><div class="line">	res.end(<span class="string">`<span class="subst">$&#123;callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span>);</div><div class="line"></div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure></p>
<p>原理：</p>
<pre><code>利用&lt;script&gt;标签src属性的天然跨越，向后端传递参数，响应返回为函数调用
</code></pre><p>这个函数是前端事先准备的（jsonpCallback），函数参数由后端提供，后端响应是<code>jsonpCallback(data)</code>, 即调用函数，实现动态交互</p>
<p>优点：</p>
<ul>
<li>不受浏览器同源策略影响</li>
<li>兼容性好</li>
</ul>
<p>缺点：</p>
<ul>
<li>只支持GET请求，原因是JSONP的实现是“借鸡下蛋”，<code>&lt;script&gt;</code>的src属性只支持GET请求方式获取资源</li>
<li>无法捕获连接异常</li>
</ul>
<h2 id="服务端代理"><a href="#服务端代理" class="headerlink" title="服务端代理"></a>服务端代理</h2><p>这种方式依然是对同源策略的一种妥协，原理是在同源域名下使用代理转发请求</p>
<p>eg:</p>
<p><code>&#39;/proxy?url=http://baidu.com&#39;</code></p>
<p>后端取得参数后自行访问目标资源，得到结果后再返回给浏览器</p>
]]></content>
      
        <categories>
            
            <category> Common-sense </category>
            
            <category> Cross-origin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cross-Origin </tag>
            
            <tag> CORS </tag>
            
            <tag> JSONP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Promise]]></title>
      <url>/2017/promise/</url>
      <content type="html"><![CDATA[<p>作为es6的新特性，<code>promise</code>的出现，使得<code>callback hell</code>有了优雅的解决方案，掌握promise的使用无疑是一种技能提升。本文基于《ECMAScript 6 入门》和诸多碎片化的阅读以及实践中遇到的问题做一次全面总结。<br><a id="more"></a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Promise 是异步编程的一种解决方案，比传统的解决方案<code>回调函数和事件</code>更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Promise对象是一个构造函数</span></div><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</div><div class="line">        res(value);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        rej(error);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul>
<li>初始化实例时的参数是一个函数。</li>
<li>函数有两个参数，也均为<code>函数类型</code>，可分别在成功、失败时调用，作为对象状态改变的标志</li>
<li>调用<code>res</code>或<code>rej</code>时，最多只能传<code>一个参数</code>给后续回调函数，多个参数时后续参数不会被接收。可传递一个数组或对象解决多个参数的需求。</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>Promise对象包裹了一个异步操作，对象有三种状态：<code>pending</code>（进行中）、<code>resolved</code>（已成功）和<code>rejected</code>（已失败）。对象状态是私有属性，不受外界影响，只有内部操作才能改变。</li>
<li>Promise对象初始状态为<code>pending</code>，当异步操作完成时，调用<code>res()</code>，即更改状态<code>pending -&gt; resolved</code>; 异步操作失败时，调用<code>rej()</code>，即更改状态<code>pending -&gt; rejected</code></li>
<li>有且仅有上述两种状态改变的场景，且状态一旦改变就不会再变化。</li>
<li>状态变化时按注册顺序调用回调函数，实现异步调用的同步效果</li>
<li>调用<code>res</code>或<code>rej</code>并<code>不是终结promise</code>内部代码的执行，而是发送异步事件的结果到事件循环，内部后续代码反而会先于异步执行。要实现终结效果加上<code>return</code>即可。</li>
<li>Promise实例化内部代码都是立即执行，后续处理都是回调，都会在本轮事件循环结束时才执行</li>
<li>当状态是pending时无法得知状态会如何改变，取决于异步操作结果</li>
<li>由于状态变化后无法改变且一直保持，对改变状态后的promise对象添加回调函数也会立即执行，不会像事件监听那样错过就不会再触发。</li>
<li>由于上一条的特性，多个回调函数时无法中途取消执行</li>
<li>当有内部错误，且没有注册<code>rejected</code>状态处理函数时会报错，一般建议都注册错误处理函数</li>
<li>回调函数默认返回新的Promise对象，也可以手动指定promise对象返回</li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h3><p>Promise实例生成以后，可以用继承的<code>then</code>方法分别指定resolved状态和rejected状态的回调函数。<code>then</code>方法<code>返回的是一个新的Promise实例（注意，不是原来那个Promise实例）</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="comment">// success</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">  <span class="comment">// failure</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>then方法在<code>调用它的Promise对象</code>的状态发生变化，才会被调用。</p>
<h3 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h3><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数，属于语法糖范围，使代码更简洁。<br>catch有如下特点：</p>
<ul>
<li>promise对象状态变为<code>rejected</code>时调用</li>
<li><code>then</code>方法内部运行错误也能被捕获，但状态改变后再抛出错误不会被捕获</li>
<li>promise对象的错误能冒泡传递，所有catch能获取整个流程的所有错误</li>
<li>catch返回的也是新的promise对象，因此后续仍可以使用then方法，只是后续then状态变化或内部出错，不会再被之前的catch捕获</li>
<li>catch内也会报错，也会被当做一个未处理的错误，此时再之后再追加一个catch也能捕获该错误。</li>
</ul>
<p>因为catch的强大功能，所有一般不适用<code>then</code>函数的第二个参数去捕获错误，而总是使用catch</p>
<h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h3><p>对象静态方法，作用是将现有对象转为Promise对象</p>
<h3 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h3><ul>
<li><code>promise实例</code>，不做修改，直接返回</li>
<li><code>thenable</code>对象(具有then方法的对象), 会立即执行对象的then方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> thenable = &#123;</div><div class="line">  <span class="attr">then</span>: <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    resolve(<span class="number">42</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(thenable);</div><div class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(value);  <span class="comment">// 42</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>参数不是具有then方法的对象，或根本就不是对象，则返回一个新的resolved状态的 Promise 对象，参数向后传递。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve(<span class="string">'Hello'</span>);</div><div class="line"></div><div class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params">s</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(s)</div><div class="line">&#125;);</div><div class="line"><span class="comment">// Hello</span></div></pre></td></tr></table></figure>
<ul>
<li>无参数。直接返回一个resolved状态的 Promise 对象</li>
<li>仍是最多只接受一个参数，多余的参数不会被传递</li>
</ul>
<h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h2><p>类似<code>Promise.resolve()</code>, 不过返回的promise默认<code>rejected</code> 状态。</p>
<ul>
<li>仍然最多只接受一个参数</li>
<li>不同的是，传递的参数<code>都会被原封不动的向后传递</code></li>
</ul>
<h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><p>用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>
<ul>
<li>参数必须是有 Iterator 接口，且返回的每个成员都是 Promise 实例的类型，通常为数组，成员为Promise对象</li>
<li>参数中如果存在不是promise对象的，会调用<code>Promise.resolve</code>方法转化</li>
<li>返回值为一个新的Promise对象</li>
</ul>
<p>返回对象的状态分两种情况：</p>
<ol>
<li>只有参数中的promise对象有一个变成rejected，此时第一个被reject的实例的返回值，会传递给该对象的回调函数</li>
<li>参数所有实例状态均变为resolved，返回值对象才会改变并同步，返回值一起传递给对象的回调函数。</li>
</ol>
<p>参数中的promise对象没有自己的catch方法时，就会调用返回值对象的catch方法</p>
<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><p>和all方法类似，但状态变化有区别，只要有一个实例率先改变状态，返回结果的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给返回结果的回调函数。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>基于以上对Promise对象的理解，很容易联想到可以做一些扩展功能</p>
<ul>
<li><code>done()</code> - 针对catch的补充，如果catch内部出错，希望也能捕获错误，而不是后续继续增加catch</li>
<li><code>finally()</code> - 有些操作希望无论异步操作是成功还是失败都执行</li>
<li><code>try()</code> - Promise内部基本都是一个异步函数，希望能能接受一个同步函数为参数，同时能让该函数立即执行，返回值为promise</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一版done, 其实只是简单包装了catch, 将错误抛向全局。</span></div><div class="line"><span class="built_in">Promise</span>.prototype.done = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</div><div class="line">        process.nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">            <span class="keyword">throw</span> err</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//第二版，自定义错误处理函数</span></div><div class="line"><span class="comment">//其实更加简单了，给done传递错误处理函数即可，`.done(err=&gt;console.log(err))`</span></div><div class="line"><span class="built_in">Promise</span>.prototype.done = <span class="function"><span class="keyword">function</span>(<span class="params">rej</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.catch(rej)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//第三版，增加一个成功时执行操作，失败时错误上抛</span></div><div class="line"><span class="built_in">Promise</span>.prototype.done = <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.then(res)</div><div class="line">        .catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</div><div class="line">            process.nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">                <span class="keyword">throw</span> err</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//第四版，自定义成功或失败时的操作</span></div><div class="line"><span class="built_in">Promise</span>.prototype.done = <span class="function"><span class="keyword">function</span>(<span class="params">res, rej</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.then(res, rej)</div><div class="line">        .catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</div><div class="line">            process.nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">                <span class="keyword">throw</span> err</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>finally</code>的最关键点是不能在catch之后，因为放在catch之后，失败时被catch捕获，返回新的promise对象，这时状态是无法获取到的。因此这并不是想python里那么纯粹的finally。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.prototype.finally = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</div><div class="line">        f()</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(value)</div><div class="line">    &#125;, err=&gt;&#123;</div><div class="line">        f()</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>try</code>最简单的实现，是在最外层再包装一个Promise，因为promise初始化过程都是立即执行的</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'now'</span>);</div><div class="line">(</div><div class="line">  <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(</div><div class="line">    <span class="function"><span class="params">resolve</span> =&gt;</span> resolve(f())</div><div class="line">  )</div><div class="line">)();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'next'</span>);</div><div class="line"><span class="comment">// now</span></div><div class="line"><span class="comment">// next</span></div></pre></td></tr></table></figure>
<p>之所以需要这么麻烦的实现这个需求，是因为很多场景下流程的第一步都是同步生成一个Promise对象，然后用then和catch控制流程，<br>然而如果在最开始生成Promise之间程序有内部错误，这个错误是不会被catch捕获到的，所有这时try的实现很有必要，将第一步同步生成Promise对象的操作包裹起来，即使出错也会被catch捕获处理。</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="promise-的链式调用。"><a href="#promise-的链式调用。" class="headerlink" title="promise 的链式调用。"></a>promise 的链式调用。</h3><p>提起链式调用我们通常会想到通过 return this 实现，不过 Promise 并不是这样实现的。promise 每次调用 <code>.then 或者 .catch 都会返回一个新的 promise</code>，从而实现了链式调用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</div><div class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(res)</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span></div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">3</span></div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(res)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line"><span class="comment">//1</span></div><div class="line"><span class="comment">//2</span></div></pre></td></tr></table></figure>
<h3 id="promise-的-then-或者-catch-可以被调用多次"><a href="#promise-的-then-或者-catch-可以被调用多次" class="headerlink" title="promise 的 .then 或者 .catch 可以被调用多次"></a>promise 的 .then 或者 .catch 可以被调用多次</h3><p>但这里 Promise 构造函数只执行一次。或者说 promise 内部状态一经改变，并且有了一个值，那么后续每次调用 .then 或者 .catch 都会直接拿到该值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'once'</span>)</div><div class="line">    resolve(<span class="string">'success'</span>)</div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(res)</div><div class="line">&#125;)</div><div class="line">promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(res)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//success</span></div><div class="line"><span class="comment">//success</span></div></pre></td></tr></table></figure>
<h3 id="then-或者-catch-中-return-一个-error-对象并不会抛出错误"><a href="#then-或者-catch-中-return-一个-error-对象并不会抛出错误" class="headerlink" title="then 或者 .catch 中 return 一个 error 对象并不会抛出错误"></a>then 或者 .catch 中 return 一个 error 对象并不会抛出错误</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.resolve()</div><div class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error!!!'</span>)</div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'then: '</span>, res)</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'catch: '</span>, err)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line"><span class="comment">// then: Error: error!!!</span></div><div class="line"><span class="comment">//     at Promise.resolve.then (...)</span></div><div class="line"><span class="comment">//     at ...</span></div></pre></td></tr></table></figure>
<p>因为返回任意一个非 promise 的值都会被包裹成 promise 对象<br>即 <code>return new Error(&#39;error!!!&#39;)</code></p>
<p>等价于<code>return Promise.resolve(new Error(&#39;error!!!&#39;))</code></p>
<p>传递错误的方式有</p>
<ul>
<li><code>return Promise.reject(new Error(&#39;error!!!&#39;))</code></li>
<li><code>throw new Error(&#39;error!!!&#39;)</code></li>
</ul>
<h3 id="then-或-catch-返回的值不能是-promise-本身，否则会造成死循环。"><a href="#then-或-catch-返回的值不能是-promise-本身，否则会造成死循环。" class="headerlink" title=".then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环。"></a>.then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve()</div><div class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> promise</div><div class="line">  &#125;)</div><div class="line"><span class="comment">//TypeError</span></div></pre></td></tr></table></figure>
<h3 id="then-或者-catch-的参数期望是函数，传入非函数则会发生值穿透"><a href="#then-或者-catch-的参数期望是函数，传入非函数则会发生值穿透" class="headerlink" title=".then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透"></a>.then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</div><div class="line">  .then(<span class="number">2</span>)</div><div class="line">  .then(<span class="built_in">Promise</span>.resolve(<span class="number">3</span>))</div><div class="line">  .then(<span class="built_in">console</span>.log)</div><div class="line"><span class="comment">//1</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Promise </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> promise </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mongoose入门总结]]></title>
      <url>/2017/mongoose/</url>
      <content type="html"><![CDATA[<p>Mongoose 是一个基于Node.js的MongoDB接口ORM类库，也被称为ODM库。那些高大上的解释就不贴了。我的理解是mongoDB将数据库抽象成文档类型，而mongoose将文档映射到js对象上，让使用者可以使用js对象来操作文档从而实现对数据的增改删查，因此称之为Object Document Model。<br><a id="more"></a></p>
<h2 id="连接数据库-Connection"><a href="#连接数据库-Connection" class="headerlink" title="连接数据库-Connection"></a>连接数据库-Connection</h2><p>使用数据库之前肯定需要连接上数据库先，Mongoose的API提供了两种方式<code>mongoose.createConnection</code>和<code>mongoose.connect</code>。文档说前者可以连接多个数据库，后者使用默认连接，老实说这个解释没能让我明白区别，还是看源代码吧。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mongoose</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.connections = [];</div><div class="line">  <span class="keyword">this</span>.models = &#123;&#125;;</div><div class="line">  <span class="keyword">this</span>.modelSchemas = &#123;&#125;;</div><div class="line">  <span class="comment">/* default global options */</span></div><div class="line">  <span class="keyword">this</span>.options = &#123;</div><div class="line">    <span class="attr">pluralization</span>: <span class="literal">true</span></div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">var</span> conn = <span class="keyword">this</span>.createConnection(); <span class="comment">/* default connection */</span></div><div class="line">  conn.models = <span class="keyword">this</span>.models;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">module</span>.exports = exports = <span class="keyword">new</span> Mongoose;</div></pre></td></tr></table></figure></p>
<p>可以看出来，我们引用mongoose时，就是引用Mongoose的一个实例。<br>构造函数格外的简洁，初始化四个属性，建立一个连接，再将该连接的models属性指向实例的同名属性。<br>下面再来看建立的这个连接<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> driver = global.MONGOOSE_DRIVER_PATH || <span class="string">'./drivers/node-mongodb-native'</span>;</div><div class="line"><span class="keyword">var</span> Connection = <span class="built_in">require</span>(driver + <span class="string">'/connection'</span>);</div><div class="line"></div><div class="line">Mongoose.prototype.createConnection = <span class="function"><span class="keyword">function</span>(<span class="params">uri, options</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> conn = <span class="keyword">new</span> Connection(<span class="keyword">this</span>);</div><div class="line">  <span class="keyword">this</span>.connections.push(conn);</div><div class="line">  <span class="keyword">if</span> (options &amp;&amp; options.useMongoClient) &#123;</div><div class="line">    <span class="keyword">return</span> conn.openUri(uri, options);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> conn;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Mongoose.prototype.__defineGetter__(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.connections[<span class="number">0</span>];</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Mongoose.prototype.__defineSetter__(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.connections[<span class="number">0</span>] = v;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Mongoose初始化实例即建立了和MongoDB的连接，也就是注释了说的默认连接，可以通过<code>mongoose.connection</code>访问，该连接可后续再行初始化。</p>
<p>到这里就可以进入正题说<code>mongoose.createConnection</code>和<code>mongoose.connect</code>的区别了。贴下connect的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Mongoose.prototype.connect = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> conn = <span class="keyword">this</span>.connection;</div><div class="line">  <span class="keyword">if</span> ((<span class="built_in">arguments</span>.length === <span class="number">2</span> || <span class="built_in">arguments</span>.length === <span class="number">3</span>) &amp;&amp;</div><div class="line">      <span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">0</span>] === <span class="string">'string'</span> &amp;&amp;</div><div class="line">      <span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">1</span>] === <span class="string">'object'</span> &amp;&amp;</div><div class="line">      <span class="built_in">arguments</span>[<span class="number">1</span>].useMongoClient === <span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">return</span> conn.openUri(<span class="built_in">arguments</span>[<span class="number">0</span>], <span class="built_in">arguments</span>[<span class="number">1</span>], <span class="built_in">arguments</span>[<span class="number">2</span>]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (rgxReplSet.test(<span class="built_in">arguments</span>[<span class="number">0</span>]) || checkReplicaSetInUri(<span class="built_in">arguments</span>[<span class="number">0</span>])) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MongooseThenable(<span class="keyword">this</span>, conn.openSet.apply(conn, <span class="built_in">arguments</span>));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MongooseThenable(<span class="keyword">this</span>, conn.open.apply(conn, <span class="built_in">arguments</span>));</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>connect就是直接使用mongoose初始化时建立的那个连接去连接数据库，具体怎么连接数据库，根据参数选择，可以有<code>openUri</code>、<code>openSet</code>和<code>open</code>, 4.x版本推荐第一种方式，后两种将被废弃。即需形如<code>mongoose.connect(db_url, {useMongoClient:true})</code>这种方式。<br>而<code>createConnection</code>则是mongoose初始化选择的连接方式，可以建立多个连接，每个连接都会被push到<code>mongoose.connections</code>数组中，同时返回此次建立的连接，如果指定了参数，且符合要求，则调用<code>openUri(uri, options)</code>连接数据库。<br>至此，基本捋清二者关系了。</p>
<p>小结下就是，mongoose初始化时会先建立一个与MongoDB驱动的默认连接，connect的方式就是使用该连接。createConnection 会再继续建立与驱动的连接，这种方式适合操作多个数据库的操作。使用openUri方法，是给驱动传参连接数据库。</p>
<p>下面举例以上的说明<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line">mongoose.Promise = global.Promise</div><div class="line"><span class="keyword">var</span> url = process.env.MONGO_URL || <span class="string">'mongodb://localhost:27017/admin'</span></div><div class="line"></div><div class="line"><span class="comment">/* 使用默认连接传参连接数据库 */</span></div><div class="line">mongoose.connection.openUri(url, (err, conn)=&gt;&#123;</div><div class="line">    <span class="built_in">console</span>.log(conn.db.databaseName)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/* 使用默认连接传参连接数据库 */</span></div><div class="line"><span class="keyword">var</span> db = mongoose.connect(url, &#123;<span class="attr">useMongoClient</span>:<span class="literal">true</span>&#125;)</div><div class="line"><span class="built_in">console</span>.log(mongoose.connections.length)</div><div class="line"></div><div class="line"><span class="comment">/* 重新建立连接并传参连接数据库 */</span></div><div class="line"><span class="keyword">var</span> db1 = mongoose.createConnection(url, &#123;<span class="attr">useMongoClient</span>:<span class="literal">true</span>&#125;)</div><div class="line"><span class="built_in">console</span>.log(mongoose.connections.length)</div></pre></td></tr></table></figure></p>
<h2 id="定义文档结构-Schema"><a href="#定义文档结构-Schema" class="headerlink" title="定义文档结构-Schema"></a>定义文档结构-Schema</h2><p>mongoDB的collection对应关系型数据库的table，collection是文档的集合，mongoose里的<code>Schema</code>就是用来定义文档的数据结构。<br>支持的数据类型称为<code>SchemaTypes</code>，分别是</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Date</li>
<li>Boolean</li>
<li>Array</li>
<li>Buffer</li>
<li>ObjectId</li>
<li>Mixed</li>
</ul>
<p>使用举例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</div><div class="line"></div><div class="line"><span class="keyword">var</span> blogSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">  <span class="attr">title</span>:  &#123;<span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">index</span>: <span class="literal">true</span>&#125;,</div><div class="line">  <span class="attr">author</span>: <span class="built_in">String</span>,</div><div class="line">  <span class="attr">body</span>:   <span class="built_in">String</span>,</div><div class="line">  <span class="attr">comments</span>: [&#123; <span class="attr">body</span>: <span class="built_in">String</span>, <span class="attr">date</span>: <span class="built_in">Date</span> &#125;],</div><div class="line">  <span class="attr">date</span>: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;,</div><div class="line">  <span class="attr">hidden</span>: <span class="built_in">Boolean</span>,</div><div class="line">  <span class="attr">meta</span>: &#123;</div><div class="line">    <span class="attr">votes</span>: <span class="built_in">Number</span>,</div><div class="line">    <span class="attr">fans</span>:  <span class="built_in">Number</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>除了定义文档结构，Schema还能定义文档实例方法，模型的静态方法，混合索引，虚拟属性，以及一些和文档生命周期有关的钩子。此处先不展开。</p>
<h2 id="数据库模型-Model"><a href="#数据库模型-Model" class="headerlink" title="数据库模型-Model"></a>数据库模型-Model</h2><p>定义Schema后，需要将它编译成Model。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.Schema(&#123; <span class="attr">name</span>: <span class="string">'string'</span>, <span class="attr">size</span>: <span class="string">'string'</span> &#125;);</div><div class="line"><span class="keyword">var</span> Tank = mongoose.model(<span class="string">'Tank'</span>, schema);</div></pre></td></tr></table></figure></p>
<p>Model是文档的构造函数，Model的实例即文档。<br>实例化方法有两种：</p>
<ul>
<li>new 之后生成的实例使用save方法保存</li>
<li>使用类方法create创建</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Tank = mongoose.model(modelName, yourSchema);</div><div class="line"></div><div class="line"><span class="keyword">var</span> small = <span class="keyword">new</span> Tank(&#123; <span class="attr">size</span>: <span class="string">'small'</span> &#125;);</div><div class="line">small.save(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> handleError(err);</div><div class="line">  <span class="comment">// saved!</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// or</span></div><div class="line"></div><div class="line">Tank.create(&#123; <span class="attr">size</span>: <span class="string">'small'</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, small</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> handleError(err);</div><div class="line">  <span class="comment">// saved!</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>需要特别说明的是：</p>
<ul>
<li>model的操作不会生效，直到与数据库的连接完成。这里也是异步没有出错的原因。</li>
<li>如果使用默认连接需使用<code>mongoose.model()</code>，如果是自定义连接使用<code>connection&#39;s model()</code>，这是个挂载位置问题。</li>
</ul>
<p>具体的model实例对应一个<code>collection</code>,collection是文档的集合，每一个具体的文档对应一张数据表，可以映射为一个javascript对象。其链式关系大体为</p>
<ul>
<li>db -&gt; collections</li>
<li>collection -&gt; docs</li>
<li>doc -&gt; js Object (mongoose.Document instance)</li>
</ul>
<h2 id="数据库操作-CRUD"><a href="#数据库操作-CRUD" class="headerlink" title="数据库操作-CRUD"></a>数据库操作-CRUD</h2><p>每个数据库都会有增改删查的操作，对应mongodb而言，操作的主要分两类</p>
<ul>
<li>collection 层的批量操作</li>
<li>doc 层的具体操作<br>如果是第一类操作，所有方法都是基于model的，例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">model.create() <span class="comment">//给该collection创建一个或多个新的doc</span></div><div class="line">model.remove() <span class="comment">//删除一个或多个符合条件的doc</span></div><div class="line">model.find()   <span class="comment">//查找，返回一个docs数组</span></div><div class="line">model.update() <span class="comment">//更新一个或多个doc</span></div><div class="line">model.count() <span class="comment">//统计该collection下docs的数量</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果是基于单个doc的操作，一些常用的方法有<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">doc.remove() <span class="comment">//删除该文档</span></div><div class="line">doc.save() <span class="comment">//更改后的保存</span></div><div class="line">doc.update() <span class="comment">//更新</span></div><div class="line">doc.toObject() <span class="comment">//将文档转为纯javascript对象，转化后就不再有save等方法</span></div><div class="line">doc.id  <span class="comment">//获取文档元素</span></div></pre></td></tr></table></figure></p>
<p>不同的操作层级有类似的操作方法，但是作用的对象不同，逻辑上需辨别清楚。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>一切的数据库操作都是建立在与数据库的连接上，所有文章开头详细描述了mongoose对于与mongodb连接的管理</li>
<li>schema和model的意义及使用</li>
<li>数据库操作可以理解为是先获取对应的对象，随后调用对应的操作方法</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Mongoose </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongoose </tag>
            
            <tag> mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shell script]]></title>
      <url>/2017/shell/</url>
      <content type="html"><![CDATA[<p>总结shell脚本<br><a id="more"></a></p>
<h2 id="shell-VS-shell-script"><a href="#shell-VS-shell-script" class="headerlink" title="shell VS shell script"></a>shell VS shell script</h2><p>shell 是一种应用程序，负责将指令传达至linux内核。<code>terminl</code> 是一种输入输出的虚拟终端，本身并不会解析输入的命令，真正处理输入命令的是shell。<br><code>shell script</code> 是为shell编写的脚本，本质是命令的集合，相对terminal输入的方式，shell脚本可以批量操作，可以有组合逻辑，能做的事更多，但需要符合一定的代码规范。学习shell脚本本质是掌握shell命令以及shell script的语法规则。本文着重总结后者。</p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>脚本第一行需是约定的声明， 例如：<code>#!/bin/bash</code>，作用是告诉系统用那种解释器，全常用的是bash，很多系统自带，当然也可定义其他版本shell。</p>
<h2 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h2><ol>
<li>添加执行权限 <code>chmod +x filepath</code></li>
<li>执行脚本     <code>filepath arg1 arg2 arg3 ...</code></li>
</ol>
<h2 id="脚本参数"><a href="#脚本参数" class="headerlink" title="脚本参数"></a>脚本参数</h2><ul>
<li><code>$0</code> :   当前脚本文件名</li>
<li>$n  :  传递给脚本或函数的参数，n是一个数字，表示第几个参数，<code>$1</code>表示第一个参数，<code>$2</code>表示第二个参数 …</li>
<li><code>$#</code> :   传递给脚本或函数的参数个数</li>
<li><code>$*</code> :   传递给脚本或函数的所有参数，当它被双引号（” “）包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数</li>
<li><code>$@</code>:    传递给脚本或函数的所有参数，当它被双引号（” “）包含时，与<code>$*</code>稍有不同，”$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数, <code>$*</code> 和<code>$@</code>不被双引号(“ “)包含时，都以”$1” “$2” … “$n” 的形式输出所有参数</li>
<li><code>$$</code>: 脚本运行的当前进程ID号</li>
<li><code>$?</code>: 上一个命令的退出状态，<code>或函数的返回值</code>，如果正常退出则返回0，反之为非0值</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>脚本里常用数据类型分为三类，字符串、数字类型，数组。</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>如果不声明类型，默认为字符串。<br>赋值时<code>=</code>附近不能有空格（<code>shell中使用空格会带来很多诸如此类的问题，能不用就不用！</code>）<br>使用变量是时需再变量名前加上<code>$</code>,同时使用可选的<code>{}</code>表示变量边界<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">a=8</div><div class="line">b=9</div><div class="line"><span class="built_in">echo</span> <span class="variable">$a</span>     <span class="comment"># $&#123;a&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$a</span>+<span class="variable">$b</span>  <span class="comment"># 8+9 默认字符串，并不是整型</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#a&#125;</span>  <span class="comment"># 获取字符串长度</span></div></pre></td></tr></table></figure></p>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>直接连接，中间不能有空格<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">a=hello</div><div class="line">b=<span class="variable">$a</span><span class="string">" world"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$b</span></div></pre></td></tr></table></figure></p>
<h4 id="高级用法"><a href="#高级用法" class="headerlink" title="${} 高级用法"></a>${} 高级用法</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">file=/dir1/dir2/dir3/my.file.txt</div><div class="line"><span class="comment">#可以用$&#123; &#125;分别替换获得不同的值：</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file#*/&#125;</span>   <span class="comment">#拿掉第一个 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file##*/&#125;</span>  <span class="comment">#拿掉最后一个 / 及其左边的字符串：my.file.txt</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file#*.&#125;</span>   <span class="comment">#拿掉第一个 . 及其左边的字符串：file.txt</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file##*.&#125;</span>  <span class="comment">#拿掉最后一个 . 及其左边的字符串：txt</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file%/*&#125;</span>   <span class="comment">#拿掉最后一个 / 及其右边的字符串：/dir1/dir2/dir3</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file%%/*&#125;</span>  <span class="comment">#拿掉第一个 / 及其右边的字符串：(空值)</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file%.*&#125;</span>   <span class="comment">#拿掉最后一个 . 及其右边的字符串：/dir1/dir2/dir3/my.file</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file%%.*&#125;</span>  <span class="comment">#拿掉第一个 . 及其右边的字符串：/dir1/dir2/dir3/my</span></div><div class="line"><span class="comment"># `#` 去掉左边</span></div><div class="line"><span class="comment"># `%` 去掉右边</span></div><div class="line"><span class="comment"># 单一符号是最小匹配，两个符号是最大匹配。</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file:0:5&#125;</span>  <span class="comment">#提取最左边的 5 个字节：/dir1</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file:5:5&#125;</span>  <span class="comment">#提取第 5 个字节右边的连续 5 个字节：/dir2</span></div><div class="line"><span class="comment">#也可以对变量值里的字符串作替换：</span></div><div class="line"><span class="variable">$&#123;file/dir/path&#125;</span>  <span class="comment">#将第一个 dir 替换为 path：/path1/dir2/dir3/my.file.txt</span></div><div class="line"><span class="variable">$&#123;file//dir/path&#125;</span> <span class="comment">#将全部 dir 替换为 path：/path1/path2/path3/my.file.txt</span></div></pre></td></tr></table></figure>
<p>变量可用<code>declare</code>关键字声明类型，但也可不用。</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment">#通过下标声明</span></div><div class="line">array[0]=a</div><div class="line">array[1]=b</div><div class="line"><span class="comment">#或声明并统一赋值</span></div><div class="line">array=(a,b,c)</div><div class="line"><span class="comment">#取数组中的值：</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;data[1]&#125;</span>   <span class="comment"># 输出第1个元素</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;data&#125;</span>      <span class="comment"># 不写默认是第0个</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;data[*]&#125;</span>   <span class="comment"># 输出数组中所有的变量</span></div><div class="line"><span class="comment"># 取得数组元素的个数</span></div><div class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></div><div class="line"><span class="comment"># 或者</span></div><div class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></div><div class="line"><span class="comment"># 取得数组单个元素的长度</span></div><div class="line">lengthn=<span class="variable">$&#123;#array_name[n]&#125;</span></div></pre></td></tr></table></figure>
<h2 id="单双引号及反引号"><a href="#单双引号及反引号" class="headerlink" title="单双引号及反引号"></a>单双引号及反引号</h2><p>字符串可以用单引号，也可以用双引号，也可以<code>不用引号</code>（默认字符串类型）。<br>单双引号的区别：</p>
<ul>
<li>单引号里<code>任何字符</code>都会原样输出，内部变量无效</li>
<li>单引号内部不能再出现单引号（转义输出也不行）</li>
<li>双引号里可以有变量（相当于模板字符串）</li>
<li>双引号可以出现转义字符</li>
</ul>
<p>反引号”`”,用于命令替换(command subsitution)，执行引号内命令，返回结果填充<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#显示上周日的日期</span></div><div class="line"><span class="built_in">echo</span> the last sunday is `date <span class="_">-d</span> <span class="string">"last sunday"</span> +%Y-%m-%d`</div><div class="line"><span class="built_in">echo</span> the last sunday is $(date <span class="_">-d</span> <span class="string">"last sunday"</span> +%Y-%m-%d)</div></pre></td></tr></table></figure></p>
<p>反引号移植性好，新的shell可使用<code>$()</code>，<br>区别之一:</p>
<ul>
<li>反引号本身就对\进行了转义，保留了它本身意思，如果我们想在反引号中起到\的特殊意义，我们必须使用2个\来进行表示。<br>所以我们可以简单的想象成反引号中: <code>\\ = \</code></li>
<li>$()中则不需要考虑\的问题，与我们平常使用的一样: <code>\ = \</code><br>示例如下：<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#eg:my host name is 'sora'</span></div><div class="line"><span class="built_in">echo</span>  `<span class="built_in">echo</span> <span class="variable">$HOSTNAME</span>`   <span class="comment"># sora</span></div><div class="line"><span class="built_in">echo</span> $(<span class="built_in">echo</span> <span class="variable">$HOSTNAME</span>)   <span class="comment"># sora 此时二者无区别</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span>  `<span class="built_in">echo</span> \<span class="variable">$HOSTNAME</span>`   <span class="comment"># sora</span></div><div class="line"><span class="built_in">echo</span> $(<span class="built_in">echo</span> \<span class="variable">$HOSTNAME</span>)   <span class="comment"># $HOSTNAME</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span>  `<span class="built_in">echo</span> \\<span class="variable">$HOSTNAME</span>`  <span class="comment"># $HOSTNAME</span></div><div class="line"><span class="built_in">echo</span> $(<span class="built_in">echo</span> \\<span class="variable">$HOSTNAME</span>)  <span class="comment"># \sora</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="echo与printf"><a href="#echo与printf" class="headerlink" title="echo与printf"></a>echo与printf</h2><p><code>echo</code> 用于字符串的输出<br><code>echo string</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># 转义输出</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"\"It is a test\""</span>  </div><div class="line"><span class="comment"># 读取一行输出，read命令会去除首尾空格</span></div><div class="line"><span class="built_in">read</span> name </div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$name</span> It is a test"</span></div><div class="line"></div><div class="line"><span class="comment"># -e 开启特殊符号转义</span></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"OK! \n"</span> <span class="comment"># 显示换行</span></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"OK! \c"</span> <span class="comment"># 不换行</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"test"</span></div><div class="line"><span class="comment"># 显示结果定向至文件</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"It is a test"</span> &gt; myfile</div></pre></td></tr></table></figure></p>
<p><code>printf</code> 类似于c的用法，用于格式化字符串，标准定义，移植性更好<br><code>printf  format-string  [arguments...]</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># format-string为双引号</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"%d %s\n"</span> 1 <span class="string">"abc"</span></div><div class="line"></div><div class="line"><span class="comment"># 单引号与双引号效果一样 </span></div><div class="line"><span class="built_in">printf</span> <span class="string">'%d %s\n'</span> 1 <span class="string">"abc"</span> </div><div class="line"></div><div class="line"><span class="comment"># 没有引号也可以输出</span></div><div class="line"><span class="built_in">printf</span> %s abc def</div><div class="line"></div><div class="line"><span class="comment"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"%s\n"</span> abc def</div></pre></td></tr></table></figure></p>
<h2 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># declare -i 变量名声明为数值型进行运算</span></div><div class="line">a=1</div><div class="line">b=2</div><div class="line"><span class="built_in">declare</span> -i c=<span class="variable">$a</span>+<span class="variable">$b</span></div><div class="line"></div><div class="line"><span class="comment"># expr或let数值运算工具</span></div><div class="line">a=1</div><div class="line">b=2</div><div class="line">c=$(expr <span class="variable">$a</span> + <span class="variable">$b</span>)  <span class="comment"># + 号左右两侧必须有空格</span></div><div class="line"></div><div class="line"><span class="comment"># $((运算式))或 $[运算式]</span></div><div class="line">a=1 </div><div class="line">b=2</div><div class="line">c=$((<span class="variable">$a</span> + <span class="variable">$b</span>))</div><div class="line">d=$[<span class="variable">$a</span> + <span class="variable">$b</span>]</div></pre></td></tr></table></figure>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> condition1</div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="built_in">command</span>1</div><div class="line"><span class="keyword">elif</span> condition2 </div><div class="line"><span class="keyword">then</span> </div><div class="line">    <span class="built_in">command</span>2</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">command</span>N</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># 写成一行需要分号分隔</span></div><div class="line"><span class="keyword">if</span> condition1; <span class="keyword">then</span> <span class="built_in">command</span>; <span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="built_in">command</span>1</div><div class="line">    <span class="built_in">command</span>2</div><div class="line">    ...</div><div class="line">    <span class="built_in">command</span>N</div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment"># 写成一行</span></div><div class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN; <span class="keyword">do</span> <span class="built_in">command</span>1; <span class="built_in">command</span>2… <span class="keyword">done</span>;</div><div class="line"></div><div class="line"><span class="comment"># example</span></div><div class="line"><span class="keyword">for</span> loop <span class="keyword">in</span> 1 2 3 4 5</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"The value is: <span class="variable">$loop</span>"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> condition</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="built_in">command</span></div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="comment"># example，当int小于5时输出显示</span></div><div class="line">int=1</div><div class="line"><span class="keyword">while</span> [ <span class="variable">$int</span> <span class="_">-lt</span> 5 ]</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="variable">$int</span></div><div class="line">    int=$[<span class="variable">$int</span>+1]</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>常用的两种方式，<code>test</code>命令或<code>[]</code><br>其中用<code>[]</code>时，开头和结尾必须有空格<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">bit=`getconf LONG_BIT`</div><div class="line"><span class="comment"># 判断系统位数是否为64</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$bit</span> = 64 ] <span class="comment"># 注意前后空格, = 在判断相等时前后可以有空格，赋值时不行</span></div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">'yes'</span></div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">'no'</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># test命令的方式则是</span></div><div class="line"><span class="comment"># if test $bit = 64</span></div></pre></td></tr></table></figure></p>
<h3 id="整型数值比较"><a href="#整型数值比较" class="headerlink" title="整型数值比较"></a>整型数值比较</h3><ul>
<li>-eq    等于则为真</li>
<li>-ne    不等于则为真</li>
<li>-gt    大于则为真</li>
<li>-ge    大于等于则为真</li>
<li>-lt    小于则为真</li>
<li>-le    小于等于则为真<br>注意， 这些符合判断仅适用于整型<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">a=123</div><div class="line">b=45</div><div class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[a] <span class="_">-gt</span> $[b] <span class="comment"># 也可以用 `=` 判断</span></div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">'yes'</span></div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">'no'</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h3><p><code>operator string</code><br>字符串相等，用<code>=</code>判断, 整型的判断在这里不适用,<code>除非字符串是整型数字</code></p>
<ul>
<li>=        字符串等于则为真</li>
<li>!=    字符串不相等则为真</li>
<li>-z    字符串的长度为零则为真</li>
<li>-n     字符串的长度不为零则为真<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">a=<span class="string">''</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">test</span> -z <span class="variable">$a</span> <span class="comment"># [ -z $a ]</span></div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">'yes'</span></div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">'no'</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="文件名判断"><a href="#文件名判断" class="headerlink" title="文件名判断"></a>文件名判断</h3><p><code>operator filename</code></p>
<ul>
<li>-a或-e 如果文件存在则为真</li>
<li>-d     如果文件存在且为目录则为真</li>
<li>-f     如果文件存在且为普通文件则为真</li>
<li>-r     如果文件存在且可读则为真</li>
<li>-s     如果文件存在且至少有一个字符则为真</li>
<li>-w     如果文件存在且可写则为真</li>
<li>-x     如果文件存在且可执行则为真</li>
</ul>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul>
<li>||    Or</li>
<li>&amp;&amp;    And<h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3></li>
<li>-a   与</li>
<li>-o   或</li>
<li>!    非<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">cd</span> /bin</div><div class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="_">-e</span> ./notFile -o <span class="_">-e</span> ./bash</div><div class="line"><span class="comment"># 用逻辑运算符写如下：</span></div><div class="line"><span class="comment"># if test -e ./notFile || test -e ./bash</span></div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">'有一个文件存在!'</span></div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">'两个文件都不存在'</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>必须先声明再调用</p>
<h3 id="函数声明与调用"><a href="#函数声明与调用" class="headerlink" title="函数声明与调用"></a>函数声明与调用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 声明 关键字function可省略</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">funcName</span></span>()&#123;</div><div class="line">    statement</div><div class="line">&#125;</div><div class="line"><span class="comment"># 调用</span></div><div class="line">func arg1 arg2 ...</div></pre></td></tr></table></figure>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>函数内部$n 表示传入的第n个参数,这里和脚本参数类似</p>
<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟<code>数值</code>(0-255)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="function"><span class="title">test</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> 123</div><div class="line">&#125;</div><div class="line"><span class="built_in">test</span></div><div class="line">a=<span class="string">"$?"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$a</span></div></pre></td></tr></table></figure></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="得到当前脚本目录"><a href="#得到当前脚本目录" class="headerlink" title="得到当前脚本目录"></a>得到当前脚本目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">dir=<span class="string">"cd `dirname <span class="variable">$0</span>`; pwd"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$dir</span></div></pre></td></tr></table></figure>
<h3 id="判断由当前脚本启动的实例个数"><a href="#判断由当前脚本启动的实例个数" class="headerlink" title="判断由当前脚本启动的实例个数"></a>判断由当前脚本启动的实例个数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ret=`ps -ef | grep <span class="string">"yourprocessname"</span> | grep -v grep | grep -v <span class="string">"<span class="variable">$(basename $0)</span>"</span> | wc <span class="_">-l</span>`</div><div class="line"><span class="built_in">echo</span> <span class="variable">$ret</span></div></pre></td></tr></table></figure>
<h3 id="嵌入文本-here-document"><a href="#嵌入文本-here-document" class="headerlink" title="嵌入文本(here document)"></a>嵌入文本(here document)</h3><p>将两个<code>delimiter</code>之间的内容作为输入传递给command<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">command</span> &lt;&lt; delimiter</div><div class="line">    document</div><div class="line">delimiter</div></pre></td></tr></table></figure></p>
<p>tips：</p>
<ul>
<li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</li>
<li>开始的delimiter前后的空格会被忽略掉。<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#示例</span></div><div class="line">cat &lt;&lt;EOF</div><div class="line">content to <span class="built_in">print</span></div><div class="line">EOF</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> Shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shell-script </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js中的this、bind、call、apply]]></title>
      <url>/2017/js-this/</url>
      <content type="html"><![CDATA[<p>发现一个很有意思的现象，js中的<code>this</code>、<code>bind</code>、<code>call</code>、<code>apply</code>单独拿出来都知道用法，但只要两个的组合出现时就有点蒙，三个的组合出现时开始怀疑自己是否还没入门……</p>
<p>我想大概原因还是没有认真做过总结吧，之前已经总结过一次js中this的用法，不过那次是着重总结箭头函数中的this。这次把这几个经常见到的整合在一起再总结一次。<br><a id="more"></a></p>
<h1 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h1><ul>
<li>this，指向一个对象，不同情况下不同, 如果是函数调用，this指向函数运行时的context，即上下文对象</li>
<li>bind，函数方法，调用后返回一个创建的新函数，第一个参数为传递给创建函数的this变量，后续参数为创建函数参数，会先于调用函数参数传入</li>
<li>call，函数方法，调用后执行该函数，第一个参数为传递给该函数的this变量，后续参数为函数参数</li>
<li>apply，函数方法，调用后执行该函数，第一个参数为传递给该函数的this变量，第二个参数可省略，但存在的话必须为一个数组或类数组</li>
</ul>
<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p>现在随手一搜关键字<code>js</code>, <code>this</code>, 能找到无数介绍资料，很多人总结的都很好，很详尽，我也来一份我自己的总结。</p>
<h2 id="this出现的位置"><a href="#this出现的位置" class="headerlink" title="this出现的位置"></a>this出现的位置</h2><p>一般this都是出现在函数内部，但在函数外也是可以的，例如:</p>
<ul>
<li><p>在浏览器的console里敲</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span> === <span class="built_in">window</span> <span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
<li><p>在nodejs脚本里写</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === exports) <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//&#123;&#125;</span></div><div class="line"></div><div class="line">a = <span class="number">8</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === global)  <span class="comment">//true</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)  <span class="comment">//8</span></div><div class="line">&#125;</div><div class="line">test()</div></pre></td></tr></table></figure>
</li>
<li><p>但strict 模式下脚本结果会有不同</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//undefined</span></div><div class="line">&#125;</div><div class="line">test()</div></pre></td></tr></table></figure>
</li>
<li><p>在node REPL模式下输入</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === global) <span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>在普通函数内部，this默认指向全局变量，浏览器里对应就是<code>window</code>，node中为<code>global</code>。strict模式下则强制指向<code>undefined</code>。<br>但函数作为<code>构造函数</code>或<code>对象方法</code>时情况则不同。但都符合一个原则，统统指向函数执行时的上下文对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> Test(<span class="string">'test'</span>)</div><div class="line"><span class="built_in">console</span>.log(test.name) <span class="comment">//test</span></div><div class="line"></div><div class="line"><span class="comment">//对象方法</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'test'</span>,</div><div class="line">    <span class="attr">test</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">obj.test() <span class="comment">//test</span></div></pre></td></tr></table></figure></p>
<p>构造函数和对象方法的上下文对象都很清楚，就是调用函数的对象。<br>这里再复习下箭头函数，如果是箭头函数的调用呢<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;)()</div></pre></td></tr></table></figure></p>
<p>对于箭头函数，它没有自己的上下文，依赖于父上下文，即向外最近的this指向就是它的指向，那这里就相当与在脚本里直接打印this了，结果为<code>{}</code>,指向<code>exports</code>包对象本身，如果是浏览器则是<code>window</code>对象。</p>
<h2 id="函数内部的函数this"><a href="#函数内部的函数this" class="headerlink" title="函数内部的函数this"></a>函数内部的函数this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">name = <span class="string">'你猜'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">    <span class="keyword">this</span>.foo =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'#'</span>+<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">    bar()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> Test(<span class="string">'test'</span>)  <span class="comment">//#你猜</span></div><div class="line"><span class="built_in">console</span>.log(test.name)  <span class="comment">// test</span></div><div class="line"><span class="built_in">console</span>.log(test.foo()) <span class="comment">// test</span></div></pre></td></tr></table></figure>
<p>以上代码结果会是什么呢？<br>涉及的三个函数Test，bar和foo，它们内的this是同一对象么？<br>答案是否定的，非匿名函数的this指向都是独立的，情况和之前说的一样，作为普通函数和构造函数及对象方法是不一样的。</p>
<h1 id="call和apply"><a href="#call和apply" class="headerlink" title="call和apply"></a>call和apply</h1><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>call和apply区别只是第二个参数不同，放在一起说。<br>之前说this在函数中的指向虽然不总是一致，但也是有规律的，例如定义一个对象，那么它的方法函数内部的this，一般情况下都是指向它本身的，没有什么问题。还是之前的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'test'</span>,</div><div class="line">    <span class="attr">test</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">obj.test() <span class="comment">// test</span></div></pre></td></tr></table></figure></p>
<p>但这是新定义了一个对象，也想使用test方法呢？你会想到直接赋值不就可以了么，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name = <span class="string">'你猜'</span></div><div class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">name</span>:<span class="string">'foo'</span>&#125;</div><div class="line">foo.test = obj.test</div><div class="line">foo.test()</div></pre></td></tr></table></figure></p>
<p>结果行不行呢？哈哈，你猜？<br>答案是可以滴！属性赋值，函数没有立即执行，运行中的上下文是可以改变的，当调用<code>foo.test()</code>时，函数的this会指向foo对象的。<br>但注意如果是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test= obj.test</div><div class="line">test()</div></pre></td></tr></table></figure></p>
<p>这样的话test又回归一个普通函数了，this的则指向全局变量。</p>
<p>相比较而言，call和apply提供了较为简洁的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name = <span class="string">'你猜'</span></div><div class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">name</span>:<span class="string">'foo'</span>&#125;</div><div class="line">obj.test.apply(foo)</div></pre></td></tr></table></figure></p>
<p>即手动指定函数内部的上下文，让不确定变得确定。<br>这样做的好处是什么呢，会发现call和apply实现了js中的所有对象的方法共享，即对象方法不再只限定为该对象自身调用，其他任何对象都可以通过传递this的方式改变函数执行时的上下文从而实现一处定义，多处调用。</p>
<h2 id="this语法糖"><a href="#this语法糖" class="headerlink" title="this语法糖"></a>this语法糖</h2><p>到这里几乎把函数调用的方式都举例了，总的来说就三种：</p>
<ul>
<li>func()</li>
<li>obj.func()</li>
<li><p>func.call() || func.apply()<br>通常使用的都前两种，然而事实是前两种都是以第三种调用模式实现的语法糖，本质还是第三种调用，这样做只为让语法更简洁。</p>
<p>  因此func() 等价于 func.call(this)，obj.func() 等价于 obj.func.call(obj)</p>
</li>
</ul>
<p>this即传入的上下文对象，隐式情况下会有之前所提到的种种默认值，显示情况则可以手动指定</p>
<h1 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h1><h2 id="永久改变this指向"><a href="#永久改变this指向" class="headerlink" title="永久改变this指向"></a>永久改变this指向</h2><p>bind和call及apply类似，也可以动态修改函数执行的上下文，但又有不同，如果说call和apply是“借尸还魂”，那么bind就是“影分身”了，它创建新函数，产生独立的对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'test'</span>,</div><div class="line">    <span class="attr">test</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test =  obj.test</div><div class="line">test()</div></pre></td></tr></table></figure></p>
<p>这是刚才的一个例子，结果肯定不是’test’，原因之前解释了，复制语句让test变成一个普通函数，运行时上下文对象会指向全局变量。<br>当然可以使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test.apply(obj)</div></pre></td></tr></table></figure></p>
<p>这样的方法动态修改上下文指向。但bind可以提供永久改变上下文的方法，即：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test =  obj.test.bind(obj)</div><div class="line">test() <span class="comment">// test</span></div></pre></td></tr></table></figure></p>
<p>这个时候test函数的this指向就固定了，指向obj。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test =  obj.test.bind(obj)</div><div class="line">test()  <span class="comment">//test</span></div><div class="line">test.apply(&#123;<span class="attr">name</span>:<span class="string">'xxx'</span>&#125;) <span class="comment">// test，apply传入的this未生效</span></div><div class="line">obj.name = <span class="string">'xxx'</span></div><div class="line">test() <span class="comment">//xxx， 随上下文对象变化</span></div></pre></td></tr></table></figure></p>
<p>此时apply方法的动态修改将不再生效，永久指向obj，obj变化时它才会变化。</p>
<h2 id="bind传参"><a href="#bind传参" class="headerlink" title="bind传参"></a>bind传参</h2><p>bind函数也可传参，而且还有点特别，这里引用mdn的例子作简要说明<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> list1 = list(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></div><div class="line"></div><div class="line"><span class="comment">// Create a function with a preset leading argument</span></div><div class="line"><span class="keyword">var</span> leadingThirtysevenList = list.bind(<span class="literal">null</span>, <span class="number">37</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> list2 = leadingThirtysevenList(); </div><div class="line"><span class="comment">// [37]</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> list3 = leadingThirtysevenList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line"><span class="comment">// [37, 1, 2, 3]</span></div></pre></td></tr></table></figure></p>
<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>bind 的第一个参数如果不是对象，会被包装成对象类型传入。</p>
<h1 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h1><p>其实刚才举例大多已经是组合使用，都是与this的组合，下面举两个个三者组合的例子。</p>
<h2 id="fn-bind-apply"><a href="#fn-bind-apply" class="headerlink" title="fn.bind.apply"></a>fn.bind.apply</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a1, a2</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a1+a2)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> fn.bind.apply(fn, <span class="built_in">arguments</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = test(add, <span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="built_in">console</span>.log(bar) <span class="comment">// '[Function: bound add]'</span></div><div class="line">bar() <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>apply的作用是调用一个函数，可以修改运行时的上下文对象。<br>在这里apply调用的同样是一个函数<code>fn.bind</code>, 指定它的this对象指向<code>fn</code>，并提前传入参数<code>arguments</code>。<br>bind函数的作用是返回一个新函数，于是<code>fn.bind.apply(fn, arguments)</code>返回了一个新函数。通过打印可以看到，打印上文的<code>bar</code>显示<code>[Function: bound add]</code>,此时<code>bar</code>已经是独立的函数，并且根据之前传参的介绍，参数1,2已经提前传入，所有后续调用bar函数时无需再次传参，直接调用即可。</p>
<h2 id="fn-apply-bind"><a href="#fn-apply-bind" class="headerlink" title="fn.apply.bind"></a>fn.apply.bind</h2><p>都知道函数的arguments对象其实并不是一个标准的数组对象，往往需要将它转化为数组使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通常做法是用apply或call实现</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(<span class="built_in">arguments</span>)) <span class="comment">//false</span></div><div class="line">    <span class="keyword">var</span> arg = <span class="built_in">Array</span>.prototype.slice.apply(<span class="built_in">arguments</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arg)) <span class="comment">//true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//bind方法实现</span></div><div class="line"><span class="keyword">var</span> unboundSlice = <span class="built_in">Array</span>.prototype.slice;</div><div class="line"><span class="keyword">var</span> slice = <span class="built_in">Function</span>.prototype.apply.bind(unboundSlice);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(<span class="built_in">arguments</span>)) <span class="comment">//false</span></div><div class="line">    <span class="keyword">var</span> arg = slice(<span class="built_in">arguments</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arg)) <span class="comment">//true</span></div><div class="line">&#125;</div><div class="line">test()</div></pre></td></tr></table></figure></p>
<p>这里的<code>fn.apply.bind</code>的使用返回一个新的<code>bound apply</code>函数，它的上下文对象为<code>unboundSlice</code>。也就是说原来的apply函数必须依赖函数对象才能调用，现在可以独立调用了，此时的slice是一个包含特定this的apply方法。</p>
<h2 id="fn-bind-bind"><a href="#fn-bind-bind" class="headerlink" title="fn.bind.bind"></a>fn.bind.bind</h2><p>由第二个例子，我生生联想到这个例子，发现真的可行，足以证明我似乎好像真的理解了，差点被自己感动……<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice</div><div class="line"><span class="keyword">var</span> boundBind = <span class="built_in">Function</span>.prototype.bind.bind(<span class="built_in">Function</span>.prototype.apply)</div><div class="line"><span class="keyword">var</span> boundApply = bound(slice)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(<span class="built_in">arguments</span>)) <span class="comment">//false</span></div><div class="line">    <span class="keyword">var</span> arg = boundApply(<span class="built_in">arguments</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arg)) <span class="comment">//true</span></div><div class="line">&#125;</div><div class="line">test()</div></pre></td></tr></table></figure></p>
<p>正常人应该不会这么写的，主要为了理解，具体可自行分析。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>this实际上是在函数被调用时建立的一个绑定,具体指向跟上下文有关</li>
<li>apply、call、bind都是<code>Function.prototype</code>对象的属性，都是函数方法，都可以动态修改函数运行时的上下文对象</li>
<li>apply、call的调用会立即运行该函数</li>
<li>bind的调用会创建一个新的函数</li>
<li>apply传参必须为数组或类数组</li>
<li>call和bind传参为位置参数</li>
<li>bind函数传参会先于新函数调用时的参数传入</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> This </category>
            
        </categories>
        
        
        <tags>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[express框架学习(中)]]></title>
      <url>/2017/express_framework/</url>
      <content type="html"><![CDATA[<p>本次总结试图说明express框架运行的原理，结论都是从阅读源码得来，但文中不会提及源代码，仅作总体认知方面进行说明。</p>
<a id="more"></a>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>结合一个官网实例来说明<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res, next</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`receive: <span class="subst">$&#123;req.url&#125;</span>`</span>)</div><div class="line">  next()</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Hello World!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening at http://%s:%s'</span>, host, port);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如无意外，运行以上代码即实现了一个十分简单的web版hello world，控制台还有一些打印。<br>总的来说，express的对外接口设计还是十分友好实用的，这里主要用到三个API</p>
<ul>
<li>app.use, 注册中间件</li>
<li>app.METHOD，注册路由（这里用到的是具体的get方法）</li>
<li>app.listen， 创建http server，监听端口</li>
</ul>
<p>结合上例下面主要论述清楚两个问题：</p>
<ol>
<li>express在创建http server前的中间件和路由的实现</li>
<li>一条特定url的http请求是如何被express处理</li>
</ol>
<h1 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h1><p><img src="http://opxo4bto2.bkt.clouddn.com/image/png/express.png" alt="express"></p>
<h1 id="中间件及路由的挂载"><a href="#中间件及路由的挂载" class="headerlink" title="中间件及路由的挂载"></a>中间件及路由的挂载</h1><p>对应问题一。此处分为三部分：</p>
<ul>
<li>require得到的express是一个函数，调用后返回的app仍然是一个函数，得到app前已调用初始化函数<code>app.init()</code>完成一些默认设置。</li>
<li>继续调用<code>app.use</code>或<code>app.METHOD</code>函数，他们的效果是调用另一个函数<code>app.lazyrouter</code>,这个函数会给app对象动态增加<code>_router</code>属性。同时，根据<code>app.use</code>或<code>app.METHOD</code>函数的参数，封装成特定的layer对象，存放在<code>app._router.stack</code>属性中，该属性是一个数组，首次加载时会添加两个默认中间件，因此，无论是use还是get等方法添加的中间件还是路由，都会按顺序从第三个元素开始存放在stack数组中，因此调用函数的顺序很重要。</li>
<li>对于<code>app.METHOD</code>系列函数，<code>layer</code>对象会增加<code>route</code>属性，用于存放注册的路由路径（eg：”/test“)、路由方法（eg：“get”，以及相应的处理函数），如果是形如<code>app.get(&#39;/test&#39;, middleware1, ， middleware2...function(req,res){...}</code>, route的stack属性则按顺序存储对应逻辑转换的layer对象，并且<code>layer.handle</code>属性均为<code>route.dispatch</code>的bound函数</li>
</ul>
<h1 id="路由系统的工作原理"><a href="#路由系统的工作原理" class="headerlink" title="路由系统的工作原理"></a>路由系统的工作原理</h1><p>对应问题二。这里同样分成三部分：</p>
<ul>
<li>express内部封装了http模块，对应http的api<code>http.createServer([requestListener])</code>可知，即每次request请求事件都会调用requestListener函数，对应到express里就是<code>app</code>函数，<code>app()</code>里又调用了<code>app.handle()</code>函数。</li>
<li><code>app.handle()</code>函数做了两件事，一时增加一个默认的错误处理函数，如果此时不存在路由，则直接调用该错误处理函数，否则调用<code>app._router.handle()</code>函数，同时将错误处理函数作为第三个参数传入。</li>
<li><code>app._router.handle()</code>函数完成了匹配与分发的路由工作，这里通过<code>next</code>函数来控制遍历<code>app._router.stack</code>，每次调用按顺序处理一个layer，先调用<code>layer.match()</code>判断是否匹配路由，如果匹配则调用<code>layer.handle_request</code>从而调用<code>layer.handle()</code>处理函数，否则调用<code>layer.handle_error()</code>处理错误。如果继续调用<code>next()</code>函数则继续处理下一个layer, 否则视为处理结束。如果是人为的漏掉next，则会导致后续处理不会被调用。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>express 结合node自带的http模块，站在巨人的肩膀展现了封装的艺术。良好的层次结构，友好实用的api设计都是值得学习和借鉴的，后续会再尝试研究细节的实现。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Express </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[express框架学习(上)]]></title>
      <url>/2017/express-basic/</url>
      <content type="html"><![CDATA[<p>项目中选用的web框架是express，总结下经验<br><a id="more"></a></p>
<h1 id="express是做什么的"><a href="#express是做什么的" class="headerlink" title="express是做什么的"></a>express是做什么的</h1><p>从官网所得描述是基于node.js的一个简洁灵活的web框架，性能上没有对node进行二次抽象，也就是说express的性能的上限就是node本身的性能。<br>那就先从node本身说起。</p>
<p>网络编程这块，node代表性的有两大模块，<code>net</code>和<code>http</code>，（<code>https</code>基于<code>http</code>先不提）</p>
<p>使用<code>net</code>模块写一个简单的<code>hello world</code>服务器如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> net.Server()</div><div class="line"></div><div class="line">server.listen(<span class="number">3329</span>)</div><div class="line"></div><div class="line">server.on(<span class="string">'connection'</span>, (socket)=&gt;&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`receive a connection from <span class="subst">$&#123;socket.address().address&#125;</span>`</span>)</div><div class="line">    socket.on(<span class="string">'data'</span>, (data)=&gt;&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`receive:\n<span class="subst">$&#123;data&#125;</span>`</span>)</div><div class="line">        socket.write(<span class="string">"HTTP/1.1 200 OK \n\nHello World!\r\n"</span>)</div><div class="line">        socket.destroy()</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>node运行后，可以在浏览器访问<code>http://localhost:3329/</code>,没什么意外的话就能看到熟悉的hello world。这里运用的是socket编程。<br>浏览器每一次的http请求和服务器建立一次socket连接。从收到的内容打印看，收到的确实是http格式的请求，服务器的回复也是符合http的响应格式的。<br>响应头加两个换行符后接响应体，少一个换行符就看不到hello world了。<br>但这个服务器太简陋了，它分不清不同的请求，所有都回复相同的内容。原因当然是没有解析请求的数据了，需要解析打印出来的<code>data</code>内容。</p>
<p>于是就有了下面这段代码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`receive a request: <span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span> HTTP<span class="subst">$&#123;req.httpVersion&#125;</span>`</span>);</div><div class="line">    res.write(<span class="string">"Hello, World!"</span>)</div><div class="line">    res.end()</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">3329</span>)</div></pre></td></tr></table></figure>
<p>和上面功能相同，但仿佛更加简洁了。可以直接得到请求的url，以及回响应时不用关心响应的格式，直接写我们最关注的响应体就可以了。这些方便正是http模块相对于net模块，做了更多的封装，完成了解析请求数据的工作，并提供十分便捷的API。<br>到这个版本就可以针对不同的访问请求回复不同的响应了，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`receive a request: <span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span> HTTP<span class="subst">$&#123;req.httpVersion&#125;</span>`</span>);</div><div class="line">    <span class="keyword">if</span>(req.method === <span class="string">'GET'</span> &amp;&amp; req.url === <span class="string">'/'</span>)&#123;</div><div class="line">        res.write(<span class="string">"Welcome Home!"</span>)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        res.write(<span class="string">"Hello, World!"</span>)</div><div class="line">    &#125;</div><div class="line">    res.end()</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">3329</span>)</div></pre></td></tr></table></figure></p>
<p>当访问<code>`http://localhost:3329/hello</code>时返回<code>Hello, World!</code>，访问<code>http://localhost:3329/</code>, 返回<code>Welcome Home!</code>。<br>当然这是一个非常粗糙的实现，如果页面较多时代码将变得极其难看和很难维护。</p>
<p>下面该<code>express</code>登场了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> server = http.createServer(app)</div><div class="line">server.listen(<span class="number">3329</span>)</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, (request, response)=&gt;&#123;</div><div class="line">    response.send(<span class="string">'Welcome Home!'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/hello'</span>, (request, response)=&gt;&#123;</div><div class="line">    response.send(<span class="string">'Hello World!'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>同样实现了之前的需求，但是写法简洁清晰不少，最重要的是方便维护。除此之外，引入的<code>express</code>、<code>app</code>、<code>request</code>、<code>response</code>，都提供了极其丰富且实用的API，具体可参考<a href="http://expressjs.com/en/4x/api.html" target="_blank" rel="external">官网API</a>。<br>然而以上是比较老的写法，最新版本的express写法更加简单，http模块整个都被封装了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">var</span> app = express()</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Hello World'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(<span class="number">3329</span>)</div></pre></td></tr></table></figure></p>
<p>总的来说就是，node.js自带web server，express为该server打造了更加健壮的基础。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Express </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js 中的编码问题]]></title>
      <url>/2017/node_encoding/</url>
      <content type="html"><![CDATA[<p>编码问题本不是一个问题，直到它主动找上你，它就是个大问题<br><a id="more"></a></p>
<p>Node用到的默认编码格式是utf8，支持的编码格式在<a href="https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings" target="_blank" rel="external">Buffer API</a>中可见，<br>默认支持的有<img src="http://opxo4bto2.bkt.clouddn.com/node_encoding_type.png" alt="supported_encoding_type"></p>
<p>很显然没有windows常用的GBK编码，那么这样就很容易产生两种不同的编码格式，只能一方迁就另一方。<br>之前的一个小项目就遇到这样一个问题，需要用户提供数据，但要求一个只会excel记录数据的普通人提供utf8编码的json格式数据实在太难为他了。最后折中的办法采用了CSV格式，原因无它，支持excel打开编辑。<br>但仍然存在一个问题，excel编辑完保存，会以默认非uf8编码格式保存，自带的保存转换也不生效，只能用一个土办法，记事本打开，另存为时指定utf8编码格式。但仅多这一个步骤也让用户叫苦不迭，偶尔忘记转码就会导致中文显示乱码。<br>因此，这个问题不得不解决。</p>
<h1 id="浅谈编码"><a href="#浅谈编码" class="headerlink" title="浅谈编码"></a>浅谈编码</h1><p>老实说，我对编码的了解无穷趋近于一无所知，所以真的是浅谈。我只知道编码不同是以不同的二进制数字表示字符，具体什么规则我真的是记不住，也无心去了解。从Node操作文件的API，我大胆来<code>猜测</code>一下它的工作流程。<br>读取文件时，API不管是<code>fs.readFile</code> 还是<code>fs.createReadStream</code><br>encoding默认均为null，即无编码，那就是不做任何处理，将码流原封不动的读取出来暂存。<br>但处理数据时，将buffer数据转为字符串处理时，默认是utf8, 并且node未提供GBK的转码方式（支持的转码格式见上图），那么问题就出现了，如果初始编码格式不是utf8，用utf8格式去解码，当然会出问题，就算我不懂编码我也知道，用一把锁的钥匙去开另一把不同的锁，打不开才是正常的。</p>
<h1 id="从源头解决问题"><a href="#从源头解决问题" class="headerlink" title="从源头解决问题"></a>从源头解决问题</h1><p>当出现乱码问题时，要知道问题的源头是用了解码格式与编码格式不匹配造成的，所有解决的问题就要两种</p>
<ul>
<li>改文件的编码方式，与解码格式匹配</li>
<li>该文件解析时的解码方式， 与编码格式匹配</li>
</ul>
<p>第一种是让数据的生产者去改，前面已经说过了，代价太大，成本过高，不切实际。<br>第二种就更头疼了，我也没办法让node支持GBK的转码啊。<br>因此，只能曲线救国了，中间加一层转码，得到用户的数据后先把它从GBK的码流转成utf8的码流，再进行解析操作，完美！</p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>搜一下能将将gbk转成utf8格式的包，搜到一个<code>iconv-lite</code>, 测试可用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> readableStream = fs.createReadStream(remote)</div><div class="line"><span class="keyword">var</span> writableStream = fs.createWriteStream(local)</div><div class="line"></div><div class="line">readableStream.on(<span class="string">'data'</span>,(chunk)=&gt;&#123;</div><div class="line">    <span class="keyword">var</span> unicodeString = iconv.decode(chunk, <span class="string">'GBK'</span>)</div><div class="line">    <span class="keyword">var</span> buf = Buffer.from(unicodeString)</div><div class="line">    <span class="keyword">if</span> (!writableStream.write(buf)) &#123;</div><div class="line">        readableStream.pause()</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">writableStream.on(<span class="string">'drain'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    readableStream.resume()</div><div class="line">&#125;);</div><div class="line"></div><div class="line">readableStream.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    writableStream.end()</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>核心就两句，先将码流以GBK的解码方式解成字符串，这很符合逻辑，GBK编码，GBK解码。<br><code>var unicodeString = iconv.decode(chunk, &#39;GBK&#39;)</code><br>再将字符串再转换成utf8码流。<br><code>var buf = Buffer.from(unicodeString)</code><br>你没有猜错，Buffer.from默认utf8编码，node中的输出应该都是默认这样的操作。</p>
<h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><p>这种写法必须保证数据来源必须始终是gbk编码的，如果提供了一个utf8编码的就会出问题，那怎么解决呢？说过了我也不懂。<br>但应该能很自然想到有没有一种方式判断文件的编码方式呢，尝试搜了一下，果然还是有的，测试可用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line">fs.readFile(<span class="string">'code.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,buffer</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(buffer[<span class="number">0</span>]==<span class="number">0xff</span>&amp;&amp;buffer[<span class="number">1</span>]==<span class="number">0xfe</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'unicode'</span>)</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(buffer[<span class="number">0</span>]==<span class="number">0xfe</span>&amp;&amp;buffer[<span class="number">1</span>]==<span class="number">0xff</span>)&#123;</div><div class="line">   　　<span class="built_in">console</span>.log(<span class="string">'unicode big endian'</span>)</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(buffer[<span class="number">0</span>]==<span class="number">0xef</span>&amp;&amp;buffer[<span class="number">1</span>]==<span class="number">0xbb</span>)&#123;</div><div class="line">　　　 <span class="built_in">console</span>.log(<span class="string">'utf8'</span>)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">   　　<span class="built_in">console</span>.log(<span class="string">'else'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>差不多意思就是，文件开头的2个字节可以判断是utf8还是unicode，虽然没有GBK的判断方法，但排除法勉强能解决问题。<br>因此，之前的代码可以重构下，先判断文件编码格式，如果是utf8就不用转码了，如果不是那就认为是gbk，需要转码。<br>如果仍然出现了乱码问题，那就甩锅给用户，肯定是他们打开的方式不对，绝对不是我的bug！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次经历对编码、解码、转码的概念基本了解了。</p>
<ul>
<li>编码：字符串-&gt; 码流</li>
<li>解码：码流 -&gt; 字符串</li>
<li>转码：码流 -&gt; 字符串 -&gt; 码流<br>也就是说目前还没有把一种编码格式的码流直接转成另一种的手段，只能用相应的解码方式先还原，再重新编码，这也是符合逻辑的。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> encoding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js events模块(下)]]></title>
      <url>/2017/events-final/</url>
      <content type="html"><![CDATA[<p>又一次来看这部分源码了，感觉每次依然有收获，再做一次总结，强行分成上中下三篇，内心毫无波澜，甚至有点想笑<br><a id="more"></a></p>
<h1 id="关于使用"><a href="#关于使用" class="headerlink" title="关于使用"></a>关于使用</h1><ul>
<li>直接引入 EventEmitter 类，new 一个对象来使用</li>
<li>从EventEmitter继承</li>
</ul>
<p>一般第二种居多，继承的方法很多，简单举例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(EventEmitter.prototype)</div></pre></td></tr></table></figure></p>
<p>现在obj对象就具备事件驱动的功能了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">obj.on(<span class="string">'test'</span>, ()=&gt;&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'receive event test'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">obj.emit(<span class="string">'test'</span>)</div></pre></td></tr></table></figure></p>
<h1 id="事件驱动的原理"><a href="#事件驱动的原理" class="headerlink" title="事件驱动的原理"></a>事件驱动的原理</h1><p>这是一个典型的面向对象的例子，一个对象具备监听和发送消息的方法，所以关键就是这些方法的实现了。<br>该对象的两个重要属性：</p>
<ul>
<li><code>_events</code>：初始化是一个空对象，用来存储事件名及对应的回调函数。key为事件名，value为回调函数，如果回调函数超过一个，则转为一个数组，用来保证顺序。</li>
<li><code>_maxListeners</code>: 注册的最大监听数，默认值为10，这是继承的一个类属性，通过Object.defineProperty()定义。</li>
</ul>
<p>每次监听事件，即向obj._events里增加一对值，触发事件时即根据事件名调用相应回调函数，如果回调是数组类型则按顺序调用内部函数，该顺序也与注册函数时的顺序保持了一致。</p>
<h1 id="实现技巧"><a href="#实现技巧" class="headerlink" title="实现技巧"></a>实现技巧</h1><p>了解原理后发现其实很简单，自己也可以写一个类似的包，但这个包几经修改到当前额版本，很多细节是值得学习和借鉴的。<br>自己动手用ES6的语法写了个简易版的该模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Events</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">this</span>._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">        <span class="keyword">this</span>._eventsCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>._maxListeners = <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getMaxListeners()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._maxListeners</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setMaxListeners(n)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> n !== <span class="string">'number'</span> || n &lt; <span class="number">0</span> || <span class="built_in">isNaN</span>(n))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span> (<span class="string">"\"n\" argument must be a positive number"</span>)</div><div class="line">        <span class="keyword">this</span>._maxListeners = n</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    on(type, listener)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span> (<span class="string">"\"n\" argument must be a positive number"</span>)</div><div class="line">        <span class="keyword">var</span> events= <span class="keyword">this</span>._events</div><div class="line">        <span class="keyword">var</span> existing = events[type]</div><div class="line">        <span class="keyword">if</span>(existing)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> existing === <span class="string">'function'</span>)</div><div class="line">                existing = [existing, listener]</div><div class="line">            <span class="keyword">else</span></div><div class="line">                existing.push(listener)</div><div class="line">        &#125;<span class="keyword">else</span></div><div class="line">            existing = listener</div><div class="line">        </div><div class="line">        <span class="keyword">this</span>._eventsCount++</div><div class="line">        <span class="keyword">if</span>(!existing.warn)&#123;</div><div class="line">            <span class="keyword">var</span> m = <span class="keyword">this</span>.getMaxListeners()</div><div class="line">            <span class="keyword">if</span>(m &amp;&amp; m &lt; existing.length)&#123;</div><div class="line">                existing.warned = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">const</span> w = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Possible EventEmitter memory leak detected. '</span> +</div><div class="line">                                    <span class="string">`<span class="subst">$&#123;existing.length&#125;</span> <span class="subst">$&#123;<span class="built_in">String</span>(type)&#125;</span> listeners `</span> +</div><div class="line">                                    <span class="string">'added. Use emitter.setMaxListeners() to '</span> +</div><div class="line">                                    <span class="string">'increase limit'</span>);</div><div class="line">                w.name = <span class="string">'MaxListenersExceededWarning'</span>;</div><div class="line">                w.emitter = <span class="keyword">this</span>;</div><div class="line">                w.type = type;</div><div class="line">                w.count = existing.length;</div><div class="line">                process.emitWarning(w);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        events[type] = existing</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    emit(type)&#123;</div><div class="line">        <span class="keyword">var</span> events = <span class="keyword">this</span>._events</div><div class="line">        <span class="keyword">var</span> handler = events[type]</div><div class="line">        <span class="keyword">if</span>(!handler)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        <span class="keyword">var</span> len = <span class="built_in">arguments</span>.length;</div><div class="line">        <span class="keyword">var</span> args = <span class="keyword">new</span> <span class="built_in">Array</span>(len - <span class="number">1</span>)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++)</div><div class="line">          args[i - <span class="number">1</span>] = <span class="built_in">arguments</span>[i];</div><div class="line">        <span class="keyword">var</span> isFn = <span class="keyword">typeof</span> handler === <span class="string">'function'</span></div><div class="line">        <span class="keyword">if</span>(isFn)&#123;</div><div class="line">            handler.apply(<span class="keyword">this</span>, args)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            handler.forEach(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</div><div class="line">                v.apply(<span class="keyword">this</span>, args)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是个十分简陋的实现，对比源码就能发现很多细节非常值得推敲，这里重点说一个。</p>
<h2 id="Once的封装"><a href="#Once的封装" class="headerlink" title="Once的封装"></a>Once的封装</h2><p>源码实现了只触发一次回调函数，并几乎没有修改原来的接口。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">EventEmitter.prototype.once = <span class="function"><span class="keyword">function</span> <span class="title">once</span>(<span class="params">type, listener</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>)</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'"listener" argument must be a function'</span>);</div><div class="line">  <span class="keyword">this</span>.on(type, _onceWrap(<span class="keyword">this</span>, type, listener));</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>完整复用了<code>on</code>的接口, _onceWrap的实现无疑值得学习。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_onceWrap</span>(<span class="params">target, type, listener</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> state = &#123; <span class="attr">fired</span>: <span class="literal">false</span>, <span class="attr">wrapFn</span>: <span class="literal">undefined</span>, target, type, listener &#125;;</div><div class="line">  <span class="keyword">var</span> wrapped = onceWrapper.bind(state);</div><div class="line">  wrapped.listener = listener;</div><div class="line">  state.wrapFn = wrapped;</div><div class="line">  <span class="keyword">return</span> wrapped;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onceWrapper</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.fired) &#123;</div><div class="line">    <span class="keyword">this</span>.target.removeListener(<span class="keyword">this</span>.type, <span class="keyword">this</span>.wrapFn);</div><div class="line">    <span class="keyword">this</span>.fired = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">switch</span> (<span class="built_in">arguments</span>.length) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.listener.call(<span class="keyword">this</span>.target);</div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.listener.call(<span class="keyword">this</span>.target, <span class="built_in">arguments</span>[<span class="number">0</span>]);</div><div class="line">      <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.listener.call(<span class="keyword">this</span>.target, <span class="built_in">arguments</span>[<span class="number">0</span>], <span class="built_in">arguments</span>[<span class="number">1</span>]);</div><div class="line">      <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.listener.call(<span class="keyword">this</span>.target, <span class="built_in">arguments</span>[<span class="number">0</span>], <span class="built_in">arguments</span>[<span class="number">1</span>],</div><div class="line">                                  <span class="built_in">arguments</span>[<span class="number">2</span>]);</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">const</span> args = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">arguments</span>.length);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; ++i)</div><div class="line">          args[i] = <span class="built_in">arguments</span>[i];</div><div class="line">        <span class="keyword">this</span>.listener.apply(<span class="keyword">this</span>.target, args);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>_onceWrap返回的是绑定了this的onceWrapper函数，存在<code>this._events</code>中。state对象做了两件事，提供this以及保存地址。<br>保存地址方面尤为巧妙，保存了自身、调用对象以及需要传递的参数。<br>其中<code>onceWrapper</code>函数中，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.target.removeListener(<span class="keyword">this</span>.type, <span class="keyword">this</span>.wrapFn);</div><div class="line"><span class="keyword">this</span>.fired = <span class="literal">true</span>;</div></pre></td></tr></table></figure></p>
<p>这两行只保留任何一行也不会影响结果。双重保障，即使删除listener未成功也能防止其被二次调用。</p>
<p>再总结一点，从源码可知，调用回调函数时都是绑定了this，指向调用对象本身的。因此，如果想要在回调函数中使用调用者对象，<br>则不适合使用箭头函数。箭头函数绑定父上下文，给回调函数使用apply或call绑定this无任何效果。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于events模块应该不会再有总结了，毕竟题目都用完了。感觉自己还是基本掌握原理及使用的。<br>脑子里留下多少算多少，实在不行就再看一遍，不然写在这里岂不白写了。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Events </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> events </tag>
            
            <tag> EventEmitter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中的元类]]></title>
      <url>/2017/python-metaclass/</url>
      <content type="html"><![CDATA[<p>python中的元类在大多数场景里是用不到的，但理解元类有助于深入理解python面向对象编程中实例的创建过程，应该当做基础知识掌握。</p>
<a id="more"></a>
<h2 id="python中的类"><a href="#python中的类" class="headerlink" title="python中的类"></a>python中的类</h2><p>大多数语言里，类就是一组用来描述如何生成一个对象的代码段,python里也不例外。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectCreator</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">obj = ObjectCreator()</div><div class="line">print(obj) <span class="comment"># &lt;__main__.ObjectCreator object at 0x0392E270&gt;</span></div></pre></td></tr></table></figure></p>
<p>除此之外，python的类同时也是一种对象，用<code>class</code>关键字声明类时，内存中就创建了一个对象，该对象具备在执行时创建一个实例对象的能力，但本质上仍然是一个对象，因此仍然可以进行如下操作：</p>
<ul>
<li>赋值给变量</li>
<li>增加它的属性</li>
<li>作为函数参数传递</li>
</ul>
<p>最重要的是，它是一个对象，那么就可以动态的创建它<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_class_by_name</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">if</span> name == <span class="string">'foo'</span>:</div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> Foo</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(object)</span>:</span></div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">return</span> Bar</div><div class="line"></div><div class="line">myClass = create_class_by_name(<span class="string">'foo'</span>)</div></pre></td></tr></table></figure></p>
<p>以上代码动态的创建了一个类，这样的做法显然还不够。</p>
<p>回到类的定义，<code>类就是一组用来描述如何生成一个对象的代码段</code></p>
<p>那有没有描述如何生成一个类的代码段呢，答案当然是存在的，因为类本身也是对象。</p>
<p><code>一组用来描述如何生成一个类的代码段</code>叫做元类(metaclass)</p>
<h2 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h2><p>简言之，实例对象是一个类的实例，类则是元类的实例</p>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p><code>type</code>常用的用法是作为一个全局函数，得到对象类型，但它同时具备创建类的作用，即通过参数类型实现了函数的重载</p>
<pre><code>type(className, (base,), {property:value})
</code></pre><p>当且仅当传入三个参数时，返回创建的类</p>
<ul>
<li>类名字符串，</li>
<li>需要继承的父类元祖(可以为空)</li>
<li>类属性字典。</li>
</ul>
<p>看到这个api应该不用举例了，可以非常方便的创建和继承类</p>
<p>所以可以说<code>type</code>是一个类，和<code>int</code>,<code>str</code>等类一样。</p>
<p>同时还是一个<code>metaclass</code>，因为它的实例仍然是一个类</p>
<h3 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h3><p>python里的一切皆对象，对象都是从一个类创建而来，对象本身也会携带创建它的类的信息, 这也是<code>__class__</code>属性的功能<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = 5</div><div class="line">&gt;&gt;&gt; a.__class__</div><div class="line">&lt;type 'int'&gt;</div><div class="line">&gt;&gt;&gt; a = 'hello'</div><div class="line">&gt;&gt;&gt; a.__class__</div><div class="line">&lt;type 'str'&gt;</div><div class="line">&gt;&gt;&gt; def foo(): pass</div><div class="line">...</div><div class="line">&gt;&gt;&gt; foo.__class__</div><div class="line">&lt;type 'function'&gt;</div><div class="line">&gt;&gt;&gt; class Bar(object): pass</div><div class="line">...</div><div class="line">&gt;&gt;&gt; b = Bar()</div><div class="line">&gt;&gt;&gt; b.__class__</div><div class="line">&lt;class '__main__.Bar'&gt;</div><div class="line">&gt;&gt;&gt; a = 6</div><div class="line">&gt;&gt;&gt; type(a) is a.__class__</div><div class="line">True</div><div class="line">&gt;&gt;&gt; a.__class__.__class__</div><div class="line">&lt;type 'type'&gt;</div></pre></td></tr></table></figure></p>
<p>注意，<code>__class__</code>的返回值并非字符串，而是和type作为对象类型判断的函数返回值相同，是一个对象，该对象是由<code>type</code>元类直接创建, </p>
<p>如果上述最后一个例子有点绕，那再看一个例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Bar = type(<span class="string">'Bar'</span>, (), &#123;&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Bar.__class__</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int.__class__</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str.__class__</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>总结来说，type作为普通函数，可以打印出创建该对象的类的类型,如’int’, ‘str’等</p>
<p>但类自身也是一个对象，也是被创建的，创建类的类被称为元类，它的类型是<code>&lt;type &#39;type&#39;&gt;</code></p>
<h2 id="metaclass-1"><a href="#metaclass-1" class="headerlink" title="__metaclass__"></a><code>__metaclass__</code></h2><p><code>__metaclass__</code>可以是一个模块级别的属性，在顶层作用域会影响模块类所有类的创建</p>
<p>也可以作为类属性，那么它将仅影响该类的创建</p>
<p>原理如下：</p>
<p>当类声明后，在内存中创建前，会先寻找<code>__metaclass__</code>属性，<br>如果存在，就用它来创建类，否则使用内建的<code>type</code>来创建该类</p>
<p>因此，<code>__metaclass__</code>属性指向的是一个用来创建类的元类，这很符合它的命名</p>
<p>具体来操作下，Take One：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myMetaclass</span><span class="params">(name, base, attr)</span>:</span></div><div class="line">    <span class="keyword">return</span> type(name, base, attr)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = myMetaclass</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">print(Foo.__class__)</div><div class="line"></div><div class="line">foo = Foo()</div><div class="line"></div><div class="line">print(foo.__class__)</div><div class="line"></div><div class="line"><span class="comment"># &lt;type 'type'&gt;</span></div><div class="line"><span class="comment"># &lt;class '__main__.Foo'&gt;</span></div></pre></td></tr></table></figure></p>
<p>没错，我是来搞笑的……什么都没干，但是演示了一把元类的是如何生效的，以及<code>__metaclass__</code>的使用</p>
<p>再来写个有用的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myMetaclass</span><span class="params">(name, base, attr)</span>:</span></div><div class="line">    attr[<span class="string">'slogan'</span>] = <span class="string">'hello world'</span></div><div class="line">    <span class="keyword">return</span> type(name, base, attr)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = myMetaclass</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">print(Foo.slogan)</div><div class="line"></div><div class="line">foo = Foo()</div><div class="line"></div><div class="line">print(foo.slogan)</div><div class="line"><span class="comment"># hello world</span></div><div class="line"><span class="comment"># hello world</span></div></pre></td></tr></table></figure></p>
<p>操作空间很大，<code>name</code>,<code>base</code>, <code>attr</code> 都是可操作对象，<br>举例是给类添加了一个固定属性，还可以动态的更改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myMetaclass</span><span class="params">(name, base, attr)</span>:</span></div><div class="line">    <span class="keyword">if</span> attr.get(<span class="string">'slogan'</span>):</div><div class="line">        attr[<span class="string">'slogan'</span>] = <span class="string">'goodbye world'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        attr[<span class="string">'slogan'</span>] = <span class="string">'hello world'</span></div><div class="line">    <span class="keyword">return</span> type(name, base, attr)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = myMetaclass</div><div class="line">    slogan = <span class="string">"you can't see me"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">print(Foo.slogan) </div><div class="line"></div><div class="line">foo = Foo()</div><div class="line"></div><div class="line">print(foo.slogan)</div><div class="line"></div><div class="line"><span class="comment"># goodbye world</span></div><div class="line"><span class="comment"># goodbye world</span></div><div class="line"><span class="comment"># 如果注释掉 slogan = "you can't see me"，打印会是两个 hello world</span></div></pre></td></tr></table></figure></p>
<p>这个例子展示了动态修改类属性，根据这个实例，可以大胆推断：</p>
<p>类在创建前会加载所有属性和方法，存储在一个字典中，集中所有父类到一个元祖中，然后再调用元类创建实例</p>
<p>总的来说，自定义元类的发挥作用的流程是：</p>
<ul>
<li>拦截类的创建</li>
<li>修改类, 可操作的内容有name，base，attr三个对象</li>
<li>返回修改后的类</li>
</ul>
<p>但现在的实现并非一个类，因为<code>myMetaclass</code>是一个函数，还可以再改进</p>
<h2 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h2><p>上面说了<code>__metaclass__</code>实现了动态修改类，但不太算面向对象的语法。还有更简洁的方式，那就是通过定义类的<code>__new__</code>方法</p>
<h3 id="new"><a href="#new" class="headerlink" title="__new__"></a><code>__new__</code></h3><p>简单来说，一个类的实例对象是<code>__new__</code>和<code>__init__</code>方法共同创造的。<br>前者创建,后者完成初始化。最后返回该对象。也就是说最终返回的对象就是<code>__new__</code>方法创建的那个。</p>
<p>来一段官方文档解释</p>
<pre><code>`__new__`方法继承自`object.__new__(cls[,...])`, 调用创建类`cls`的实例。
该静态方法接受一个`需要返回的对象的类`cls作为第一个参数，剩余参数都会被传递给对象构造表达式。
返回值应该是一个新的对象实例（通常是cls的实例）

典型用法是，以合适的参数调用超类的`__new__`方法`super(currentclass, cls).__new__(cls[, ...])`创建一个类的新实例，然后可以做一些修改，最后返回该实例

如果`__new__`返回的是cls的实例，这个实例的`__init__()`会以`__init__(self[,...])`的形式调用，`self`即新创建的对象，后续的参数即是之前传给`__new__`的剩余参数

如果`__new__`返回的不是cls的实例，那么实例的`__init__()`将不会被调用

`__new__`主要意图是那些让不可变类型（例如 int, str, tuple）的子类可以自定义实例的创建。通常也会在自定义元类中被重写，从而达到自定义类的创建
</code></pre><p>这一段我自行翻译如上，原文见 <a href="https://docs.python.org/2.7/reference/datamodel.html?highlight=__new__#object.__new__" target="_blank" rel="external"><code>object.__new__(cls[, ...])</code></a></p>
<h3 id="init"><a href="#init" class="headerlink" title="__init__"></a><code>__init__</code></h3><p><a href="https://docs.python.org/2.7/reference/datamodel.html?highlight=__new__#object.__init__" target="_blank" rel="external">官方文档</a> 翻译如下：</p>
<pre><code>在实例被(`__new__`)创建后调用，参数均将被传递给类构造表达式。
如果该类所继承的基类也存在`__init__`方法，那么必须显式的调用该方法以确保实例的基类部分得到初始化。
例如`Baseclass.__init__(self[,args...])`
由于`__new__()`和`__init__()`共同作用创建的对象（前者创建，后者定制）
所以`__init__`的返回值一般为`None`，如果不是，将会在运行时抛出`TypeError`
</code></pre><p>总之，继承类需要将新创建的对象，作为基类的初始化方法的第一个参数传入并调用，从而完成继承。</p>
<p>这个过程基类并未产生实例，只是将静态方法<code>__init__</code>绑定子类创建的对象调用，完成对象的”加工”</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>举例来理解上面两段的官方文档<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">print</span> cls </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self</div><div class="line"></div><div class="line">obj = MyClass()</div><div class="line">print(obj)</div><div class="line"><span class="comment"># &lt;class '__main__.MyClass'&gt;</span></div><div class="line"><span class="comment"># None</span></div></pre></td></tr></table></figure></p>
<p>可以看到，<code>__new__</code> 方法返回的打印的cls就是定义的<code>MyClass</code>，未定义返回对象，所有obj的值为<code>None</code>。<br>又因为返回值非cls的实例，所以<code>__init__</code> 方法根本没被调用</p>
<p>继续实践<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, arg)</span>:</span></div><div class="line">        cls_instance = object.__new__(cls)</div><div class="line">        cls_instance.arg = arg</div><div class="line">        <span class="keyword">return</span> cls_instance</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, arg)</span>:</span></div><div class="line">        print(self.arg)</div><div class="line">        self.foo = arg + <span class="string">' world'</span></div><div class="line"></div><div class="line">obj = MyClass(<span class="string">'hello'</span>)</div><div class="line">print(obj.arg)</div><div class="line">print(isinstance(obj, MyClass))</div><div class="line"><span class="comment"># hello</span></div><div class="line"><span class="comment"># hello world</span></div><div class="line"><span class="comment"># True</span></div></pre></td></tr></table></figure></p>
<p>这一段应该很好的解释了python类创建对象的过程</p>
<ul>
<li>创建之前，首先寻找有没有实现<code>__new__</code>方法，有的话直接调用，随后根据条件判断是否调用<code>__init__</code>方法</li>
<li>如果没有重写同名类方法，则调用内部机制（这里以<code>object.__new__(cls[, ...args])</code>演示）创建类的实例并返回</li>
<li>如果返回的实对象是cls的实例，且定义了<code>__init__()</code>方法，随后该实例对象会被继续加工</li>
</ul>
<h4 id="实例小结"><a href="#实例小结" class="headerlink" title="实例小结"></a>实例小结</h4><ul>
<li>类创建时<code>MyClass(&#39;hello&#39;)</code>, 传递给<code>__new__()</code>的参数是当前类和后续参数，传递给<code>__init__()</code>的参数是创建的实例和之前的后续参数</li>
<li><code>object.__new__(cls[, ...args])</code>会返回cls的实例</li>
<li><code>__init__()</code>方法只是接受实例对象做加工，并不创建也不返回该对象。</li>
<li>由上一条可知，如果创建的对象是不可变对象，那么<code>__init__</code>方法将完全不起作用</li>
</ul>
<p>大多数情况下，是不需要使用到<code>__new__</code>方法的，它的应用场景如官方所言主要是两个</p>
<ul>
<li>自定义一些immutable对象的创建</li>
<li>还有就是前面重点说到的自定义元类了</li>
</ul>
<h4 id="动态修改类实例的创建"><a href="#动态修改类实例的创建" class="headerlink" title="动态修改类实例的创建"></a>动态修改类实例的创建</h4><p>举例说明，创建一个字符串类，要求继承自<code>str</code>类，接受一个字符串参数，返回值为该字符串加上定制的前缀<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span><span class="params">(str)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, arg, prefix=<span class="string">"hello "</span>)</span>:</span></div><div class="line">        print(isinstance(self, str))</div><div class="line">        str.__init__(self, prefix + arg)</div><div class="line"></div><div class="line">obj = MyString(<span class="string">'world'</span>)</div><div class="line">print(obj)</div></pre></td></tr></table></figure></p>
<p>上述代码很遗憾不会有预期的效果。</p>
<p>分析上述代码的实际工作流程是</p>
<ul>
<li>调用<code>MyString(&#39;world&#39;)</code>，不存在<code>__new__</code>方法，调用内部机制创建实例对象</li>
<li>内部机制不知道没关系（一说是type类），但<code>__init__</code>调用前实例对象必然已经创建，必然是<code>str</code>的实例，已然不可更改</li>
<li>再调用<code>__init__</code>方法，打印证实了之前的猜想</li>
</ul>
<p>因此想要实现该需求，必须在字符串对象创建时就加上前缀，一旦创建完成便是不可变对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class MyString(str):</div><div class="line">    def __new__(cls, arg, prefix='hello '):</div><div class="line">        return str.__new__(cls, prefix + arg)</div><div class="line"></div><div class="line">obj = MyString('world)</div><div class="line">print(obj)</div><div class="line">print(isinstance(obj, MyString))</div><div class="line">print(isinstance(obj, str))</div><div class="line">print(issubclass(MyString, str))</div></pre></td></tr></table></figure>
<p>完成了功能，顺便验证了一点，<code>str.__new__(cls[,...])</code>方法不仅可以创建cls的实例，而且cls会从str继承</p>
<p>一般为了代码可维护性以及对多重继承的支持，会选择<code>super</code>的写法<code>super(MyString, cls).__new__(cls, prefix+arg)</code></p>
<p>了解了<code>__new__</code>的用法,对比<code>__metaclass__</code>的用法,再次改写之前的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = myMetaclass</div><div class="line">    slogan = <span class="string">"you can't see me"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>实现如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    slogan = <span class="string">"you can't see me"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">if</span> hasattr(cls, <span class="string">'slogan'</span>):</div><div class="line">            cls.slogan = <span class="string">'goodbye world'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            cls.slogan = <span class="string">'hello world'</span></div><div class="line">        <span class="keyword">return</span> super(Foo, cls).__new__(cls)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">print(Foo.slogan)</div><div class="line"></div><div class="line">foo = Foo()</div><div class="line"></div><div class="line">print(foo.slogan)</div><div class="line"></div><div class="line"><span class="comment"># you can't see me</span></div><div class="line"><span class="comment"># goodbye world</span></div></pre></td></tr></table></figure></p>
<p>可以看出二者和<code>__new__</code>不同的地方：</p>
<ul>
<li><code>__metaclass__</code>会拦截类的创建，如果属性值存在则调用</li>
<li><code>__new__</code>只是在运行时修改类，未调用前是不会生效的，达到动态修改的目的</li>
</ul>
<p>除此之外，<code>__new__</code>最常用的的用法是实现一个单例类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'instance'</span>):</div><div class="line">            cls.instance = object.__new__(cls)</div><div class="line">        <span class="keyword">return</span> cls.instance</div><div class="line"></div><div class="line">obj1 = Singleton()</div><div class="line">obj2 = Singleton()</div><div class="line"></div><div class="line">obj1.key = <span class="string">'value'</span></div><div class="line"><span class="keyword">print</span> obj1.key, obj2.key</div><div class="line"></div><div class="line"><span class="keyword">print</span> obj1 <span class="keyword">is</span> obj2</div></pre></td></tr></table></figure></p>
<h4 id="自定义元类"><a href="#自定义元类" class="headerlink" title="自定义元类"></a>自定义元类</h4><p>自定义元类, 以type元类为基类即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMetachass</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, base, attrs)</span>:</span></div><div class="line">        print(attrs[<span class="string">'slogan'</span>])</div><div class="line">        attrs[<span class="string">'slogan'</span>] = <span class="string">'guess what'</span></div><div class="line">        <span class="keyword">return</span> type.__new__(cls, name, base, attrs)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = MyMetachass</div><div class="line">    slogan = <span class="string">"you can't see me"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">print(Foo.slogan)</div><div class="line"></div><div class="line">foo = Foo()</div><div class="line"></div><div class="line">print(foo.slogan)</div></pre></td></tr></table></figure></p>
<p>效果和最开始的例子相同，也更符合面向对象的写法</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一篇的内容有点多，本来也是想到哪儿写到哪儿，本来只想写metaclass的，一不小心没把持住……当然也还有很多没有展开，我猜太长自己都没耐心看，再次提炼一下本文中心思想。</p>
<ul>
<li>元类(metaclass)就是实例为class的class</li>
<li>type接收一个参数时是返回对象类型，接收三个参数时是一个元类。两种情况下的返回值均为type类</li>
<li>对象的<code>__class__</code>属性反映了创造它的类的类型，返回值是type类</li>
<li><code>__metaclass__</code>可以作为类属性，也可以作为模块属性，会拦截类的创建，会调用属性值来完成类的创建，属性值为一个可调用对象，接受的参数和type元类相同</li>
<li><code>__metaclass__</code>的效果会隐式的继承到子类，也会拦截子类的创建</li>
<li><code>__new__(cls[,...])</code>是<code>object</code>上的静态方法，作用是返回接受的第一个参数类的实例对象。可重写该方法动态的修改类</li>
<li><code>__init__(self[,...])</code>, 第一个参数为<code>__new__()</code>返回的对象，完成对象的初始化</li>
<li><code>__metaclass__</code>和<code>__new__()</code>可以联合使用，关键点在于将type看成一个类，可以从它继承进而生成定制元类</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> metaclass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RobotFramework Library API]]></title>
      <url>/2017/rf-library/</url>
      <content type="html"><![CDATA[<p>RF本身是用Python写的，它的扩展库也可以用Python来写。<br>如果是跑在Jython上，也是可以用java来扩展。<br>纯python的扩展具备通用性，本文也主要总结基于python的RF扩展库的API，RF版本为截止到当前最新的V3.0.2<br><a id="more"></a></p>
<h2 id="API-分类"><a href="#API-分类" class="headerlink" title="API 分类"></a>API 分类</h2><p>RF有三种不同的库API:</p>
<ul>
<li>静态API, 最常用的。提供一个包或者一个类，里面的公有方法名会被映射为<code>关键字名</code></li>
<li>动态API, 动态的生成和执行关键字，除了运行时生成的特点，其他和静态API相同</li>
<li>混合API, 即动态的引用静态API创建的关键字</li>
</ul>
<p>本文仅总结静态API,其它两类差不太多，只是有一些炫酷的用法而已</p>
<h2 id="创编Library库"><a href="#创编Library库" class="headerlink" title="创编Library库"></a>创编Library库</h2><p>Library的名字导入后会和包名或者类名保持一致</p>
<p>eg：现在引入一个Python库 MyLibrary(一个文件，MyLibrary.py)，<br>它将创建一个名字也为MyLibrary的库</p>
<h3 id="编写类"><a href="#编写类" class="headerlink" title="编写类"></a>编写类</h3><p>通常一个包里包含的是一个类，如果类名和包名相同，RF允许在导入时省略类名</p>
<p>如果类名和包名不一致，则Library名需要补全导入的类名</p>
<p>举例说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Test.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">'''testing library'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self, str1, str2)</span>:</span></div><div class="line">        <span class="keyword">return</span> str1 + str2</div></pre></td></tr></table></figure></p>
<p>现在引入<code>Test.py</code>, 则库名为<code>Test</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Library     Test</div></pre></td></tr></table></figure></p>
<p>此时<code>foo</code>关键字可以直接使用，接受两个参数返回拼接后的内容</p>
<p>但如果改变类名为<code>Foo</code>, 在执行就会报错<code>找不到关键字foo</code></p>
<p>这个时候两个解决方案，将类名改成和包名一致，或者更改导入库如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Library     Test.Foo</div></pre></td></tr></table></figure></p>
<p>其实，之前的导入库相当于<code>Test.Test</code>的别名</p>
<h3 id="编写函数和变量"><a href="#编写函数和变量" class="headerlink" title="编写函数和变量"></a>编写函数和变量</h3><p>除了类之外也可以创建变量和函数, 包命名空间里的方法也会变成关键字</p>
<p>包括导入的库名<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># test.py</span></div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread</div><div class="line"></div><div class="line">bar = <span class="number">233</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></div></pre></td></tr></table></figure></p>
<p>分别引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Library           test</div><div class="line">Variables         test.py</div></pre></td></tr></table></figure></p>
<p><code>current_thread</code>和<code>test</code>会成为关键字</p>
<p><code>${bar}</code>会成为可使用的变量</p>
<p>函数、变量不能和类同时导出</p>
<p>原因我猜大概是导出类时其实是精确指定类名了，自然不会包括其他内容</p>
<p>如果不想current_thread被导出，有两种方法</p>
<ul>
<li>导入时，写成<code>import threading</code>,使用时写成<code>threading.current_thread()</code></li>
<li>通过包属性<code>__all__</code>限定导出的方法和变量</li>
</ul>
<h3 id="库参数"><a href="#库参数" class="headerlink" title="库参数"></a>库参数</h3><p>如果是导入的是一个类，自然是可以接受参数的，这些参数会被传递给构造器创建类实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*** Settings ***</div><div class="line">Library    MyLibrary     10.0.0.1    8080</div><div class="line">Library    AnotherLib    $&#123;VAR&#125;</div></pre></td></tr></table></figure></p>
<p>参数会保证顺序和个数传递，这个很好理解</p>
<p>需要注意的是RF里默认的参数类型是字符串，所以传递的数字会被转换</p>
<h3 id="库引入方式"><a href="#库引入方式" class="headerlink" title="库引入方式"></a>库引入方式</h3><p>一般Library为一个文件或第三方库，引入的方式有两种：</p>
<ul>
<li>在测试套里直接引入<code>Library</code></li>
<li>在测试套里引入<code>Resource</code>，在Resource文件里引入Library</li>
</ul>
<p>第二种方式多用于多处引入或批量引入</p>
<h3 id="库作用域"><a href="#库作用域" class="headerlink" title="库作用域"></a>库作用域</h3><p>当引入的库是各种类时，它们是可以有一个内部状态的，内部状态会在初始化和关键字执行时被改变，同时也会影响关键字的行为。</p>
<p>说简单点就是，关键字执行其实是执行类实例的方法，那其实就是这个类实例是每个用例一个实例还是大家共有一个实例的问题</p>
<p>默认行为是每个用例一个实例，互不影响</p>
<p>但这个行为也是可控的，通过一个类属性<code>ROBOT_LIBRARY_SCOPR</code></p>
<p>该属性有三个值</p>
<ul>
<li><code>TEST_CASE</code>, 默认值</li>
<li><code>TEST_SUIT</code>, 一个测试套共用一个实例</li>
<li><code>GLOBAL</code>, 全局单例</li>
</ul>
<p>eg：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleLibrary</span>:</span></div><div class="line"></div><div class="line">    ROBOT_LIBRARY_SCOPE = <span class="string">'TEST SUITE'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self._counter = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self)</span>:</span></div><div class="line">        self._counter += <span class="number">1</span></div><div class="line">        <span class="keyword">print</span> self._counter</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear_counter</span><span class="params">(self)</span>:</span></div><div class="line">        self._counter = <span class="number">0</span></div></pre></td></tr></table></figure></p>
<h3 id="库版本"><a href="#库版本" class="headerlink" title="库版本"></a>库版本</h3><p>同库作用域，通过类属性<code>ROBOT_LIBRARY_VERSION</code>定义</p>
<p>如果不存在会尝试从<code>__version__</code>属性读取</p>
<h3 id="文档格式化"><a href="#文档格式化" class="headerlink" title="文档格式化"></a>文档格式化</h3><p>同上，通过类型<code>ROBOT_LIBRARY_DOC_FORMAT</code>指定文档格式，后续可以使用<code>Libdoc</code>工具生成对应格式的文档</p>
<p>属性值大小写不敏感</p>
<p>可能的值有<code>ROBOT</code>(default),<code>HTML</code>,<code>TEXT</code></p>
<p>也可以使用第三方工具<code>docutil</code>,属性值为<code>reST</code></p>
<h3 id="创建静态关键字"><a href="#创建静态关键字" class="headerlink" title="创建静态关键字"></a>创建静态关键字</h3><p>前面说过，如果是静态API，RF会自动的将引入库里的公有方法转化为关键字</p>
<p>这里面仍有一些细节需要说明</p>
<ul>
<li>以下划线开头的方法会被忽略</li>
<li>关键字的解析大小写不敏感</li>
<li>关键字中的下划线和空格会被忽略</li>
</ul>
<p>eg：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_helper_method</span><span class="params">(self, arg)</span>:</span></div><div class="line">        <span class="keyword">return</span> arg.upper()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"Hello, %s!"</span> % name</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_nothing</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>引用时<code>_helper_method</code>不能被使用</p>
<p><code>hello</code>方法对应的关键字可以是<code>hello</code>, <code>Hello</code>, <code>h e l l o</code></p>
<p><code>do_nothing</code>或<code>doNothing</code>的关键字名都可以是<code>Do Nothing</code></p>
<h4 id="自定义关键字名"><a href="#自定义关键字名" class="headerlink" title="自定义关键字名"></a>自定义关键字名</h4><p>关键名也可以按照自己的意愿命名</p>
<p>实现上最先想到的应该就是装饰器了，实际也是如此</p>
<p>通过<code>robot.api.deco.keyword</code>在方法上设置一个<code>robot_name</code>属性实现</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> robot.api.deco <span class="keyword">import</span> keyword</div><div class="line"></div><div class="line"><span class="meta">@keyword(u'登录')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username, password)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div></pre></td></tr></table></figure>
<p>使用时, 直接使用<code>登录</code>即可，原来<code>login</code>不再映射为关键字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*** Test Cases ***</div><div class="line">My Test</div><div class="line">    登录   $&#123;username&#125;    $&#123;password&#125;</div></pre></td></tr></table></figure></p>
<p>从RF v3.0.2开始，通过这种方式，即使是以下划线开头的私有方法也能转换为可用关键字</p>
<h5 id="关键字嵌套参数"><a href="#关键字嵌套参数" class="headerlink" title="关键字嵌套参数"></a>关键字嵌套参数</h5><p>关键字还可以接受嵌套参数，示例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> robot.api.deco <span class="keyword">import</span> keyword</div><div class="line"></div><div class="line"><span class="meta">@keyword('Add $&#123;quantity:\d+&#125; Copies Of $&#123;item&#125; To Cart')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_copies_to_cart</span><span class="params">(quantity, item)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*** Test Cases ***</div><div class="line">My Test</div><div class="line">    Add 7 Copies Of Coffee To Cart</div></pre></td></tr></table></figure></p>
<h3 id="打印信息"><a href="#打印信息" class="headerlink" title="打印信息"></a>打印信息</h3><p>异常信息会被打印，除此之外，向标准输出流(stdout/stderr)写入的信息也会被写入log文件，同时也还可定义不同的log level</p>
<h4 id="打印级别"><a href="#打印级别" class="headerlink" title="打印级别"></a>打印级别</h4><p>默认是<code>INFO</code>, 除此之外还有<code>TRACE</code>, <code>DEBUG</code>,<code>WARN</code>,<code>ERROR</code>,<code>HTML</code></p>
<p><code>WARN</code>,<code>ERROR</code>级别的信息会被自动写入到控制台</p>
<p>如果是<code>HTML</code>, 则支持所有html语法的展现，eg：<code>&lt;b&gt;foo&lt;/b&gt;</code>，但需要慎用<code>&lt;table&gt;</code>便签，支持不是很好</p>
<h4 id="打印到控制台"><a href="#打印到控制台" class="headerlink" title="打印到控制台"></a>打印到控制台</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_keyword</span><span class="params">(arg)</span>:</span></div><div class="line">   sys.__stdout__.write(<span class="string">'Got arg %s\n'</span> % arg)</div><div class="line"></div><div class="line"><span class="comment"># The final option is using the public logging API:</span></div><div class="line"><span class="keyword">from</span> robot.api <span class="keyword">import</span> logger</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_to_console</span><span class="params">(arg)</span>:</span></div><div class="line">   logger.console(<span class="string">'Got arg %s'</span> % arg)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_to_console_and_log_file</span><span class="params">(arg)</span>:</span></div><div class="line">   logger.info(<span class="string">'Got arg %s'</span> % arg, also_console=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_with_html_format</span><span class="params">()</span>:</span></div><div class="line">    logger.info(<span class="string">'&lt;i&gt;This&lt;/i&gt; is a boring example'</span>, html=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>直接使用<code>print</code>函数也行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'Hello from a library.'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'*WARN* Warning from a library.'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'*ERROR* Something unexpected happen that may indicate a problem in the test.'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'*INFO* Hello again!'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'This will be part of the previous message.'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'*INFO* This is a new message.'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'*INFO* This is &lt;b&gt;normal text&lt;/b&gt;.'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'*HTML* This is &lt;b&gt;bold&lt;/b&gt;.'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'*HTML* &lt;a href="http://robotframework.org"&gt;Robot Framework&lt;/a&gt;'</span></div></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">16:18:42.123	INFO	Hello from a library.</div><div class="line">16:18:42.123	WARN	Warning from a library.</div><div class="line">16:18:42.123	ERROR	Something unexpected happen that may indicate a problem in the test.</div><div class="line">16:18:42.123	INFO	Hello again!</div><div class="line">This will be part of the previous message.</div><div class="line">16:18:42.123	INFO	This is a new message.</div><div class="line">16:18:42.123	INFO	This is &lt;b&gt;normal text&lt;/b&gt;.</div><div class="line">16:18:42.123	INFO	This is bold.</div><div class="line">16:18:42.123	INFO	Robot Framework</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>RF框架包含的内容很多，了解一些基本使用足以支撑应用，更详细的用法参考<a href="http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html" target="_blank" rel="external">官方文档</a></p>
<p>本文主要参考官方文档一部分<a href="http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#id704" target="_blank" rel="external">Extending Robot Framework</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> RobotFramework </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RobotFramework </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自动化测试环境搭建]]></title>
      <url>/2017/robotframework/</url>
      <content type="html"><![CDATA[<p>在我有限的自动化测试经历中，我接触了基于robotframework测试框架+jenkins管理平台的一整套CI测试流程，受益良多。<br>验收测试驱动(ATDD)的思想确实有助于保证产品质量，提高开发效率。总结下这块的学习经验，以后应该还用得上。<br><a id="more"></a></p>
<h2 id="robotframework"><a href="#robotframework" class="headerlink" title="robotframework"></a>robotframework</h2><p>简称<code>RF</code>,<br>详细介绍可以参考<a href="http://robotframework.org" target="_blank" rel="external">官网</a> </p>
<p>代码托管在github <a href="https://github.com/robotframework/robotframework" target="_blank" rel="external">robotframework</a></p>
<p>总的来说RF是一个为验收测试和验收测试驱动开发的自动化测试框架，技术上以关键字驱动实现测试用例的编写。</p>
<p>特点是易于使用，易扩展，结构层次分明，整个生态异常庞大。</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><a href="https://github.com/robotframework/robotframework/blob/master/INSTALL.rst#introduction" target="_blank" rel="external">官方安装文档</a></p>
<p>RF是用python实现的，同时也支持jython和IronPython，大部分项目应该是直接使用python</p>
<p>此处当然又会遇到python的世纪难题，到底是py2还是py3。</p>
<p>先说结论，还是py2吧</p>
<p>原因有两点</p>
<ul>
<li>RF 从v3.0开始才支持py3，但依旧支持py2</li>
<li>虽然官网推荐生态圈中的库和工具也应该开始支持py3，然而支持度还不够全面，例如官方编辑器<code>RIDE</code>依然仅支持py2，目前没看到有支持py3的计划。虽然可以选择其他编辑器，但对于新手来说不够友好，还是建议先使用RIDE的GUI界面，方便快速入门</li>
</ul>
<h4 id="安装RF"><a href="#安装RF" class="headerlink" title="安装RF"></a>安装RF</h4><ul>
<li>安装python v2.7及以上版本</li>
<li>安装robotframework, v3.0及以上版本. <code>pip install robotframework</code></li>
<li>确认已配置环境变量</li>
<li>验证安装是否成功<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">robot --version</div><div class="line">rebot --version</div></pre></td></tr></table></figure>
</li>
</ul>
<p>命令行工具介绍</p>
<ul>
<li><code>robot</code> 执行测试用例</li>
<li><code>rebot</code> log和report文件生成器。将生成的<code>output.xml</code>记录输出文件二次解析成可读性更强的<code>log.html</code>和<code>report.html</code>结果文件。作用相当于XML解析器</li>
</ul>
<p>详细信息可通过<br><code>robot--help</code> 和 <code>rebot --help</code> 查看</p>
<h4 id="安装编辑器"><a href="#安装编辑器" class="headerlink" title="安装编辑器"></a>安装编辑器</h4><p>测试用例一般编写完成保存在文件中。</p>
<p>支持多种格式的文件，例如<code>txt</code>,<code>csv</code>等。<br>更推荐带有标识的后缀名，例如<code>tests.robot</code></p>
<p>具体编写时，推荐使用官方编辑工具 <a href="https://github.com/robotframework/RIDE/wiki" target="_blank" rel="external">RIDE</a></p>
<p>官方安装文档见 <a href="https://github.com/robotframework/RIDE/wiki/Installation-Instructions" target="_blank" rel="external">RIDE Installation</a></p>
<p>总的来说就是</p>
<ul>
<li>安装wxPython依赖</li>
<li>安装ride</li>
</ul>
<p>启动编辑器</p>
<ul>
<li>运行ride.py</li>
<li>指定参数 ride.py path/to/tests</li>
<li>windows上双击桌面快捷方式</li>
</ul>
<h4 id="执行测试用例"><a href="#执行测试用例" class="headerlink" title="执行测试用例"></a>执行测试用例</h4><p>执行测试用例命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">robot [options] data_source</div><div class="line">python -m robot [options] data_source</div><div class="line">python path/to/robot [options] data_source</div></pre></td></tr></table></figure></p>
<p>所有的optsions参数可通过<code>robot --help</code>命令查看</p>
<p>常用的有：</p>
<ul>
<li><code>-t --test name *</code>, 选取指定用例名来执行测试，默认为<code>*</code>,匹配所有用例</li>
<li><code>-s --suite name *</code>, 同上，通过测试套名指定</li>
<li><code>-i --include tag *</code>, 通过标签指定</li>
<li><code>-e --exclude tag *</code>, 排除特定标签的用例</li>
<li><code>-d --outputdir dir</code>, 输出目录，默认为当前测试用例执行的路径</li>
<li><code>-o --output file</code>, 输出文件名，默认为<code>output.xml</code>, 设置为<code>NONE</code>可禁用输出。其他log、report等输出都是基于该文件，</li>
<li><code>-r --report file</code>, 测试报告名，默认<code>report.html</code>, 设置为<code>NONE</code>不输出，也可以通过<code>rebot</code>工具后续再输出</li>
<li><code>-l --log file</code>, 测试log文件名， 同上</li>
</ul>
<p><code>python -m robot</code>到RF3.0版本才支持</p>
<p>旧版本需要使用<code>python -m robot.run</code></p>
<p>解析xml也同理<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rebot output.xml</div><div class="line">python -m robot.rebot output.xml</div><div class="line">python -m robot.rebot -d ./output output.xml</div></pre></td></tr></table></figure></p>
<h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p><a href="https://jenkins.io/" target="_blank" rel="external">jenkins</a>的logo很好的说明的它的作用，简单来说它就是一个“管家”，可以定制各种任务的构建，测试，部署等各种工作的开源自动化持续集成服务器。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>安装Java8</li>
<li>下载最新jenkins资源包<code>jenkins.war</code></li>
<li>启动<code>java -jar jenkins.war --httpPort=8080</code></li>
<li>打开浏览器网址，根据提示完成安装</li>
<li>插件下载地址  <a href="http://updates.jenkins-ci.org/download/plugins/" target="_blank" rel="external">plugins</a></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>RF 实现了测试主体，并提供了便捷的命令行启动接口。</p>
<p>jenkins是任务执行者，定制任务然后执行启动RF测试的命令，二者相结合实现了端到端的完整测试流程</p>
<p>RF创建的测试可以说是验收测试，也可以算是单元测试和系统测试。总之，测试保证了开发质量，提升了开发效率</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> RobotFramework </category>
            
        </categories>
        
        
        <tags>
            
            <tag> robotframework </tag>
            
            <tag> jenkins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript Object]]></title>
      <url>/2017/js-Object/</url>
      <content type="html"><![CDATA[<p>javascript里的对象是我一直没认真研究过的，每次看到Object的调用总觉得是高级语法。然而其实它一直都在那里，不难不易，只是我没有去了解。查了下MDN，仍旧是做下API层面的总结。<br><a id="more"></a></p>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><h2 id="键值对初始化"><a href="#键值对初始化" class="headerlink" title="键值对初始化"></a>键值对初始化</h2><pre><code>@param name String 
@param value Any
</code></pre><p>其中对于name参数，必须是String。<br>如果不是String会被转化为String类型。1会转为’1’、null会被转为’null’, undefined 会被转为’undefined’, true将被转为’true’。如果是对象，则调用对象的toString方法返回String。<br>特别说明下<code>__proto__</code>。如果使用它作为name，对象不会创建一个以该字符串命名的属性。因为它存在默认值，指向Object.prototype。除非提供的value是一个对象或者null，否则默认值不会改变。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="string">'foo'</span>, <span class="attr">b</span>: <span class="number">42</span>, <span class="attr">c</span>: &#123;&#125;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="string">'foo'</span>, b = <span class="number">42</span>, c = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: a, <span class="attr">b</span>: b, <span class="attr">c</span>: c&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">  <span class="attr">test</span>: <span class="number">5</span>;</div><div class="line">  get property() &#123;<span class="keyword">return</span> <span class="keyword">this</span>.test&#125;,</div><div class="line">  set property(value) &#123;<span class="keyword">if</span>(value&gt;<span class="number">10</span>) <span class="keyword">this</span>.test = value&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</div><div class="line">assert(<span class="built_in">Object</span>.getPrototypeOf(obj1) === <span class="built_in">Object</span>.prototype);</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">__proto__</span>: <span class="literal">null</span>&#125;;</div><div class="line">assert(<span class="built_in">Object</span>.getPrototypeOf(obj2) === <span class="literal">null</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> protoObj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj3 = &#123;<span class="string">'__proto__'</span>: protoObj&#125;;</div><div class="line">assert(<span class="built_in">Object</span>.getPrototypeOf(obj3) === protoObj);</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj4 = &#123;<span class="attr">__proto__</span>: <span class="string">'not an object or null'</span>&#125;;</div><div class="line">assert(<span class="built_in">Object</span>.getPrototypeOf(obj4) === <span class="built_in">Object</span>.prototype);</div><div class="line">assert(!obj4.hasOwnProperty(<span class="string">'__proto__'</span>));</div></pre></td></tr></table></figure></p>
<p>除此之外，ES6新增了语法特性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Shorthand property names */</span></div><div class="line"><span class="keyword">var</span> a = <span class="string">'foo'</span>, b = <span class="number">42</span>, c = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> o = &#123;a, b, c&#125;;</div><div class="line"><span class="comment">/* o.a =&gt; 'foo' */</span></div><div class="line"></div><div class="line"><span class="comment">/* Shorthand method names */</span></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">  property([parameters]) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* Computed property names */</span></div><div class="line"><span class="keyword">var</span> prop = <span class="string">'foo'</span>;</div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">  [prop]: <span class="string">'hey'</span>,</div><div class="line">  [<span class="string">'b'</span> + <span class="string">'ar'</span>]: <span class="string">'there'</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">/* However, JSON.parse() will reject computed property names </span></div><div class="line">and an error will be thrown */</div></pre></td></tr></table></figure></p>
<p>总之一个对象的初始化就是一个表达式，用来描述一个对象的初始化过程。对象由属性组成，属性是用来描述对象的。对象的属性值可以是基本数据类型值（即js六大基本数据类型，string、number、boolean、undefined、null、symbol），也可以是对象</p>
<h2 id="用作构造器"><a href="#用作构造器" class="headerlink" title="用作构造器"></a>用作构造器</h2><pre><code>new Object([value])
根据所给的value，返回一个对象包装器。
</code></pre><p>如果value的值为null或者undefined，会构造返回一个空对象；如果value是一个对象，则返回value；否则返回所给定value类型对应的对象。</p>
<h1 id="Object属性"><a href="#Object属性" class="headerlink" title="Object属性"></a>Object属性</h1><h2 id="Object-length"><a href="#Object-length" class="headerlink" title="Object.length"></a>Object.length</h2><pre><code>返回 1
</code></pre><h2 id="Object-prototype"><a href="#Object-prototype" class="headerlink" title="Object.prototype"></a>Object.prototype</h2><pre><code>返回一个对象，包含的属性被其他对象继承，几乎所有对象都从这里继承。
Object.prototype对象的属性不可枚举(not enumerable), 不可赋值(not writable), 
不可更改或删除(not configurable),可通过 `in` 来确定是否存在某一属性。
</code></pre><h3 id="Object-prototype-constructor"><a href="#Object-prototype-constructor" class="headerlink" title="Object.prototype.constructor"></a>Object.prototype.constructor</h3><pre><code>返回一个访问描述符(accessor property)，对象的构造函数
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line">o.constructor === <span class="built_in">Object</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>;</div><div class="line">o.constructor === <span class="built_in">Object</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = [];</div><div class="line">a.constructor === <span class="built_in">Array</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>;</div><div class="line">a.constructor === <span class="built_in">Array</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> n = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>);</div><div class="line">n.constructor === <span class="built_in">Number</span>;</div></pre></td></tr></table></figure>
<p>其中对象的构造函数可以被改变，<br>但对基本类型数据number、boolean、string的构造函数进行更改不会生效。</p>
<pre><code>undefined、null不含有constructor属性
</code></pre><h3 id="Object-prototype-proto"><a href="#Object-prototype-proto" class="headerlink" title="Object.prototype.__proto__"></a><code>Object.prototype.__proto__</code></h3><pre><code>非标准规范，但被广泛实现。返回当前对象的原型对象，也是一个访问描述符，
可以获取也可以修改，但是修改非常影响性能，不鼓励使用。
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> shape = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">let</span> p = &#123;</div><div class="line">    <span class="attr">a</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">shape.prototype.__proto__ = p;</div><div class="line"></div><div class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> shape();</div><div class="line"></div><div class="line">shape.prototype.a() <span class="comment">/* aaa */</span></div><div class="line"><span class="built_in">console</span>.log(shape.prototype.hasOwnProperty(<span class="string">'a'</span>)); <span class="comment">/* false */</span></div><div class="line">circle.a(); <span class="comment">// aaa</span></div></pre></td></tr></table></figure>
<h3 id="Object-prototype-defineGetter"><a href="#Object-prototype-defineGetter" class="headerlink" title="Object.prototype.__defineGetter__()"></a><code>Object.prototype.__defineGetter__()</code></h3><h3 id="Object-prototype-defineSetter"><a href="#Object-prototype-defineSetter" class="headerlink" title="Object.prototype.__defineSetter__()"></a><code>Object.prototype.__defineSetter__()</code></h3><pre><code>设置对象的getter和setter，非标准，可以被类方法Object.defineProperty代替
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line">o.__defineGetter__(<span class="string">'gimmeFive'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">5</span>; &#125;);</div><div class="line"><span class="built_in">console</span>.log(o.gimmeFive); <span class="comment">/* 5  */</span></div><div class="line">o.gimmeFive = <span class="number">10</span></div><div class="line"><span class="built_in">console</span>.log(o.gimmeFive); <span class="comment">/* 5 */</span></div><div class="line"></div><div class="line">o.__defineSetter__(<span class="string">'value'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;<span class="keyword">this</span>.test = val;&#125;);</div><div class="line">o.value = <span class="number">10</span></div><div class="line"><span class="built_in">console</span>.log(o.value); <span class="comment">/* undefined */</span></div><div class="line"><span class="built_in">console</span>.log(o.test); <span class="comment">/* 10 */</span></div><div class="line"></div><div class="line"><span class="comment">/* Using Object.defineProperty instead */</span></div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'foo'</span>, &#123;</div><div class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.anotherValue;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.anotherValue = val;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(o.foo)          <span class="comment">/* undefined */</span></div><div class="line"><span class="built_in">console</span>.log(o.anotherValue) <span class="comment">/* undefined */</span></div><div class="line">o.foo = <span class="number">10</span></div><div class="line"><span class="built_in">console</span>.log(o.foo)          <span class="comment">/* 10 */</span></div><div class="line"><span class="built_in">console</span>.log(o.anotherValue) <span class="comment">/* 10 */</span></div></pre></td></tr></table></figure>
<h3 id="Object-prototype-lookupGetter"><a href="#Object-prototype-lookupGetter" class="headerlink" title="Object.prototype.__lookupGetter__()"></a><code>Object.prototype.__lookupGetter__()</code></h3><h3 id="Object-prototype-lookupSetter"><a href="#Object-prototype-lookupSetter" class="headerlink" title="Object.prototype.__lookupSetter__()"></a><code>Object.prototype.__lookupSetter__()</code></h3><pre><code>返回对象的getter和setter函数，非标准，可以被类方法Object.getOwnPropertyDescriptor代替
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  get foo() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> ? <span class="string">'foo'</span> : <span class="string">'bar'</span>;</div><div class="line">  &#125;，</div><div class="line">  set foo(value) &#123;</div><div class="line">    <span class="keyword">this</span>.bar = value;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/*  Non-standard and deprecated way */</span></div><div class="line">obj.__lookupGetter__(<span class="string">'foo'</span>);</div><div class="line"><span class="comment">/*  (function() &#123; return Math.random() &gt; 0.5 ? 'foo' : 'bar'; &#125;) */</span></div><div class="line">obj.__lookupSetter__(<span class="string">'foo'</span>)</div><div class="line"><span class="comment">/*  (function(value) &#123; this.bar = value; &#125;) */</span></div><div class="line"></div><div class="line"><span class="comment">/*  Standard-compliant way */</span></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">"foo"</span>).get;</div><div class="line"><span class="comment">/*  (function() &#123; return Math.random() &gt; 0.5 ? 'foo' : 'bar'; &#125;) */</span></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'foo'</span>).set;</div><div class="line"><span class="comment">/*  (function(value) &#123; this.bar = value; &#125;) */</span></div></pre></td></tr></table></figure>
<h3 id="Object-prototype-hasOwnProperty"><a href="#Object-prototype-hasOwnProperty" class="headerlink" title="Object.prototype.hasOwnProperty()"></a>Object.prototype.hasOwnProperty()</h3><pre><code>@param prop String|Symbol
返回bool，判断该对象是否有某自定义属性，排除继承选项。
</code></pre><p>允许对象改写改方法，因此可用下面的方式调用更加安全<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(&#123;&#125;).hasOwnProperty.call(obj, prop)</div><div class="line"><span class="comment">/* or this way */</span></div><div class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</div></pre></td></tr></table></figure></p>
<h3 id="Object-prototype-isPrototypeOf"><a href="#Object-prototype-isPrototypeOf" class="headerlink" title="Object.prototype.isPrototypeOf()"></a>Object.prototype.isPrototypeOf()</h3><pre><code>@param object Object
返回bool，判断函数调用对象是否在参数对象的原型链上
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> Test()</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Test.prototype.isPrototypeOf(test));</div><div class="line"><span class="comment">/* true /*</span></div><div class="line">console.log(Object.prototype.isPrototypeOf(&#123;&#125;));</div><div class="line">//true</div></pre></td></tr></table></figure>
<h3 id="Object-prototype-propertyIsEnumerable"><a href="#Object-prototype-propertyIsEnumerable" class="headerlink" title="Object.prototype.propertyIsEnumerable()"></a>Object.prototype.propertyIsEnumerable()</h3><pre><code>obj.propertyIsEnumerable(prop)
判断对象属性是否可枚举
</code></pre><h3 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h3><pre><code>返回字符串代表对象，Array, Number, Date 对象重写了该方法
</code></pre><h3 id="Object-prototype-valueOf"><a href="#Object-prototype-valueOf" class="headerlink" title="Object.prototype.valueOf()"></a>Object.prototype.valueOf()</h3><pre><code>返回对象的基本数据类型值，一般用在需要将对象转换成基本类型值的场景，比如运算操作。
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyNumberType</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.number = n;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MyNumberType.prototype.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.number;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myObj = <span class="keyword">new</span> MyNumberType(<span class="number">4</span>);</div><div class="line">myObj + <span class="number">3</span>; <span class="comment">// 7</span></div></pre></td></tr></table></figure>
<h1 id="Object方法"><a href="#Object方法" class="headerlink" title="Object方法"></a>Object方法</h1><p>相当于类方法</p>
<h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h2><pre><code>用法：Object.defineProperty(obj, prop, descriptor)
返回传入的对象
</code></pre><p>可以给一个对象定义新属性，也可以修改已有属性，返回传入的对象<br>普通的对象属性赋值使得它的属性可以被枚举，属性值可以被修改还可以被delete删除。但该方法允许一些更细节的操作，比如通过该方法增加的属性默认不可枚举也不能删除。<br>@descriptor 参数有两种呈现风格，数据描述符(data descriptors) 和 访问描述符(accessor descriptors)。<br>共同点是，二者都是对象，因此不可缺省。且都有如下属性</p>
<pre><code>configurable：默认false，只有当为true时，该属性才能被修改和删除,
            修改指不能二次修改定义，和writeable为true时的修改值不冲突
enumerable：默认为false，只有当为true时，才会在枚举时出现
</code></pre><p>数据描述符还有以下可选属性：</p>
<pre><code>value：属性值，可以是任何合法数据类型，对象或函数等等，默认undefined
writable：默认false，只有当true时，属性值才能被赋值运算符改变
</code></pre><p>访问描述符有以下可选属性：</p>
<pre><code>get：属性的getter函数，函数返回值将作为属性值，默认为undefined
set：属性的setter函数，默认为undefined
</code></pre><p>以上可选属性都不是必要的，如果要使用，有且只能使用二者中的一个。定义属性时，也要考虑对象的原型链继承，如需得到一个纯净的对象可以使用<code>Object.create(null)</code></p>
<h2 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties()"></a>Object.defineProperties()</h2><pre><code>Object.defineProperties(obj, props)
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</div><div class="line">  <span class="string">'property1'</span>: &#123;</div><div class="line">    <span class="attr">value</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">writable</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">'property2'</span>: &#123;</div><div class="line">    <span class="attr">value</span>: <span class="string">'Hello'</span>,</div><div class="line">    <span class="attr">writable</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">// etc. etc.</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Object-create-proto-propertiesObject"><a href="#Object-create-proto-propertiesObject" class="headerlink" title="Object.create(proto[, propertiesObject])"></a>Object.create(proto[, propertiesObject])</h2><pre><code>返回一个新对象，它有着具体的原型和属性
@param proto Object|null //创建的新对象的prototype
@param propertiesObject Object|null 
//可选，如果给定且不为undefined，那么它的值只能个对象，否则会报TypeError。
该对象的自定义属性会以对应的属性名添加到新建的对象应Object.defineProperties()的第二个参数。
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype)  </div><div class="line"><span class="comment">/* equals to: */</span></div><div class="line"><span class="keyword">var</span> o = &#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constructor</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">o = <span class="keyword">new</span> Constructor();</div><div class="line"><span class="comment">/* is equivalent to: */</span></div><div class="line">o = <span class="built_in">Object</span>.create(Constructor.prototype);</div><div class="line"></div><div class="line">o = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span> &#125; &#125;);</div><div class="line">o2 = <span class="built_in">Object</span>.create(&#123;&#125;, &#123;</div><div class="line">  <span class="attr">p</span>: &#123;</div><div class="line">    <span class="attr">value</span>: <span class="number">42</span>,</div><div class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用场景:</p>
<ol>
<li>创建一个空对象，<code>Object.create(null)</code>, 返回的对象无继承属性，连<code>__proto__</code>都没有</li>
<li>实现对象的继承<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  SuperClass.call(<span class="keyword">this</span>);</div><div class="line">  OtherSuperClass.call(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 从一个类继承 */</span></div><div class="line">MyClass.prototype = <span class="built_in">Object</span>.create(SuperClass.prototype);</div><div class="line"></div><div class="line">MyClass.prototype.myMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// do a thing</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h2><pre><code>用法：Object.assign(target, ...sources)
向target对象上增加一个或多个source对象自身的可枚举属性，
如果有相同的属性，后续的对象会覆盖前面的属性，返回target对象
assign的机制是赋值，调用source的getter，调用target的setter。而不是复制或者定义新属性。
</code></pre><p>assign的赋值不同于深度克隆<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">0</span> , <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">0</span>&#125;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</div><div class="line">obj2.a = <span class="number">2</span>;</div><div class="line">obj2.b.c = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1)); <span class="comment">/* &#123; a: 0, b: &#123; c: 3&#125;&#125; */</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">/* &#123; a: 2, b: &#123; c: 3&#125;&#125; */</span></div><div class="line"></div><div class="line"><span class="comment">/* Deep Clone */</span></div><div class="line">obj1 = &#123; <span class="attr">a</span>: <span class="number">0</span> , <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">0</span>&#125;&#125;;</div><div class="line"><span class="keyword">let</span> obj3 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1));</div><div class="line">obj1.a = <span class="number">4</span>;</div><div class="line">obj1.b.c = <span class="number">4</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1)); <span class="comment">/* &#123; a: 4, b: &#123; c: 4&#125;&#125; */</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj3)); <span class="comment">/* &#123; a: 0, b: &#123; c: 0&#125;&#125; */</span></div></pre></td></tr></table></figure></p>
<p>基本类型会被包装成对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> v1 = <span class="string">'abc'</span>;</div><div class="line"><span class="keyword">var</span> v2 = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> v3 = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> v4 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, v1, <span class="literal">null</span>, v2, <span class="literal">undefined</span>, v3, v4); </div><div class="line"><span class="comment">/* Primitives will be wrapped, null and undefined will be ignored.</span></div><div class="line">   Note, only string wrappers can have own enumerable properties. */</div><div class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; "0": "a", "1": "b", "2": "c" &#125;</span></div></pre></td></tr></table></figure>
<h2 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor()"></a>Object.getOwnPropertyDescriptor()</h2><pre><code>Object.getOwnPropertyDescriptor(obj, prop)
@return a property descriptor if exists， undefined otherwise
</code></pre><h2 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h2><pre><code>Object.getOwnPropertyDescriptors(obj)
返回对象所有属性描述符
</code></pre><h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h2><pre><code>Object.keys(obj)
返回数组，存储着对象自身的可枚举属性
</code></pre><h2 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames()"></a>Object.getOwnPropertyNames()</h2><pre><code>Object.getOwnPropertyNames(obj)
返回一个数组，包含所有自身的属性名，包括不可枚举的属性
</code></pre><p>如果是数组对象，则返回所有的key以及’length’</p>
<h2 id="Object-getOwnPropertySymbols"><a href="#Object-getOwnPropertySymbols" class="headerlink" title="Object.getOwnPropertySymbols()"></a>Object.getOwnPropertySymbols()</h2><p>同上，只是返回的是symbol</p>
<h2 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h2><pre><code>Object.getPrototypeOf(obj)
返回对象的原型对象，是相对于`__proto__`的正规用法
</code></pre><p>ES5里参数如果不是对象会报TypeError,ES6会将参数包装成对象，并返回其原型对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Proto = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Proto();</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj) === Proto.prototype); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj) === obj.__proto__); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="string">'foo'</span>);</div><div class="line"><span class="comment">// TypeError: "foo" is not an object (ES5 code)</span></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="string">'foo'</span>);</div><div class="line"><span class="comment">// String.prototype                  (ES6 code)</span></div></pre></td></tr></table></figure>
<h2 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h2><pre><code>Object.setPrototypeOf(obj, prototype);
修改对象的原型对象，返回该对象。
</code></pre><p>修改对象原型存在性能问题，应尽量避免，可以使用Object.create()创建一个新对象</p>
<h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h2><pre><code>Object.is(value1, value2);
@return bool 判断两个值是否为同一个值，和`==`、`===`均不同
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.is(<span class="string">'foo'</span>, <span class="string">'foo'</span>);     <span class="comment">// true</span></div><div class="line"><span class="built_in">Object</span>.is(<span class="built_in">window</span>, <span class="built_in">window</span>);   <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.is([], []);           <span class="comment">// false</span></div><div class="line"><span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;);           <span class="comment">// false</span></div><div class="line"><span class="keyword">var</span> test = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.is(test, test);       <span class="comment">// true</span></div><div class="line"><span class="built_in">Object</span>.is(<span class="literal">null</span>, <span class="literal">null</span>);       <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="number">0</span>/<span class="number">0</span>);         <span class="comment">// true</span></div><div class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>);         <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h2><pre><code>用法：Object.freeze(obj)
返回一个对象处于不可修改的状态。修改不会生效，在Strict模式下会报错
ES5对参数不是一个对象会报错，ES6则不会，返回输入值。
</code></pre><p>然而freeze对子对象的修改并不生效</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">obj1 = &#123;</div><div class="line">  <span class="attr">internal</span>: &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.freeze(obj1);</div><div class="line">obj1.internal.a = <span class="string">'aValue'</span>;</div><div class="line"></div><div class="line">obj1.internal.a <span class="comment">// 'aValue'</span></div></pre></td></tr></table></figure>
<p>当然也是有办法做到递归freeze<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* To do so, we use this function. */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepFreeze</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="comment">/* Retrieve the property names defined on obj */</span></div><div class="line">  <span class="keyword">var</span> propNames = <span class="built_in">Object</span>.getOwnPropertyNames(obj);</div><div class="line">  <span class="comment">/*  Freeze properties before freezing self */</span></div><div class="line">  propNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> prop = obj[name];</div><div class="line">    <span class="comment">/*  Freeze prop if it is an object */</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> prop == <span class="string">'object'</span> &amp;&amp; prop !== <span class="literal">null</span>)</div><div class="line">      deepFreeze(prop);</div><div class="line">  &#125;);</div><div class="line">  <span class="comment">/*  Freeze self (no-op if already frozen) */</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.freeze(obj);</div><div class="line">&#125;</div><div class="line"></div><div class="line">obj2 = &#123;</div><div class="line">  <span class="attr">internal</span>: &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">deepFreeze(obj2);</div><div class="line">obj2.internal.a = <span class="string">'anotherValue'</span>;</div><div class="line">obj2.internal.a; <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>
<h2 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal()"></a>Object.seal()</h2><pre><code>Object.seal(obj)
返回被封装的对象，阻止增加新属性，并将已有属性改成non-configurable，如果writable为true则属性值仍旧可以修改
</code></pre><h2 id="Object-preventExtensions"><a href="#Object-preventExtensions" class="headerlink" title="Object.preventExtensions()"></a>Object.preventExtensions()</h2><pre><code>Object.preventExtensions(obj)
返回被禁止增加新属性的对象，不影响对现在属性的修改
</code></pre><h2 id="Object-isExtensible"><a href="#Object-isExtensible" class="headerlink" title="Object.isExtensible()"></a>Object.isExtensible()</h2><pre><code>Object.isExtensible(obj)
@return bool 判断一个对象是否可扩展
</code></pre><p>一般对象都是默认可扩展的，能增加新属性，也能被修改，但通过一些方法可禁止这些特性，如Object.preventExtensions(), Object.seal(), or Object.freeze().</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没啥可说的，理解了就不会觉得神奇。</p>
<p>参考：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="external">Object</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Object </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Object </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[消息队列之RabbitMQ]]></title>
      <url>/2017/rabbitmq/</url>
      <content type="html"><![CDATA[<p>最近项目上开始部署了消息队列，手头的工作基本围绕着它展开。消息队列已经是比较成熟的技术了，例如使用中我们最终选择的rabbitMQ，已经诞生10年了。那这是我们选择它的原因吗？不全是，还因为它的库多……总结下这块内容以备忘！<br><a id="more"></a></p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>我工作中的使用主要是使用MQ重构了原来的需求，改进的主要是</p>
<ul>
<li>和其他各个子模块之间的通信接口更加清晰，不再是只有主动发和被动收，而是收发都是主动。</li>
<li>去掉了一些中间消息的存库，改为请求后直接监听响应，减少了MongoDB的读写压力。</li>
</ul>
<p>仿佛和主流描述的使用场景刚好相反，他们说的是立即返回响应，节省请求响应时间，让MQ去处理异步事件，而我是在等异步结果回来再响应……不过工具终究是为解决实际问题的，MQ的引入确实解耦了系统，降低了复杂度，对于一些不需要二次处理结果的事件我也的确是提前给它返回了响应，这是最理想的情况，只是并非所有使用场景都是如此。</p>
<h2 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h2><ul>
<li><code>broker</code>: 按官网说法<code>RabbitMQ is the most widely deployed open source message broker</code>, 简单来说 <code>rabbitMQ &lt;= broker</code>, 即我们通常说的broker指的是rabbitMQ服务器本身。</li>
<li><code>exchange</code>: 消息交换机，消息发送者消息都是发到交换机，由交换机根据规则转发到队列，如果没有对应队列消息会被丢弃</li>
<li><code>routing key</code>: 消息发送者指定的规则，告诉交换机如何转发消息, 有时未显性展示，routing key其实为队列名</li>
<li><code>binding key</code>: 队列和交换机之间建立的规则，只有当routing key的规则符合该规则，交换机才会把消息转发至该队列</li>
<li><code>queue</code>: 队列，消息接收载体，是交换机和消息接收者之间的中间件，和交换机按照binding key的规则连接，如未显性展示，一般是绑定默认交换机，binding key为队列名，一个队列可以有多个消息接收者，这个时候的消息分配是round-table形式循环的。</li>
<li><code>producer</code>：消息生产者，就是投递消息的程序。</li>
<li><code>consumer</code>：消息消费者，就是接受消息的程序。</li>
<li><code>vhost</code>: broker的最小组成粒度，一个broker可以有多个vhost</li>
<li><code>connection</code>: 程序和broker之间的TCP连接，最大连接数取决于系统能够接受的socket连接数</li>
<li><code>channel</code>: 基于connection的虚拟连接，断开重连不需要重新建立TCP连接，减少了开销。一个connection里能建的最大channel数可以设置，服务端默认128，设为0代表无限制。channel是消息真正的操作载体，绝大多数操作都是基于channel的。</li>
<li><code>heartbeat</code>: 用于检测客户端与服务端之间的tcp链接是否正常的发包间隔，服务端默认600秒，客户端如果设置，双方会连接后会协定以客户端为主，如果客户端设置为0表示不启用该功能。</li>
</ul>
<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="http://opxo4bto2.bkt.clouddn.com/rabbitmq.png" alt="rabbitmq"></p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>rabbitMQ官网以6个例子当做入门教程，详见<a href="http://www.rabbitmq.com/getstarted.html" target="_blank" rel="external">RabbitMQ Tutorials</a>，提供多种客户端接口，跟着走一遍就能入门了。</p>
<p>官方的六个实例基本概括了rabbitMQ的使用场景，熟悉以后我觉得总的来说可以分为两部分，即生产者和消费者。<br>生产者不用管自己发出的消息被谁处理，怎么处理，只需要发给按约定规则（routing key）发到指定exchange即可，消费者按照自己的需求去订阅消息，不用关心消息的来源。让双线联系变成和MQ的单线联系，从而达到解耦的目的。大部分场景只要分清当前程序是producer还是consumer，逻辑就能变得简单。<br>有时需要consumer返回处理完消息的结果，即consumer需要动态的切换成producer，这个就是RPC的应用场景了，重点还是分清自己的角色就好了。</p>
<h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><pre><code>如果当前程序是Producer，那么只需关心自己和`exchange`之间的交互即可。
</code></pre><p>exchange 有四种类型，分别对应不同的使用场景，</p>
<ul>
<li><code>direct</code>: 一对一模式，一般以queue的名字作为key，向指定queue转发消息</li>
<li><code>fanout</code>: 广播模式，向所有绑定的queue转发消息</li>
<li><code>topic</code>:  匹配模式，binding key可以使用通配符去匹配routing key，从而获得转发消息。<code>*</code>匹配一个关键字，<code>#</code>匹配多个关键字</li>
<li><code>header</code>: 一种类似topic的扩展，完全可以用topic取代</li>
</ul>
<p>需注意的是，发送时一般会先确认exchange存在，如果传递的exchange option和实际不符会引发错误，导致channel关闭</p>
<h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><pre><code>当前程序是Consumer，监听`queue`即可。
</code></pre><p>queue的创建和绑定可以协商由谁来完成，二次确认时主要保持参数一致，否则也会产生错误，导致channel关闭。<br>RPC模式我认为更像是消费者模式的一种。<br>消息处理程序监听在一个协定好的队列(queue1)上，收到消息时处理完之后，发送结果到消息里指定的队列(queue2)。<br>对于消息的发送者，先将消息发出,保证消息能被转发至queue1，随后监听在队列queue2，等待处理结果返回。<br>这里涉及到的两个队列，queue1和queue2的创建和绑定由谁来做都可以，一般为了方便就直接采取direct的消息转发机制了。</p>
<h2 id="API使用"><a href="#API使用" class="headerlink" title="API使用"></a>API使用</h2><p>我选用的是javascript客户端，用的包是<a href="https://github.com/squaremo/amqp.node" target="_blank" rel="external">amqplib</a>, API参考<a href="http://www.squaremobius.net/amqp.node/channel_api.html#channel_bindExchange" target="_blank" rel="external">AMQP 0-9-1 library and client for Node.JS</a><br>总结使用中遇到的一些坑：</p>
<ul>
<li>最容易出现是exchange和queue二次确认时，参数不一致导致channel关闭</li>
<li>queue的exclusive参数，表示的是该队列是此次连接私有，一旦启用其他的channel消费该队列会出错。往该队列发送消息没有问题，因为发送是通过exchange的</li>
<li>主动删除队列时，监听队列会收到一条null消息，需特殊处理</li>
<li>consumer其实就是一个注册回调函数，它是一直都在的，并不是一次消费就失效，除非channel关闭，连接断开。避免在不知情的情况下给队列绑定多个consumer</li>
<li>多个consumer绑定同一队列时，消息的分配是round-table形式的，当被分到不是自己的消息或处理失败时需要nack来决定重新分配还是丢弃</li>
<li>确定需要一个queue多个consumer时记得使用<code>prefetch</code>参数，确保消息不会在一个节点累积</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我对rabbitMQ 学习也是一个从0到1的过程，入门很快，这也得益于它的良好API设计，一切都十分合理，是一个天然的编程模型。但项目上涉及的使用都很基础，暂时没遇到什么性能问题，估计遇到也不一定能解决……所以没啥可深入写的了，只能对一些概念性的东西作总结，方便以后能快速捡起来。</p>
]]></content>
      
        <categories>
            
            <category> RabbitMQ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js 模块]]></title>
      <url>/2017/module/</url>
      <content type="html"><![CDATA[<p>Node.js 中的模块(module)是一开始就接触到的，但也许是因为它的API已足够简单，实际却从未深究过。另外在新的ES6标准里，之前所用的<code>require</code>、<code>exports</code>将被<code>import</code>、<code>export</code>取代成为新的标准。新旧更替如果两个都不懂就太尴尬了，我决定查下资料，稍微总结对比下新旧的不同，争取从不懂变成略懂。<br><a id="more"></a></p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p><code>require()</code> 参数为字符串，加载模块,返回被加载模块<code>module.exports</code>的内容<br><code>require.cache</code> 返回已加载模块的对象，key为模块绝对路径名，value为module对象<br><code>require.resolve()</code> 参数为字符串，运用require()的机制去查找模块并不加载，返回模块绝对路径名<br><code>require.main</code> 源码解释<code>require.main = process.mainModule</code> 指向主模块，当不存在入口文件时返回 undefined</p>
<h1 id="require-exports"><a href="#require-exports" class="headerlink" title="require-exports"></a>require-exports</h1><p>Node应用由模块组成，采用CommonJS模块规范。根据这个标准，每一个文件就是一个模块。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。除非它主动对外提供接口。每个模块内部都有一个Module对象，代表当前模块，由模块内一个全局变量<code>module</code>表示。<br>自定义<code>module.exports</code>表示需要导出的接口。<code>exports</code>等同于module.exports的引用。<br><code>require</code>的用法：参数为字符串</p>
<ul>
<li>如果参数字符串以<code>&#39;/&#39;</code>开头，表示绝对路径</li>
<li>如果参数字符串以<code>&#39;./&#39;</code>开头，表示相当路径</li>
<li>如果参数字符串不含<code>&#39;/&#39;</code>或<code>&#39;./&#39;</code>，则表示加载的是一个默认提供的核心模块，或者一个位于各级node_modules目录的已安装模块（全局安装或局部安装）</li>
<li>如果参数字符串表示的是一个目录，则会自动查看该目录的package.json文件，然后加载main字段指定的入口文件。如果package.json文件没有main字段，或者根本就没有package.json文件，则会加载该目录下的index.js文件或index.node文件</li>
<li>如果指定的模块文件没有发现，Node会尝试为文件名添加<code>.js</code>、<code>.json</code>、<code>.node</code>后，再去搜索。.js件会以文本格式的JavaScript脚本文件解析，.json文件会以JSON格式的文本文件解析，.node文件会以编译后的二进制文件解析。</li>
</ul>
<p>require加载模块即加载被加载模块的<code>module.exports</code>部分内容，且存入缓存，再次加载时会优先从缓存加载，相当于原模块的copy，原模块的变化不会对已加载内容产生影响。同理，如果对加载内容进行修改，相当于修改内存数据，会影响到后续使用。</p>
<h1 id="import-export"><a href="#import-export" class="headerlink" title="import-export"></a>import-export</h1><p>新的ES6标准，变化主要在于</p>
<ul>
<li>import 必须作用在顶层作用域, 不能在局部作用域动态加载，目前为止还不能完全取代require</li>
<li>import命令加载其他模块，<code>.js</code>后缀不可省略</li>
<li>ES6 模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块</li>
<li>ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错</li>
</ul>
<p>相同的是</p>
<ul>
<li>同一个模块如果加载多次，将只执行一次</li>
</ul>
<h1 id="require-module"><a href="#require-module" class="headerlink" title="require-module"></a>require-module</h1><p><code>module</code>代表当前模块，是一个对象，它的父类是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Module</span>(<span class="params">id, parent</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.id = id;</div><div class="line">  <span class="keyword">this</span>.exports = &#123;&#125;;</div><div class="line">  <span class="keyword">this</span>.parent = parent;</div><div class="line">  <span class="keyword">if</span> (parent &amp;&amp; parent.children) &#123;</div><div class="line">    parent.children.push(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.filename = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">this</span>.loaded = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">this</span>.children = [];</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = Module;</div></pre></td></tr></table></figure></p>
<p>require 和 module 的关系是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Loads a module at the given file path. Returns that module's</span></div><div class="line">   `exports` property. */</div><div class="line">Module.prototype.require = <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</div><div class="line">  assert(path, <span class="string">'missing path'</span>);</div><div class="line">  assert(util.isString(path), <span class="string">'path must be a string'</span>);</div><div class="line">  <span class="keyword">return</span> Module._load(path, <span class="keyword">this</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h1><p><a href="https://nodejs.org/api/globals.html#globals_require" target="_blank" rel="external">Node.js API</a><br><a href="http://javascript.ruanyifeng.com/nodejs/module.html#toc6" target="_blank" rel="external">CommonJS规范</a><br><a href="http://www.ruanyifeng.com/blog/2015/05/require.html" target="_blank" rel="external">require() 源码解读</a><br><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="external">ECMAScript6 Module的语法</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Module </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> module </tag>
            
            <tag> require </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux从入门到放弃]]></title>
      <url>/2017/ubuntu/</url>
      <content type="html"><![CDATA[<p>很早就有学linux的想法，曾经也尝试过，特地装了双系统，但可能打开的姿势和时机不对，没过多久就不了了之了。如今已经工作一段时间了，感觉这是一项必须掌握的技能了。本着talk is cheap， just do it的实用主义原则，仅以使用目标为导向，逐步先达到我操作windows的水平，其他以后再说，捞着芝麻算芝麻，西瓜如果抱不动就不要了。以下以ubutun16.04为实验机，全程百度必应，行文仅为学习的总结及备忘录，内容逐步补充，内容无增加之时，则实现点题。<br><a id="more"></a></p>
<h2 id="认识目录"><a href="#认识目录" class="headerlink" title="认识目录"></a>认识目录</h2><pre><code>windows下目录就是C盘D盘之类，很好理解，系统盘和非系统盘。
</code></pre><p>那linux下呢？盗图一张如下：<br><img src="http://opxo4bto2.bkt.clouddn.com/linux_dir.png" alt="dir"><br>意思就是说只有一块盘，相当于windows下只有一个C盘。<br>根目录就是<code>/</code>，相当于windows下的<code>C:\</code>。该目录下<code>/etc</code>存放系统各种配置文件，<code>/root</code>为管理员目录，非管理员用户目录都在<code>/home</code>下等等。</p>
<h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><pre><code>windows下win+R 打开命令行时，显示当前用户目录路径
</code></pre><p>但linux下win+alt+T打开terminal时，显示的符号是啥意思呢？<br>普通用户登录会显示<code>~$</code>，root用户登录显示<code>~#</code>。<br>非root（管理员）用户的符号会显示$，而root用户则会显示#（代表权力至高无上）。<br><code>~</code>代表当前用户目录，root用户则是<code>/root/</code>，非root则是<code>/home/name/</code>。<br><code>-</code>代表之前操作的目录，非常有用。</p>
<h2 id="文件编辑"><a href="#文件编辑" class="headerlink" title="文件编辑"></a>文件编辑</h2><pre><code>windows下编辑文件，右击选择文件打开方式，编辑，ctrl+S保存，关闭文件。
</code></pre><p>linux下键盘操作是主力。以下总结vi编辑器的基本使用。当然可以用gedit等GUI编辑器，应该就没有学习成本了。</p>
<h3 id="打开-新建文件"><a href="#打开-新建文件" class="headerlink" title="打开|新建文件"></a>打开|新建文件</h3><pre><code>可以右键打开或新建，和windows下一样，如果是命令模式，推荐使用vi
</code></pre><h3 id="vi使用"><a href="#vi使用" class="headerlink" title="vi使用"></a>vi使用</h3><p><code>vi filename</code> 不存在该文件则新建</p>
<pre><code>vi filename    （此时光标在第一行首）
vi + filename （光标在最后一行首，输入时注意加号两边空格）
vi +/pattern filename （匹配模式，光标置于匹配的第一个字段处，无匹配项会提示）
</code></pre><p>进入文件后此时是命令模式，输入字符不会显示。<br>在命令模式下输入插入命令i（insert）、附加命令a （append）、打开命令o（open）、修改命令c（change）、取代命令r或替换命令s都可以进入文本输入模式，此时编辑器下方会显示<code>-- INSERT --</code>样式,如无则需设置<code>set showmode</code>, 同理设置行号<code>set nu</code><br>在命令模式下敲【: / ?】中任一个可进入末行模式，执行完命令回到命令模式，或敲ESC退出到命令模式。<br>命令模式和末行模式我个人觉得没有明确界限，大概就是末行模式可以在屏幕上看到命令符吧<br>vi的操作的命令需熟练掌握，自行查找。</p>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p><code>rm -fir file|dir</code><br><code>rm file1 file2</code> 删除多个文件</p>
<pre><code>-f 强制删除，忽略不存在的文件
-i 删除前确认
-r 递归删除文件目录
</code></pre><h3 id="复制剪切文件"><a href="#复制剪切文件" class="headerlink" title="复制剪切文件"></a>复制剪切文件</h3><p><code>cp src dest</code> cp命令可自行了解<br><code>cat file1 &gt; file2</code> 也能达到复制文件的目的<br><code>mv fp1 fp2</code> 剪切意味着移动move，也可以起到更名的作用<br>针对mv说明：</p>
<pre><code>-b ：若需覆盖文件，则覆盖前先行备份。备份文件名为`filename~` 
-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖
-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！
-u ：若目标文件已经存在，且 source 比较新，才会更新(update)
-t ：--target-directory=DIRECTORY 即指定mv的目标目录，
    该选项适用于移动多个源文件到一个目录的情况，此时目标目录在前，源文件在后。
</code></pre><p>mv -u file1 file2</p>
<h3 id="合并文件"><a href="#合并文件" class="headerlink" title="合并文件"></a>合并文件</h3><p><code>cat file1 file2 &gt; file</code><br>当<code>file</code>不存在会新建，若存在已有内容会被覆盖<br>参数：</p>
<pre><code>-n 或 --number 由 1 开始对所有输出的行数编号
-b 或 --number-nonblank 和 -n 相似，只不过对于空白行不编号
-s 或 --squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行
-v 或 --show-nonprinting 展现出非打印字符
</code></pre><p>eg：把 file1 和 file2的文件内容加上行号后依次输入 file3 文件<br>    cat -n file1 file2 &gt; file3</p>
<h3 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h3><p>可以使用系统自带的搜索功能，输入关键字即可，另外也可使用find命令<br><code>find /home -name &quot;*abc*&quot;</code><br><code>locate filename</code> 同样支持匹配</p>
<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p><code>ls -l filename|dirname</code> 查看权限<br>权限分为读、写、执行。权限针对的三组人员，文件拥有者、用户群组、其他人<br>更改权限使用<code>chmod</code>命令，使用时 <code>chmod --help</code>查看说明<br>记住其中一种使用方法就好 <code>chmod abc file</code>,其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。</p>
<pre><code>r=4，w=2，x=1 
</code></pre><p>chmod a=rwx file 和 chmod 777 file 效果相同<br>修改目录下所有文件权限则使用<code>chmod -R 777 *</code></p>
<p>修改文件拥有者和群组，使用 <code>chown</code>命令，普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员<br><code>chown [option] [new_owner]:[new_group] file</code></p>
<pre><code>-c 显示更改的部分的信息
-f 忽略错误信息
-h 修复符号链接
-R 处理指定目录以及其子目录下的所有文件
-v 显示详细的处理信息
</code></pre><p>eg: <code>chown -R -v root:admin test</code>将test目录下所有文件拥有者改为root，群组改为admin</p>
<h2 id="windows远程linux"><a href="#windows远程linux" class="headerlink" title="windows远程linux"></a>windows远程linux</h2><p>命令行远程当然是用SSH，客户端很多，推荐Xshell<br>GUI远程 也有很多选择, 例如vnc、nomachine，这里说下另一种：<br>xRDP + Xfce 实现Windows远程桌面连接</p>
<ol>
<li>安装xRDP及vncserver<br>sudo apt-get install xrdp<br>sudo apt-get install vnc4server tightvncserver</li>
<li>安装Xfce桌面环境<br>sudo apt-get install xubuntu-desktop</li>
<li>设置xRDP<br>echo xfce4-session &gt;~/.xsession</li>
<li>设置配置文件<br>sudo gedit /etc/xrdp/startwm.sh<br>在. /etc/X11/Xsession 前一行插入 xfce4-session</li>
<li>重启 xrdp<br>sudo service xrdp restart</li>
<li>windows通过mstsc连接</li>
</ol>
<p>Xface桌面tab不能自动补全的问题<br>settting-&gt;window manager-&gt;Keyboard，清除tab快捷键占用</p>
<h2 id="查杀进程"><a href="#查杀进程" class="headerlink" title="查杀进程"></a>查杀进程</h2><pre><code>`ps -e ` 查看所有进程，慢慢找吧……
`ps aux|grep &lt;key&gt;` 通过关键字查找目标进程
`sudo kill [code] &lt;PID&gt;` PID 为进程id，这个和windows下差不多
code默认为`-9`,表示发送kill信号，另外提两个
`-STOP` 停止进程，但不结束
`-CONT` 继续运行已停止的进程
</code></pre><h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><p>对应windows的批处理<br>若执行失败时，尝试sudo执行</p>
<p>未放弃，待续！</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubutun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js events模块(中)]]></title>
      <url>/2017/events-Source/</url>
      <content type="html"><![CDATA[<p>总结完<code>events</code>模块后会发现，这一块的API十分的简洁高效，对它的实现十分好奇。因为这块源码比较简短，代码编写十分规范，于是我选择更进一步，尝试下学习下源码<a href="https://github.com/nodejs/node/blob/master/lib/events.js" target="_blank" rel="external">events.js</a>。<br><a id="more"></a></p>
<h2 id="模块的编写"><a href="#模块的编写" class="headerlink" title="模块的编写"></a>模块的编写</h2><p>通常我们都会自己写模块，但对比下这篇专业的，对自己以后写模块有些许启发<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventEmitter</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  EventEmitter.init.call(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = EventEmitter;</div></pre></td></tr></table></figure></p>
<p>这是最开头的部分，<code>module.exports</code>写在文件开头，导出的部分一目了然，我个人比较习惯这种方式，不喜欢手动拉到最后去看这块信息。<br>另外，将要导出的函数模块化，没有把所有的内容都写到函数里面，解耦带来的好处不用赘述，也是非常合理的。<br>函数的call方法忘记的话参考<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="external">Function.prototype.call()</a></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>EventEmitter类实例化就是调用<code>EventEmitter.init()</code>函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">EventEmitter.prototype._events = <span class="literal">undefined</span>;</div><div class="line">EventEmitter.prototype._maxListeners = <span class="literal">undefined</span>;</div><div class="line"></div><div class="line">EventEmitter.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.domain = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">if</span> (EventEmitter.usingDomains) &#123;</div><div class="line">    <span class="comment">/* if there is an active domain, then attach to it. */</span></div><div class="line">    domain = domain || <span class="built_in">require</span>(<span class="string">'domain'</span>);</div><div class="line">    <span class="keyword">if</span> (domain.active &amp;&amp; !(<span class="keyword">this</span> <span class="keyword">instanceof</span> domain.Domain)) &#123;</div><div class="line">      <span class="keyword">this</span>.domain = domain.active;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>._events || <span class="keyword">this</span>._events === <span class="built_in">Object</span>.getPrototypeOf(<span class="keyword">this</span>)._events) &#123;</div><div class="line">    <span class="keyword">this</span>._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">    <span class="keyword">this</span>._eventsCount = <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>._maxListeners = <span class="keyword">this</span>._maxListeners || <span class="literal">undefined</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>domain 模块即将被废弃，可以不关心，从第二个if开始看。<br>这个判断的第二部分<code>this._events === Object.getPrototypeOf(this)._events)</code>存在的必要性我至今没看明白，但可以理解下字面意思。对象的<code>_events</code>属性和构造函数prototype的<code>_events</code>属性的比较，这里就是<code>undefined === undefined</code>的情况。<br>而且这里需注意<code>Object.getPrototypeOf(this)</code>和<code>this.prototype</code>不同这点，类似<code>obj.__proto__</code>和<code>obj.prototype</code>之间的关系。</p>
<p>值得学习的第二个点就是<code>this._events = Object.create(null)</code>。<br>之前的版本是<code>this._events = {}</code>。<br>所以<code>Object.create(null)</code>和<code>{}</code>之间肯定是有区别的，前者对象属性更少，创建速度更快。可参考<a href="https://www.bennadel.com/blog/2797-creating-objects-with-a-null-prototype-in-node-js.htm" target="_blank" rel="external">Creating Objects With A Null Prototype In Node.js</a></p>
<p>初始化过程很简单，就是初始化3个属性：<code>_events</code>置成一个空对象，用来后续存储监听器回调函数。<code>_eventsCount</code>属性置0，后期计数。<code>_maxListeners</code>,重写类属性<code>defaultMaxListeners</code>。<br>实例对象的其他属性和方法都从<code>EventEmitter.prototype</code>继承。</p>
<h2 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h2><p>EventEmitter类定义<code>defaultMaxListeners</code>时，用的如下实现方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* By default EventEmitters will print a warning if more than 10 listeners are</span></div><div class="line">   added to it. This is a useful default which helps finding memory leaks. */</div><div class="line"><span class="keyword">var</span> defaultMaxListeners = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(EventEmitter, <span class="string">'defaultMaxListeners'</span>, &#123;</div><div class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> defaultMaxListeners;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="comment">/* force global console to be compiled.</span></div><div class="line">       see https://github.com/nodejs/node/issues/4467 */</div><div class="line">    <span class="built_in">console</span>;</div><div class="line">    <span class="comment">/* check whether the input is a positive number (whose value is zero or</span></div><div class="line">       greater and not a NaN). */</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg !== <span class="string">'number'</span> || arg &lt; <span class="number">0</span> || arg !== arg)</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'"defaultMaxListeners" must be a positive number'</span>);</div><div class="line">    defaultMaxListeners = arg;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>与通常使用的<code>obj.property</code>定义方式不同，这里使用了<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty</a>。<br>应用在这里的配置使得<code>defaultMaxListeners</code>属性值不可被删除，可以赋值，且赋值前有检查。</p>
<h2 id="最大监听数的重写"><a href="#最大监听数的重写" class="headerlink" title="最大监听数的重写"></a>最大监听数的重写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Obviously not all Emitters should be limited to 10. This function allows</span></div><div class="line">   that to be increased. Set to zero for unlimited. */</div><div class="line">EventEmitter.prototype.setMaxListeners = <span class="function"><span class="keyword">function</span> <span class="title">setMaxListeners</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> n !== <span class="string">'number'</span> || n &lt; <span class="number">0</span> || <span class="built_in">isNaN</span>(n))</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'"n" argument must be a positive number'</span>);</div><div class="line">  <span class="keyword">this</span>._maxListeners = n;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$getMaxListeners</span>(<span class="params">that</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (that._maxListeners === <span class="literal">undefined</span>)</div><div class="line">    <span class="keyword">return</span> EventEmitter.defaultMaxListeners;</div><div class="line">  <span class="keyword">return</span> that._maxListeners;</div><div class="line">&#125;</div><div class="line"></div><div class="line">EventEmitter.prototype.getMaxListeners = <span class="function"><span class="keyword">function</span> <span class="title">getMaxListeners</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> $getMaxListeners(<span class="keyword">this</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里采取是如果对象属性存在就返回对象属性，否则返回类属性。<br>另外发现一个没什么意义的点，对非负数且不能为正无穷的判断这里用的是<code>typeof n !== &#39;number&#39; || n &lt; 0 || isNaN(n)</code>,在之前定义<code>defaultMaxListeners</code>属性时也有个相同的需求，写的是<code>typeof arg !== &#39;number&#39; || arg &lt; 0 || arg !== arg</code>，从这点也大概能推测这个库就不是一个人写的。其实还可以发现，最大监听数为浮点数也是可以的。<br>其次，这里之所以抽象出<code>$getMaxListeners</code>函数，而不是全部逻辑写到<code>getMaxListeners</code>里，是因为在<code>addListener</code>的接口里也需要判断当前最大监听数，提取出来可以减少重复代码。</p>
<h2 id="触发器传参的优化"><a href="#触发器传参的优化" class="headerlink" title="触发器传参的优化"></a>触发器传参的优化</h2><p>在事件触发时，触发器传递的参数数量是任意的，引用源码注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">These standalone emit* functions are used to optimize calling of event</div><div class="line">handlers for fast cases because emit() itself often has a variable number of</div><div class="line">arguments and can be deoptimized because of that. These functions always have</div><div class="line">the same number of arguments and thus do not get deoptimized, so the code</div><div class="line">inside them can execute faster.</div></pre></td></tr></table></figure></p>
<p>即固定参数函数调用比不定参数的调用效率更高，因此<code>emitter.emit()</code>函数传参个数在<code>三个以内</code>效率是很高的。<br>这里再以函数为三个的情况举例说明<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">len = <span class="built_in">arguments</span>.length;</div><div class="line"><span class="keyword">switch</span> (len) &#123;</div><div class="line">  <span class="comment">/* fast cases */</span></div><div class="line">  <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    emitNone(handler, isFn, <span class="keyword">this</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">    emitOne(handler, isFn, <span class="keyword">this</span>, <span class="built_in">arguments</span>[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">    emitTwo(handler, isFn, <span class="keyword">this</span>, <span class="built_in">arguments</span>[<span class="number">1</span>], <span class="built_in">arguments</span>[<span class="number">2</span>]);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">    emitThree(handler, isFn, <span class="keyword">this</span>, <span class="built_in">arguments</span>[<span class="number">1</span>], <span class="built_in">arguments</span>[<span class="number">2</span>], <span class="built_in">arguments</span>[<span class="number">3</span>]);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="comment">/* slower */</span></div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    args = <span class="keyword">new</span> <span class="built_in">Array</span>(len - <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; len; i++)</div><div class="line">      args[i - <span class="number">1</span>] = <span class="built_in">arguments</span>[i];</div><div class="line">    emitMany(handler, isFn, <span class="keyword">this</span>, args);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">emitThree</span>(<span class="params">handler, isFn, self, arg1, arg2, arg3</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (isFn)</div><div class="line">    handler.call(self, arg1, arg2, arg3);</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> len = handler.length;</div><div class="line">    <span class="keyword">var</span> listeners = arrayClone(handler, len);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">      listeners[i].call(self, arg1, arg2, arg3);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当同一事件有多个监听者时，监听函数会被按顺序放进一个数组，这里做的操作时先复制一份这个数组，然后再依次调用内部函数。<br>也就是说，在运行期间原数组的内部的增删不会对执行产生任何影响。<br>也因为这个操作避免了一些死循环事件的发生。</p>
<h2 id="添加监听器"><a href="#添加监听器" class="headerlink" title="添加监听器"></a>添加监听器</h2><p>因为<code>emitter.on</code>和<code>emitter.prependListener</code>存在重复的逻辑，所以这段实现代码也单独抽象出<code>_addListener</code>函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_addListener</span>(<span class="params">target, type, listener, prepend</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> m;</div><div class="line">  <span class="keyword">var</span> events;</div><div class="line">  <span class="keyword">var</span> existing;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>)</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'"listener" argument must be a function'</span>);</div><div class="line"></div><div class="line">  events = target._events;</div><div class="line">  <span class="keyword">if</span> (!events) &#123;<span class="comment">/* 还没看出这里if存在的意义 */</span></div><div class="line">    events = target._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">    target._eventsCount = <span class="number">0</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">/* To avoid recursion in the case that type === "newListener"! Before</span></div><div class="line">       adding it to the listeners, first emit "newListener". */</div><div class="line">    <span class="comment">/* 即第一次侦听'newListener'事件不会触发'newListener' 回调函数 */</span></div><div class="line">    <span class="keyword">if</span> (events.newListener) &#123;</div><div class="line">      target.emit(<span class="string">'newListener'</span>, type,</div><div class="line">                  listener.listener ? listener.listener : listener);</div><div class="line"></div><div class="line">      <span class="comment">/* Re-assign `events` because a newListener handler could have caused the</span></div><div class="line">         this._events to be assigned to a new object */</div><div class="line">      events = target._events;</div><div class="line">    &#125;</div><div class="line">    existing = events[type];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!existing) &#123;</div><div class="line">    <span class="comment">/* Optimize the case of one listener. Don't need the extra array object. */</span></div><div class="line">    existing = events[type] = listener;</div><div class="line">    ++target._eventsCount;<span class="comment">/* 新的事件名才会增加计数 */</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> existing === <span class="string">'function'</span>) &#123;</div><div class="line">	<span class="comment">/* 这一段的排序写的很有意思 */</span></div><div class="line">      <span class="comment">/* Adding the second element, need to change to array. */</span></div><div class="line">      existing = events[type] = prepend ? [listener, existing] :</div><div class="line">                                          [existing, listener]</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">/* If we've already got an array, just append. */</span></div><div class="line">      <span class="keyword">if</span> (prepend) &#123;</div><div class="line">        existing.unshift(listener);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        existing.push(listener);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* Check for listener leak */</span></div><div class="line">    <span class="keyword">if</span> (!existing.warned) &#123;</div><div class="line">      m = $getMaxListeners(target);</div><div class="line">      <span class="keyword">if</span> (m &amp;&amp; m &gt; <span class="number">0</span> &amp;&amp; existing.length &gt; m) &#123;</div><div class="line">        existing.warned = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">const</span> w = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Possible EventEmitter memory leak detected. '</span> +</div><div class="line">                            <span class="string">`<span class="subst">$&#123;existing.length&#125;</span> <span class="subst">$&#123;<span class="built_in">String</span>(type)&#125;</span> listeners `</span> +</div><div class="line">                            <span class="string">'added. Use emitter.setMaxListeners() to '</span> +</div><div class="line">                            <span class="string">'increase limit'</span>);</div><div class="line">        w.name = <span class="string">'MaxListenersExceededWarning'</span>;</div><div class="line">        w.emitter = target;</div><div class="line">        w.type = type;</div><div class="line">        w.count = existing.length;</div><div class="line">        process.emitWarning(w);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> target;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这一块主要是写逻辑判断，当然代码也很精炼，特别说三点：</p>
<ul>
<li><code>newListener</code>事件注册位置很重要，必须要在其他事件之前才能出现期待的效果</li>
<li><code>newListener</code>事件的回调参数分别为新增的监听事件名和<code>listener.listener ? listener.listener : listener</code></li>
<li>在事件触发之前添加的监听器的回调函数才会被调用</li>
</ul>
<h2 id="移除监听器"><a href="#移除监听器" class="headerlink" title="移除监听器"></a>移除监听器</h2><p>如果事件只有一个监听函数，即<code>_events</code>对象只含有一个属性，这是采用<code>delete</code>方式删除。<br>若事件有多个监听函数，则对应是从数组中移除特定位置元素，如果是最开头的位置，当然是<code>list.shift()</code>,是末尾就用<code>list.pop()</code>,那么中间位置呢？<br>第一个想到的当然是<code>list.splice(index, 1)</code>,但这里用了更加效率的方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* About 1.5x faster than the two-arg version of Array#splice(). */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">spliceOne</span>(<span class="params">list, index</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = index, k = i + <span class="number">1</span>, n = list.length; k &lt; n; i += <span class="number">1</span>, k += <span class="number">1</span>)</div><div class="line">    list[i] = list[k];</div><div class="line">  list.pop();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="once的实现"><a href="#once的实现" class="headerlink" title="once的实现"></a>once的实现</h2><p>源码采用三个函数实现了once的功能<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onceWrapper</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.fired) &#123;</div><div class="line">    <span class="keyword">this</span>.target.removeListener(<span class="keyword">this</span>.type, <span class="keyword">this</span>.wrapFn);</div><div class="line">    <span class="keyword">this</span>.fired = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">switch</span> (<span class="built_in">arguments</span>.length) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.listener.call(<span class="keyword">this</span>.target);</div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.listener.call(<span class="keyword">this</span>.target, <span class="built_in">arguments</span>[<span class="number">0</span>]);</div><div class="line">      <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.listener.call(<span class="keyword">this</span>.target, <span class="built_in">arguments</span>[<span class="number">0</span>], <span class="built_in">arguments</span>[<span class="number">1</span>]);</div><div class="line">      <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.listener.call(<span class="keyword">this</span>.target, <span class="built_in">arguments</span>[<span class="number">0</span>], <span class="built_in">arguments</span>[<span class="number">1</span>],</div><div class="line">                                  <span class="built_in">arguments</span>[<span class="number">2</span>]);</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">const</span> args = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">arguments</span>.length);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; ++i)</div><div class="line">          args[i] = <span class="built_in">arguments</span>[i];</div><div class="line">        <span class="keyword">this</span>.listener.apply(<span class="keyword">this</span>.target, args);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_onceWrap</span>(<span class="params">target, type, listener</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> state = &#123; <span class="attr">fired</span>: <span class="literal">false</span>, <span class="attr">wrapFn</span>: <span class="literal">undefined</span>, target, type, listener &#125;;</div><div class="line">  <span class="keyword">var</span> wrapped = onceWrapper.bind(state);</div><div class="line">  wrapped.listener = listener;</div><div class="line">  state.wrapFn = wrapped;</div><div class="line">  <span class="keyword">return</span> wrapped;</div><div class="line">&#125;</div><div class="line"></div><div class="line">EventEmitter.prototype.once = <span class="function"><span class="keyword">function</span> <span class="title">once</span>(<span class="params">type, listener</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>)</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'"listener" argument must be a function'</span>);</div><div class="line">  <span class="keyword">this</span>.on(type, _onceWrap(<span class="keyword">this</span>, type, listener));</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>而之前的版本是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_onceWrap</span>(<span class="params">target, type, listener</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> fired = <span class="literal">false</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    target.removeListener(type, g);</div><div class="line">    <span class="keyword">if</span> (!fired) &#123;</div><div class="line">      fired = <span class="literal">true</span>;</div><div class="line">      listener.apply(target, <span class="built_in">arguments</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  g.listener = listener;</div><div class="line">  <span class="keyword">return</span> g;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>相比较，原来的版本似乎更简洁，使用闭包, <code>fired</code>和<code>g()</code>的组合，保证<code>listener</code>只会调用一次。拆除两个函数，还是不定参数转固定参数以获取效率提升。<br>拆开只会闭包就用不上了，新版本采用了<code>bind</code>的写法，也是可以借鉴的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我觉得对我自己现在而言，我所接触到的代码上限就是我能写出的代码上限。毫无疑问这次的源代码学习拔高了我平时接触到的代码的上限，收获也颇多，总结为以下几点：</p>
<ul>
<li>编写一个类模块时可以参考events的设计：代码解耦合，使用prototype、this等关键字，使得代码精简，结构清晰</li>
<li>尽可能的提取公共逻辑，减少代码重复</li>
<li>特殊技巧的使用可以参考，比如定义对象特殊属性、对象属性覆盖类属性的实现</li>
<li>性能提升，events模块主要涉及到空对象创建、不定参数的函数调用转为固定参数调用、删除数组中间部分元素等方法，可以试着化为己用。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Events </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> events </tag>
            
            <tag> EventEmitter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js events模块(上)]]></title>
      <url>/2017/events-API/</url>
      <content type="html"><![CDATA[<p>node.js 基于异步事件驱动(Event-driven)，这无疑也是一种十分优秀的编程思想，这里总结下其中与之相关的一个核心模块——events模块。<br>本文主要总结使用的API，具体可参考<a href="https://nodejs.org/api/events.html" target="_blank" rel="external">官网API</a><br><a id="more"></a></p>
<h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p><code>events</code>是内置模块，但非全局变量，使用时需显示引用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div></pre></td></tr></table></figure></p>
<p><code>events</code> 提供的接口是一个类，所有调用时赋值变量需大写，且需要自行实例化。<br>官方给出的例子如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line">myEmitter.on(<span class="string">'event'</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'an event occurred!'</span>);</div><div class="line">&#125;);</div><div class="line">myEmitter.emit(<span class="string">'event'</span>);</div></pre></td></tr></table></figure></p>
<p>这里使用了ES6的语法，创建一个<code>MyEmitter</code>类继承自初始类<code>EventEmitter</code>,方便自定义修改。</p>
<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>myEmitter对象，可以当做一个事件触发器，发送一个特定事件。也可以当成一个事件监听器，侦听某一特定事件，并调用对应的事件响应函数。<br>打印一下对象,可以看到有四个属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">domain</span>: <span class="literal">null</span>, <span class="comment">/*ignore*/</span></div><div class="line">     _events: &#123; <span class="attr">event</span>: [<span class="built_in">Function</span>] &#125;, <span class="comment">/*注册事件的监听函数*/</span></div><div class="line">     _eventsCount: <span class="number">1</span>,  <span class="comment">/*监听到的事件个数*/</span></div><div class="line">     _maxListeners: <span class="literal">undefined</span> <span class="comment">/*最大监听数，默认是10个，超出会报错*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>当作为触发器时，需要给处理函数传递参数。<br>如下例，其中特别说明回调函数中的this指向监听器对象，这里指的是myEmitter。如果使用箭头函数就不会这样了，这和箭头函数的特性有关，我之前已经总结过了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line">myEmitter.on(<span class="string">'event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a, b, <span class="keyword">this</span>);</div><div class="line">  <span class="comment">/*Prints:</span></div><div class="line">       a b MyEmitter &#123;</div><div class="line">         domain: null,</div><div class="line">         _events: &#123; event: [Function] &#125;,</div><div class="line">         _eventsCount: 1,</div><div class="line">         _maxListeners: undefined &#125;*/</div><div class="line">&#125;);</div><div class="line">myEmitter.emit(<span class="string">'event'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="同步还是异步"><a href="#同步还是异步" class="headerlink" title="同步还是异步"></a>同步还是异步</h3><p>一个监听器上可以绑定多个响应函数，监听器调用响应函数默认是按照事件注册的顺序<code>同步调用</code>的，这样可以保证原有的一些业务逻辑，先注册先调用。但如果多个响应函数之间没有任何联系，就可以使用<code>setImmediate()</code>或<code>process.nextTick()</code>切换到异步流程，如下例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line">myEmitter.on(<span class="string">'event'</span>, (a, b) =&gt; &#123;</div><div class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'this happens asynchronously'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line">myEmitter.on(<span class="string">'event'</span>, (a, b) =&gt; &#123;</div><div class="line">  process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'this happens asynchronously, too'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line">myEmitter.emit(<span class="string">'event'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="监听器响应函数可仅运行一次"><a href="#监听器响应函数可仅运行一次" class="headerlink" title="监听器响应函数可仅运行一次"></a>监听器响应函数可仅运行一次</h3><p>当使用 <code>eventEmitter.on()</code>方法监听事件时，事件发生时，每次都会调用响应函数。但换成<code>eventEmitter.once()</code>就会仅处理一次。</p>
<h3 id="错误事件"><a href="#错误事件" class="headerlink" title="错误事件"></a>错误事件</h3><p>当一个事件实例对象当发生错误时，会发出<code>error</code>事件，这将被Node.js当做特殊事件处理。<br>如果该对象未对错误事件注册任何处理函数，该错误就会上抛，打印堆栈信息，进而导致Node.js<code>进程退出</code>。所以说后果还是很严重的。<br>为防止进程崩溃，必须注册至少一个监听函数。如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line">process.on(<span class="string">'uncaughtException'</span>, (err) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.error(<span class="string">'whoops! there was an error'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/*myEmitter.on('error', (err) =&gt; &#123;</span></div><div class="line">  console.error('whoops! there was an error');</div><div class="line">&#125;);*/ adviced!</div><div class="line"></div><div class="line">myEmitter.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'whoops!'</span>));</div><div class="line"><span class="comment">// Prints: whoops! there was an error</span></div></pre></td></tr></table></figure></p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>截止到现在，官房API总共包括了2个事件，15个方法(一个即将废弃，不做说明)</p>
<h3 id="Event：’newListener’"><a href="#Event：’newListener’" class="headerlink" title="Event：’newListener’"></a>Event：’newListener’</h3><p>当有新的监听函数注册时触发，回调函数有两个参数，监听函数名和监听函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line">myEmitter.on(<span class="string">'newListener'</span>, (event, listener) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(event, listener.name)</div><div class="line">    <span class="comment">/* print test testCb</span></div><div class="line">       and this callback will invoke before testCb*/</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myEmitter.on(<span class="string">'test'</span>, testCb);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testCb</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'A'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myEmitter.emit(<span class="string">'test'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="Event：’removeListener’"><a href="#Event：’removeListener’" class="headerlink" title="Event：’removeListener’"></a>Event：’removeListener’</h3><p>类似’newListener’, 当某个事件的监听函数被移除时触发。<br>例如使用<code>myEmitter.once()</code>触发一次之后,监听函数就会被移除<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line">myEmitter.on(<span class="string">'newListener'</span>, (event, listener) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`add <span class="subst">$&#123;event&#125;</span>, <span class="subst">$&#123;listener.name&#125;</span>`</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myEmitter.on(<span class="string">'removeListener'</span>, (event, listener) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`remove <span class="subst">$&#123;event&#125;</span>, <span class="subst">$&#123;listener.name&#125;</span>`</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myEmitter.once(<span class="string">'test'</span>, testCb);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testCb</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'A'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">myEmitter.emit(<span class="string">'test'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="EventEmitter-defaultMaxListeners"><a href="#EventEmitter-defaultMaxListeners" class="headerlink" title="EventEmitter.defaultMaxListeners"></a>EventEmitter.defaultMaxListeners</h3><p>类属性。最大默认监听数，缺省值为10，实例对象可以使用<code>emitter.setMaxListeners(n)</code>方法修改自身的最大监听数，如果直接修改<code>EventEmitter.defaultMaxListeners</code>则会影响所有实例。</p>
<h3 id="emitter-addListener-eventName-listener"><a href="#emitter-addListener-eventName-listener" class="headerlink" title="emitter.addListener(eventName, listener)"></a>emitter.addListener(eventName, listener)</h3><p><code>emitter.on(eventName, listener)</code>的简写，没有区别</p>
<h3 id="emitter-emit-eventName-…args"><a href="#emitter-emit-eventName-…args" class="headerlink" title="emitter.emit(eventName[, …args])"></a>emitter.emit(eventName[, …args])</h3><p>同步按注册顺序调用监听<code>eventName</code>的回调函数。<br>返回值为Boolean，如果该事件有监听器返回true，否则返回false</p>
<h3 id="emitter-eventNames"><a href="#emitter-eventNames" class="headerlink" title="emitter.eventNames()"></a>emitter.eventNames()</h3><p>返回一个数组，包含该监听器上注册的所有事件名</p>
<h3 id="emitter-getMaxListeners"><a href="#emitter-getMaxListeners" class="headerlink" title="emitter.getMaxListeners()"></a>emitter.getMaxListeners()</h3><p>返回当前最大监听数，该值可以由<code>emitter.setMaxListeners(n)</code>设置，默认等于<code>EventEmitter.defaultMaxListeners</code></p>
<h3 id="emitter-listenerCount-eventName"><a href="#emitter-listenerCount-eventName" class="headerlink" title="emitter.listenerCount(eventName)"></a>emitter.listenerCount(eventName)</h3><p>返回事件名为<code>eventName</code>的监听数</p>
<h3 id="emitter-listeners-eventName"><a href="#emitter-listeners-eventName" class="headerlink" title="emitter.listeners(eventName)"></a>emitter.listeners(eventName)</h3><p>返回一个事件名为<code>eventName</code>的所有监听函数的数组的拷贝</p>
<h3 id="emitter-on-eventName-listener"><a href="#emitter-on-eventName-listener" class="headerlink" title="emitter.on(eventName, listener)"></a>emitter.on(eventName, listener)</h3><p>监听事件<code>eventName</code>,触发时调用回调函数<code>listener</code></p>
<h3 id="emitter-once-eventName-listener"><a href="#emitter-once-eventName-listener" class="headerlink" title="emitter.once(eventName, listener)"></a>emitter.once(eventName, listener)</h3><p>监听事件<code>eventName</code>,首次触发时调用回调函数<code>listener</code>，然后移除监听该事件</p>
<h3 id="emitter-prependListener-eventName-listener"><a href="#emitter-prependListener-eventName-listener" class="headerlink" title="emitter.prependListener(eventName, listener)"></a>emitter.prependListener(eventName, listener)</h3><p>将监听函数<code>listener</code>插入到事件<code>eventName</code>触发时处理函数队列的最前面。<br>返回值为<code>emitter</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</div><div class="line"></div><div class="line">myEmitter.on(<span class="string">'newListener'</span>, (event, listener) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`add <span class="subst">$&#123;event&#125;</span>, <span class="subst">$&#123;listener.name&#125;</span>`</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myEmitter.once(<span class="string">'test'</span>, testCb);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testCb</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'A'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> that = myEmitter.prependListener(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'someone connected!'</span>); <span class="comment">/* print before 'A' */</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === that); <span class="comment">/*true*/</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">myEmitter.emit(<span class="string">'test'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="emitter-prependOnceListener-eventName-listener"><a href="#emitter-prependOnceListener-eventName-listener" class="headerlink" title="emitter.prependOnceListener(eventName, listener)"></a>emitter.prependOnceListener(eventName, listener)</h3><p>同上，区别不再赘述</p>
<h3 id="emitter-removeAllListeners-eventName"><a href="#emitter-removeAllListeners-eventName" class="headerlink" title="emitter.removeAllListeners([eventName])"></a>emitter.removeAllListeners([eventName])</h3><p>移除某事件的所有监听<br>返回emitter</p>
<h3 id="emitter-removeListener-eventName-listener"><a href="#emitter-removeListener-eventName-listener" class="headerlink" title="emitter.removeListener(eventName, listener)"></a>emitter.removeListener(eventName, listener)</h3><p>移除一个具体事件的监听，必须给出事件名和回调函数名。<br>因此，回调函数需要引用名。<br>值得注意的时，在触发某一事件后，注册在该事件上的回调函数就会按顺序执行一圈，在运行过程中再去删除监听器是不会生效的。因为……懒得写了,自己去官网看吧<br>返回emitter</p>
<h3 id="emitter-setMaxListeners-n"><a href="#emitter-setMaxListeners-n" class="headerlink" title="emitter.setMaxListeners(n)"></a>emitter.setMaxListeners(n)</h3><p>设置默认最大监听数<br>返回emitter</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结完这块官网所有API，基本掌握了如何使用，但这还远远不够。<br>events作为Node.js核心模块之一，采用纯javascript编写，暴露的API简洁实用，源码修改至今加上copyright也不过五百多行,非常适合精读。<br>本次API的总结主要为下次解读这一块的源码做铺垫。详情可参考<a href="https://github.com/nodejs/node/blob/master/lib/events.js" target="_blank" rel="external">events.js</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Events </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> events </tag>
            
            <tag> EventEmitter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bootstrap]]></title>
      <url>/2017/bootstrap/</url>
      <content type="html"><![CDATA[<p>bootstrap已经流行很久了，流行到能被吐槽只有小白才会使用，老实说我认可这种吐槽，但同时觉得这也是对bootstrap一种很高的赞誉。我从未系统看过bootstrap，每次都是拿来主义，需要啥就去找，这次仅从使用上总结下。<br><a id="more"></a></p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><code>bootstrap</code>中文释义类似“引导程序”, 是一个基于HTML和css的库，提供一些风格独特的html元素模板，同时也提供一些可选的javascript插件，总体来说是，它是一个工具库，具体来说是一个css类库。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>使用简单，只需基本html和css常识就能使用</li>
<li>响应式特性，适应各做场景使用</li>
<li>优先移动端实现，从bootstrap3开始，优先移动端风格是核心设计之一</li>
<li>浏览器兼容，兼容现代浏览器</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>简单的使用是下载目标文件或使用CDN，包括三个文件，一个css文件或js文件，外加一个依赖的jQuery的js文件</p>
<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><p>容器为两类</p>
<ul>
<li><code>.container</code>， 提供一个响应式的占据固定宽度容器</li>
<li><code>.container-fluid</code>，提供一个完整宽度的容器，宽度取决于浏览器能有多宽</li>
</ul>
<p><code>.container</code>不能嵌套使用</p>
<h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><p>网格系统，将整个页面最大分成12列。因此， 如果span12代表整个页面宽度，那么span6即代表页面一半的宽度，一次类推，span4，span3，span1，都有代表其对应的宽度。<br>网格有四类单位，区分不同的使用场景</p>
<ul>
<li>xs - 手机</li>
<li>sm - 平板</li>
<li>md - 桌面</li>
<li>lg - 大屏幕桌面</li>
</ul>
<p>至此，网格类语法可总结为<code>.col-单位-宽度</code>,eg:</p>
<ul>
<li>.col-xs-6</li>
<li>.col-md-6</li>
</ul>
<p>使用时，先添加一个<code>.row</code>类定义行，再根据需求添加列<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><p>在原始table上增加修饰类，首先需在<code>&lt;table&gt;</code>元素上填加<code>.table</code>基础类<br>eg: <code>&lt;table class=&quot;table&quot;&gt;</code></p>
<h3 id="table-striped"><a href="#table-striped" class="headerlink" title=".table-striped"></a>.table-striped</h3><p>添加斑马线效果，随后增加<code>.table-striped</code>即可<br>eg:<code>&lt;table class=&quot;table table-striped&quot;&gt;</code></p>
<h3 id="table-bordered"><a href="#table-bordered" class="headerlink" title=".table-bordered"></a>.table-bordered</h3><p>边框效果，默认无边框，添加此类增加边框效果</p>
<h3 id="table-hover"><a href="#table-hover" class="headerlink" title=".table-hover"></a>.table-hover</h3><p>鼠标悬停选中效果</p>
<h3 id="table-condensed"><a href="#table-condensed" class="headerlink" title=".table-condensed"></a>.table-condensed</h3><p>内容压缩效果</p>
<h3 id="table-responsive"><a href="#table-responsive" class="headerlink" title=".table-responsive"></a>.table-responsive</h3><ul>
<li>将任何 .table 元素包裹在 .table-responsive 元素内，即可创建响应式表格，其会在小屏幕设备上（小于768px）水平滚动。当屏幕大于 768px 宽度时，水平滚动条消失</li>
<li>响应式表格使用了 overflow-y: hidden 属性，这样就能将超出表格底部和顶部的内容截断。特别是，也可以截断下拉菜单和其他第三方组件。</li>
</ul>
<p>eg:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-responsive"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></div><div class="line">    ...</div><div class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="content-status"><a href="#content-status" class="headerlink" title="content status"></a>content status</h3><p>给表格内容添加背景色</p>
<ul>
<li><code>.active</code>        鼠标悬停在行或单元格上时所设置的颜色</li>
<li><code>.success</code>    标识成功或积极的动作</li>
<li><code>.info</code>        标识普通的提示信息或动作</li>
<li><code>.warning</code>    标识警告或需要用户注意</li>
<li><code>.danger</code>        标识危险或潜在的带来负面影响的动作</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- On rows --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"success"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- On cells (`td` or `th`) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"warning"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"danger"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><p>图片处理</p>
<h3 id="img-rounded"><a href="#img-rounded" class="headerlink" title=".img-rounded"></a>.img-rounded</h3><p>圆角处理，IE8不支持该属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"xxx.jpg"</span> <span class="attr">class</span>=<span class="string">"img-rounded"</span> <span class="attr">alt</span>=<span class="string">"Cinque Terre"</span> <span class="attr">width</span>=<span class="string">"304"</span> <span class="attr">height</span>=<span class="string">"236"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="img-circle"><a href="#img-circle" class="headerlink" title=".img-circle"></a>.img-circle</h3><p>将图片转换成圆形，不支持IE8</p>
<h3 id="img-thumbnail"><a href="#img-thumbnail" class="headerlink" title=".img-thumbnail"></a>.img-thumbnail</h3><p>缩略图处理，加了个外边框</p>
<h3 id="img-responsive"><a href="#img-responsive" class="headerlink" title=".img-responsive"></a>.img-responsive</h3><p>原理是设置<code>display:block</code>, <code>max-width: 100%;</code>, <code>height: auto;</code></p>
<h3 id="embed-responsive"><a href="#embed-responsive" class="headerlink" title=".embed-responsive"></a>.embed-responsive</h3><p>嵌套内容响应式显示。例如:</p>
<ul>
<li><code>&lt;iframe&gt;</code></li>
<li><code>&lt;video&gt;</code></li>
<li><code>&lt;embed&gt;</code></li>
</ul>
<p>eg:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"embed-responsive embed-responsive-16by9"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">class</span>=<span class="string">"embed-responsive-item"</span> <span class="attr">src</span>=<span class="string">"..."</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="照片墙"><a href="#照片墙" class="headerlink" title="照片墙"></a>照片墙</h3><p>结合网格系统，可以实现照片墙的效果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"Picture1.jpg"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Picture1<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Picture1.jpg"</span> <span class="attr">alt</span>=<span class="string">"x"</span> <span class="attr">style</span>=<span class="string">"width:150px;height:150px"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"Picture2.jpg"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Picture2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Picture2.jpg"</span> <span class="attr">alt</span>=<span class="string">"xx"</span> <span class="attr">style</span>=<span class="string">"width:150px;height:150px"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"Picture3.jpg"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Picture3<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"cinqueterre.jpg"</span> <span class="attr">alt</span>=<span class="string">"xxx"</span> <span class="attr">style</span>=<span class="string">"width:150px;height:150px"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Jumbotron"><a href="#Jumbotron" class="headerlink" title="Jumbotron"></a>Jumbotron</h2><p>巨幕，bootstrap标志性的文本渲染。给文本加上半透明背景，同时增大字体达到强调的效果。<br>一般结合container使用，如果不是放在某个容器内，jumbotron则扩展至屏幕宽度<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bootstrap Header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Bootstrap is the most popular HTML, CSS, and JS framework for developing</div><div class="line">    responsive, mobile-first projects on the web.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is another text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="page-header"><a href="#page-header" class="headerlink" title=".page-header"></a>.page-header</h3><p>类似巨幕里的大标题，<code>.page-header</code>实现一个大标题以及一条水平分隔线<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Example Page Header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="well"><a href="#well" class="headerlink" title=".well"></a>.well</h3><p>类似巨幕里的背景渲染。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span>Basic Well<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>另外还可增加尺寸修饰</p>
<ul>
<li>.well-sm 小尺寸</li>
<li>.well-lg 大尺寸</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well well-lg"</span>&gt;</span>Large Well<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Alerts"><a href="#Alerts" class="headerlink" title="Alerts"></a>Alerts</h2><p>消息提示框，基础类为<code>.alert</code>,后续修饰继续添加到后面。</p>
<h3 id="显示提示"><a href="#显示提示" class="headerlink" title="显示提示"></a>显示提示</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Success!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Indicates a successful or positive action.</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>提示级别有四类:</p>
<ul>
<li><code>.alert-success</code>, 绿色背景，表示成功操作</li>
<li><code>.alert-info</code>,    蓝色背景，表示提示内容</li>
<li><code>.alert-warning</code>, 橙色背景，表警示</li>
<li><code>.alert-danger</code>,  粉色背景，错误信息</li>
</ul>
<h3 id="关闭提示"><a href="#关闭提示" class="headerlink" title="关闭提示"></a>关闭提示</h3><p>添加一个包含<code>class=&quot;close&quot;</code>, <code>data-dismiss=&quot;alert&quot;</code> 的链接或者按钮接口, 点击关闭<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span> <span class="attr">aria-label</span>=<span class="string">"close"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Success!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Indicates a successful or positive action.</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="动态效果"><a href="#动态效果" class="headerlink" title="动态效果"></a>动态效果</h3><p><code>.fade</code>以及<code>.in</code>增加关闭时消失的动态效果(效果不是很明显)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success fade in"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Buttons"><a href="#Buttons" class="headerlink" title="Buttons"></a>Buttons</h2><p>按钮，提供多种形态的按钮选择。基础类是<code>.btn</code>。</p>
<h3 id="Button-Styles"><a href="#Button-Styles" class="headerlink" title="Button Styles"></a>Button Styles</h3><ul>
<li><code>.btn-default</code> - 默认白底黑字</li>
<li><code>.btn-primary</code> - 蓝底白字</li>
<li><code>.btn-success</code> - 绿底白字</li>
<li><code>.btn-info</code>    - 蓝底白字</li>
<li><code>.btn-warning</code> - 橙底白字</li>
<li><code>.btn-danger</code>  - 红底白字</li>
<li><code>.btn-link</code>    - 蓝色链接，无按钮形态</li>
</ul>
<p>按钮类可用在 <code>&lt;a&gt;</code>, <code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>上，效果相同，某些情况下布局会有差异。用法如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>Link Button<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span> <span class="attr">value</span>=<span class="string">"Input Button"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span> <span class="attr">value</span>=<span class="string">"Submit Button"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Button-Sizes"><a href="#Button-Sizes" class="headerlink" title="Button Sizes"></a>Button Sizes</h3><p>和列分类类似，定义不同的按钮大小</p>
<ul>
<li><code>.btn-xs</code></li>
<li><code>.btn-sm</code></li>
<li><code>.btn-md</code></li>
<li><code>.btn-lg</code><h3 id="Block-Level-Buttons"><a href="#Block-Level-Buttons" class="headerlink" title="Block Level Buttons"></a>Block Level Buttons</h3>按钮默认是<code>inline</code>元素，可以转换成<code>block</code>级别，增加<code>.btn-block</code>类即可<h3 id="Active-Disabled-Buttons"><a href="#Active-Disabled-Buttons" class="headerlink" title="Active/Disabled Buttons"></a>Active/Disabled Buttons</h3></li>
<li><code>.active</code>类修饰按钮按下时的状态，形态会从蓝色转为深蓝色</li>
<li><code>.disabled</code>类修饰按钮禁用状态，鼠标不可点击</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary active"</span>&gt;</span>Active Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary disabled"</span>&gt;</span>Disabled Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Button-Groups"><a href="#Button-Groups" class="headerlink" title="Button Groups"></a>Button Groups</h2><p>定义多个按钮时，按钮直接会有缝隙，但定义按钮组则不会, 基础类为<code>.btn-group</code>，表示水平按钮组，垂直按钮组则使用<code>.btn-group-vertical</code>基础类。</p>
<h3 id="Button-Groups-Styles"><a href="#Button-Groups-Styles" class="headerlink" title="Button Groups Styles"></a>Button Groups Styles</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Samsung<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Sony<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Button-Groups-Sizes"><a href="#Button-Groups-Sizes" class="headerlink" title="Button Groups Sizes"></a>Button Groups Sizes</h3><p><code>.btn-group-*</code> 修饰类决定所有按钮大小，eg: <code>.btn-group-lg</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-lg"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Samsung<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Sony<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Button-Groups-Justified"><a href="#Button-Groups-Justified" class="headerlink" title="Button Groups Justified"></a>Button Groups Justified</h3><p><code>.btn-group-justified</code> 修饰类让按钮扩展到整个屏幕宽度<br>此修饰类不能修饰<code>.btn-group-vertical</code>基础类<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-justified"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Samsung<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Sony<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果使用<code>btn-group-justified</code>和<code>&lt;button&gt;</code>,则需包装一层按钮组，如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-justified"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Samsung<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Sony<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Nesting-Button-Groups-amp-Dropdown-Menus"><a href="#Nesting-Button-Groups-amp-Dropdown-Menus" class="headerlink" title="Nesting Button Groups &amp; Dropdown Menus"></a>Nesting Button Groups &amp; Dropdown Menus</h3><p>按钮组可以嵌套按钮组，实现下拉菜单。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Samsung<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">    Sony <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">role</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Tablet<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Smartphone<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Split-Button-Dropdowns"><a href="#Split-Button-Dropdowns" class="headerlink" title="Split Button Dropdowns"></a>Split Button Dropdowns</h3><p>分裂的按钮下拉菜单<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Sony<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">role</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Tablet<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Smartphone<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Glyphicons"><a href="#Glyphicons" class="headerlink" title="Glyphicons"></a>Glyphicons</h2><p>字体图标。Glyphicons提供250+免费的字体图标给bootstrap使用。<br>syntax:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Badges-and-Labels"><a href="#Badges-and-Labels" class="headerlink" title="Badges and Labels"></a>Badges and Labels</h2><ul>
<li><code>.badge</code>修饰类让背景显示为一个小圆圈。通常是显示一个数字，与其他内容配合使用。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Updates <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Primary <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>.label</code>修饰类，相当于将修饰内容打一个标签，标签大小自适应</li>
<li>label也可以增加状态类，类似于alert</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Example <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span>&gt;</span>New<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span>&gt;</span>Default Label<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-primary"</span>&gt;</span>Primary Label<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-success"</span>&gt;</span>Success Label<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-info"</span>&gt;</span>Info Label<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-warning"</span>&gt;</span>Warning Label<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-danger"</span>&gt;</span>Danger Label<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Progress-Bar"><a href="#Progress-Bar" class="headerlink" title="Progress Bar"></a>Progress Bar</h2><p>进度条,IE9及以下的浏览器不支持，因为他们不支持css3的转换和动画。<br>基础类为<code>.process-bar</code>。</p>
<h3 id="Basic-Progress-Bar"><a href="#Basic-Progress-Bar" class="headerlink" title="Basic Progress Bar"></a>Basic Progress Bar</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">role</span>=<span class="string">"progressbar"</span> <span class="attr">aria-valuenow</span>=<span class="string">"70"</span></span></div><div class="line">  <span class="attr">aria-valuemin</span>=<span class="string">"0"</span> <span class="attr">aria-valuemax</span>=<span class="string">"100"</span> <span class="attr">style</span>=<span class="string">"width:70%"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>70% Complete<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>.sr-only</code>具体是否在进度条上显示内容</p>
<h3 id="Colored-Progress-Bars"><a href="#Colored-Progress-Bars" class="headerlink" title="Colored Progress Bars"></a>Colored Progress Bars</h3><p>进度条也有状态类，分别渲染了不同的颜色</p>
<ul>
<li><code>.progress-bar-success</code></li>
<li><code>.progress-bar-info</code></li>
<li><code>.progress-bar-warning</code></li>
<li><code>.progress-bar-danger</code></li>
</ul>
<p>颜色依次是绿蓝橙红。eg：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-success"</span> <span class="attr">role</span>=<span class="string">"progressbar"</span> <span class="attr">aria-valuenow</span>=<span class="string">"40"</span></span></div><div class="line">  <span class="attr">aria-valuemin</span>=<span class="string">"0"</span> <span class="attr">aria-valuemax</span>=<span class="string">"100"</span> <span class="attr">style</span>=<span class="string">"width:40%"</span>&gt;</div><div class="line">    40% Complete (success)</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Striped-Progress-Bars"><a href="#Striped-Progress-Bars" class="headerlink" title="Striped Progress Bars"></a>Striped Progress Bars</h3><p><code>.progress-bar-striped</code>类增加条纹效果，配个<code>.active</code>类，可以让条纹有动态效果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-striped active"</span> <span class="attr">role</span>=<span class="string">"progressbar"</span></span></div><div class="line">  <span class="attr">aria-valuenow</span>=<span class="string">"40"</span> <span class="attr">aria-valuemin</span>=<span class="string">"0"</span> <span class="attr">aria-valuemax</span>=<span class="string">"100"</span> <span class="attr">style</span>=<span class="string">"width:40%"</span>&gt;</div><div class="line">    40%</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Stacked-Progress-Bars"><a href="#Stacked-Progress-Bars" class="headerlink" title="Stacked Progress Bars"></a>Stacked Progress Bars</h3><p>堆叠的进度条，如果把多个进度条让在一个容器里，会有堆叠的效果</p>
<h3 id="js-plugin"><a href="#js-plugin" class="headerlink" title="js plugin"></a>js plugin</h3><p>进度条的增减是修改<code>style</code>属性里的<code>width</code>属性值实现的。可使用js动态修改css的方法实现进度条的更新。jquery操作方式如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(selector).css(<span class="string">"width"</span>, value + <span class="string">"%"</span>).text(value + <span class="string">"%"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h2><p>分页导航</p>
<h3 id="Basic-Pagination"><a href="#Basic-Pagination" class="headerlink" title="Basic Pagination"></a>Basic Pagination</h3><p>通常是由一个<code>&lt;ul&gt;</code>元素和<code>.pagination</code>基础类组成。</p>
<ul>
<li><code>.active</code>类修饰选中效果</li>
<li><code>.disabled</code>类修饰禁用效果</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Pagination-Sizes"><a href="#Pagination-Sizes" class="headerlink" title="Pagination Sizes"></a>Pagination Sizes</h3><p>分页导航的大小</p>
<ul>
<li><code>.pagination-lg</code> 大导航</li>
<li><code>.pagination-sm</code> 小导航</li>
</ul>
<h3 id="Pager"><a href="#Pager" class="headerlink" title="Pager"></a>Pager</h3><p>提供上一页和下一页选项。分别由<code>.previous</code>和<code>.next</code>类修饰<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"previous"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Breadcrumbs"><a href="#Breadcrumbs" class="headerlink" title="Breadcrumbs"></a>Breadcrumbs</h3><p>面包屑导航，即分层次导航<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Private<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Pictures<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>Vacation<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="List-Groups"><a href="#List-Groups" class="headerlink" title="List Groups"></a>List Groups</h2><p>一个列表组通常由<code>&lt;ul&gt;</code>, <code>.list-group</code> 和 <code>&lt;li&gt;</code>, <code>.list-group-item</code>组成。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>First item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>Second item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>Third item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li><code>&lt;li&gt;</code>元素也可替换为<code>&lt;a&gt;</code></li>
<li><code>.active</code>类修饰选中效果</li>
<li><code>.disable</code>类修饰禁用效果</li>
<li><code>.list-group-item-*</code>类修饰状态，仍然是<code>success</code>,<code>info</code>, <code>warning</code>和<code>danger</code></li>
</ul>
<h3 id="Custom-Content"><a href="#Custom-Content" class="headerlink" title="Custom Content"></a>Custom Content</h3><p>修饰自定义内容风格</p>
<ul>
<li><code>.list-group-item-heading</code> 自定义内容头</li>
<li><code>.list-group-item-text</code> 自定义内容主体</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item active"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"list-group-item-heading"</span>&gt;</span>First List Group Item Heading<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"list-group-item-text"</span>&gt;</span>List Group Item Text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"list-group-item-heading"</span>&gt;</span>Second List Group Item Heading<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"list-group-item-text"</span>&gt;</span>List Group Item Text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item list-group-item-danger disable"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"list-group-item-heading"</span>&gt;</span>Third List Group Item Heading<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"list-group-item-text"</span>&gt;</span>List Group Item Text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Panels"><a href="#Panels" class="headerlink" title="Panels"></a>Panels</h2><p>面板。原理是一个带有边框的盒子，并且设置了一定的padding。</p>
<ul>
<li>基础类为<code>.panel</code>,</li>
<li>标题修饰类为<code>.panel-heading</code></li>
<li>内容主体修饰类为<code>.panel-body</code></li>
<li>尾部修饰类为<code>.panel-footer</code></li>
<li>自定义名称修饰类<code>.panel-title</code></li>
<li>颜色状态类为<code>.panel-*</code>,分别有<code>default</code>,<code>primary</code>,<code>info</code>,<code>success</code>,<code>warning</code>,<code>danger</code></li>
<li>面板组修饰类<code>.panel-group</code>,类似按钮组的逻辑</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-danger"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></div><div class="line">      header</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></div><div class="line">      body</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span></div><div class="line">      footer</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Dropdown"><a href="#Dropdown" class="headerlink" title="Dropdown"></a>Dropdown</h2><p>下拉菜单， 基础类为<code>.dropdown</code></p>
<ul>
<li>打开菜单一般是使用一个链接或按钮，该元素带有<code>.dropdown-toggle</code>类及属性<code>data-toggle=&quot;dropdown&quot;</code>。</li>
<li><code>.caret</code>类修饰一个小的箭头图标。表示该按钮为下拉按钮</li>
<li>一个带有<code>.dropdown-menu</code>类的<code>&lt;ul&gt;</code>元素构成下拉菜单内容选项</li>
<li><code>.dropdown-header</code>类修饰菜单头</li>
<li><code>.divider</code>类修饰分隔符</li>
<li><code>..disabled</code>类修饰禁用菜单内容</li>
<li><code>.dropdown-menu-right</code>类可让菜单栏右侧对齐(strange behavior)</li>
<li><code>.dropup</code>类替换dropdown可让菜单栏向上拉</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Dropdown Example</div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu dropdown-menu-right"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown-header"</span>&gt;</span>Dropdown header 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown-header"</span>&gt;</span>Dropdown header 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>About Us<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Collapse"><a href="#Collapse" class="headerlink" title="Collapse"></a>Collapse</h2><p>折叠显示。当需要隐藏或显示大量内容时非常实用。基础类为<code>.collapse</code></p>
<ul>
<li>折叠开关一般是使用一个链接或按钮，该元素带有属性<code>data-toggle=&quot;collapse&quot;</code>以及<code>data-target=&quot;#id&quot;</code>,该<code>id</code>指向基础类修饰的需要折叠的内容id。如果使用<code>&lt;a&gt;</code>元素，<code>data-target</code>可用<code>href</code>代替</li>
<li>折叠的内容默认不显示，但添加<code>.in</code>类可默认显示类容</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#demo"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse in"</span>&gt;</span>Collapsible<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">class</span>=<span class="string">"collapse"</span>&gt;</span></div><div class="line">Lorem ipsum dolor text....</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Collapsible-Panel"><a href="#Collapsible-Panel" class="headerlink" title="Collapsible Panel"></a>Collapsible Panel</h3><p>可折叠的panel，基础类为<code>panel-collapse</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">href</span>=<span class="string">"#collapse1"</span>&gt;</span>Collapsible panel<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"collapse1"</span> <span class="attr">class</span>=<span class="string">"panel-collapse collapse panel-primary in"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>Panel Head<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>Panel Body<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span>Panel Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Collapsible-List-Group"><a href="#Collapsible-List-Group" class="headerlink" title="Collapsible List Group"></a>Collapsible List Group</h3><p>借助<code>Collapsible Panel</code>的list group<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">href</span>=<span class="string">"#collapse1"</span>&gt;</span>Collapsible list group<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"collapse1"</span> <span class="attr">class</span>=<span class="string">"panel-collapse collapse"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Accordion"><a href="#Accordion" class="headerlink" title="Accordion"></a>Accordion</h3><p>手风琴折叠，通过使用<code>data-parent</code>属性，让每个折叠子选项指向同一父元素，从而达到当其中子选项展开时，上一个展开的选项自动折叠，从而到达类似手风琴的折叠效果。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-group"</span> <span class="attr">id</span>=<span class="string">"accordion"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-parent</span>=<span class="string">"#accordion"</span> <span class="attr">href</span>=<span class="string">"#collapse1"</span>&gt;</span></div><div class="line">        Collapsible Group 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"collapse1"</span> <span class="attr">class</span>=<span class="string">"panel-collapse collapse in"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit,</div><div class="line">      sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad</div><div class="line">      minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea</div><div class="line">      commodo consequat.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-parent</span>=<span class="string">"#accordion"</span> <span class="attr">href</span>=<span class="string">"#collapse2"</span>&gt;</span></div><div class="line">        Collapsible Group 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"collapse2"</span> <span class="attr">class</span>=<span class="string">"panel-collapse collapse"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit,</div><div class="line">      sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad</div><div class="line">      minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea</div><div class="line">      commodo consequat.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-parent</span>=<span class="string">"#accordion"</span> <span class="attr">href</span>=<span class="string">"#collapse3"</span>&gt;</span></div><div class="line">        Collapsible Group 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"collapse3"</span> <span class="attr">class</span>=<span class="string">"panel-collapse collapse"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit,</div><div class="line">      sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad</div><div class="line">      minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea</div><div class="line">      commodo consequat.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h2><ul>
<li>网页中的标签通常定义在一个无序列表<code>&lt;ul&gt;</code>元素中，默认是垂直方向的</li>
<li>如果想创建一个水平方向的菜单，添加<code>.list-inline</code>类至<code>&lt;ul&gt;</code>元素即可</li>
<li>除了自定义方式之外，也可以使用bootstrap 的标签类，基础类为<code>.nav</code>,<code>.nav-tabs</code></li>
</ul>
<p>eg:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Menu 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Menu 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Menu 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">``` </div><div class="line"></div><div class="line">### Tabs With Dropdown Menu</div><div class="line">```html</div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Menu 1</div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Submenu 1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Submenu 1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Submenu 1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Menu 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Menu 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Pills-style-Tabs"><a href="#Pills-style-Tabs" class="headerlink" title="Pills style Tabs"></a>Pills style Tabs</h3><ul>
<li>胶囊风格的标签，基础类为<code>.nav-pills</code></li>
<li>垂直风格的胶囊标签，增加修饰类<code>.nav-stacked</code></li>
<li>下拉菜单的实现同普通菜单</li>
<li>居中分布的标签，使用修饰类<code>.nav-justified</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills nav-stacked"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Menu 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Menu 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Menu 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Toggleable-Dynamic-Tabs"><a href="#Toggleable-Dynamic-Tabs" class="headerlink" title="Toggleable / Dynamic Tabs"></a>Toggleable / Dynamic Tabs</h3><p>给标签加上自动切换的效果</p>
<ul>
<li>给每一个链接增加<code>data-toggle=&quot;tab&quot;</code>属性, 实现点击时动态切换<code>.active</code>类</li>
<li>可以指定切换后的内容展现，<code>href</code>属性为指向内容的<code>id</code></li>
<li>指定内容需被包裹在一层<code>&lt;div&gt;</code>中，并且带有<code>.tab-pane</code>类</li>
<li>还可以添加<code>.fade</code>, <code>.in</code> 等修饰类增加动态效果</li>
<li>如果是pills，<code>data-toggle=&quot;pill&quot;</code>, 其它与tabs一致</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"pill"</span> <span class="attr">href</span>=<span class="string">"#home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"pill"</span> <span class="attr">href</span>=<span class="string">"#menu1"</span>&gt;</span>Menu 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"pill"</span> <span class="attr">href</span>=<span class="string">"#menu2"</span>&gt;</span>Menu 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"home"</span> <span class="attr">class</span>=<span class="string">"tab-pane fade in active"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Some content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu1"</span> <span class="attr">class</span>=<span class="string">"tab-pane fade"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Menu 1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Some content in menu 1.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu2"</span> <span class="attr">class</span>=<span class="string">"tab-pane fade"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Menu 2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Some content in menu 2.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Navigation-Bars"><a href="#Navigation-Bars" class="headerlink" title="Navigation Bars"></a>Navigation Bars</h2><p>导航栏，导航与标签的区别不是很大，我个人的理解是导航即放在特定位置的菜单。</p>
<ul>
<li>基础类为<code>.navbar</code></li>
<li>颜色修饰类有<code>.navbar-default</code>,<code>.navbar-primary</code>,<code>.navbar-inverse</code></li>
<li>位置修饰类有<code>.navbar-fixed-top</code>, <code>.navbar-fixed-buttom</code>,固定导航栏的位置</li>
<li>内容修饰类<code>.navbar-header</code>,<code>.navbar-brand</code>,<code>.navbar-nav</code></li>
<li>针对内容<code>.navbar-nav</code>的修饰，还可以追加<code>.navbar-right</code>类让导航条浮动在右边</li>
<li>也可以结合dropdown做下拉菜单导航</li>
<li>隐藏导航条，在<code>.collapse</code>基础类上增加<code>.navbar-collapse</code>类,一般用于在窗口小于一定宽度时折叠导航, </li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#myNavbar"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>                        </div><div class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>WebSiteName<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"myNavbar"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Page 1 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Page 1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Page 1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Page 1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Page 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Page 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> Sign Up<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-log-in"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h2><p>bootstrap有三种类型的表单。</p>
<ul>
<li>Vertical form (default, <code>&lt;label&gt;</code>元素独占一行) </li>
<li>Horizontal form, <code>&lt;form&gt;</code>元素添加<code>.form-horizontal</code>类，<code>&lt;label&gt;</code>元素添加<code>.control-label</code>类</li>
<li>Inline form, <code>&lt;form&gt;</code>元素添加<code>.form-inline</code>类</li>
</ul>
<p>一些标准规则如下：</p>
<ul>
<li>总是添加<code>&lt;form role=&quot;form&quot;&gt;</code>, 对非桌面环境友好</li>
<li>将<code>label</code>和<code>form</code>元素包裹在<code>&lt;div&gt;</code>元素中，如<code>&lt;div class=&quot;form-group&quot;&gt;</code>，从而保证合适的空白空间</li>
<li>给所有的文本输入元素如<code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>添加<code>.form-control</code>类，保证它们宽度均为100%</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email address:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pwd"</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"pwd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Remember me<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Modal"><a href="#Modal" class="headerlink" title="Modal"></a>Modal</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Trigger the modal with a button --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-info btn-lg"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#myModal"</span>&gt;</span>Open Modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Modal --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myModal"</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">role</span>=<span class="string">"dialog"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- Modal content--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span>&gt;</span>Modal Header<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Some text in the modal.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>开关部分:</p>
<ul>
<li><code>data-toggle=&quot;modal&quot;</code>打开模态框</li>
<li><code>data-target=&quot;#myModal&quot;</code> 指向模态框内容部分的id</li>
</ul>
<p>框体部分:</p>
<ul>
<li>模态框最外层的<code>&lt;div&gt;</code>必须有一个id，作为开关的指向</li>
<li>基础类为<code>.modal</code>, <code>.fade</code>修饰类增加消逝效果</li>
<li><code>.modal-dialog</code>类设置合适的宽度和margin</li>
</ul>
<p>主体内容部分:</p>
<ul>
<li>最外层是一个带有<code>.modal-content</code>类的<code>&lt;div&gt;</code>，包裹着模态框的header,body和footer</li>
<li><code>.close</code>类修饰关闭按钮，<code>&amp;times;</code>是关闭图标的实体符号</li>
<li><code>.modal-title</code>类修饰header标题</li>
<li><code>.modal-body</code>,<code>.modal-footer</code>分别修饰内容和框底</li>
<li>给<code>&lt;button&gt;</code>按钮添加<code>.data-dismiss=&quot;modal&quot;</code>属性可关闭模态框</li>
<li>模态框大小在<code>.modal-dialog</code>类上添加修饰类<code>modal-lg</code>或<code>.modal-sm</code></li>
</ul>
<h2 id="Tooltip"><a href="#Tooltip" class="headerlink" title="Tooltip"></a>Tooltip</h2><p>提示框。</p>
<ul>
<li>给一个元素添加<code>data-toggle=&quot;tooltip&quot;</code>属性即可创建一个提示框</li>
<li><code>title</code>属性的类型为具体的提示内容</li>
<li>tooltip功能必须被jquery初始化，即选中具体的元素，调用它的<code>tooltip()</code>方法</li>
<li><code>data-placement</code>属性决定提示框的位置，属性值有上下左右</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//js初始化</span></div><div class="line">&lt;script&gt;</div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'[data-toggle="tooltip"]'</span>).tooltip(); </div><div class="line">&#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="Popover"><a href="#Popover" class="headerlink" title="Popover"></a>Popover</h2><p>和提示框类似</p>
<ul>
<li><code>data-toggle=&quot;popover&quot;</code>创建，需要js初始化</li>
<li>提示内容在<code>data-content</code>中</li>
<li><code>data-placement</code>决定位置</li>
<li><code>data-trigger=&quot;hover&quot;</code>,弹窗只在悬浮时呈现，如果值为<code>focus</code>,需要点击空白区域才能关闭</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'[data-toggle="popover"]'</span>).popover(); </div><div class="line">&#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="Scrollspy"><a href="#Scrollspy" class="headerlink" title="Scrollspy"></a>Scrollspy</h2><p>滑动监听，切换导航。</p>
<ul>
<li>给需要滚动部分的元素添加<code>data-spy=&quot;scroll&quot;</code>属性，通常是<code>&lt;body&gt;</code>元素，该元素的<code>position</code>css值需为<code>relative</code>才能生效。</li>
<li>再添加<code>data-target</code>属性，属性值为导航条的id或者类，从而让滚动和导航连接起来</li>
<li>导航链接必须匹配滑动元素内部内容的id</li>
<li><code>data-offset</code>是个可选属性，用来微调滑动切换时的位移，默认10px</li>
</ul>
<h2 id="Affix"><a href="#Affix" class="headerlink" title="Affix"></a>Affix</h2><p>允许一个元素变成某个区域或页面的固定部分。通常用在导航条，下拉时固定在顶端。<br>示例将一个水平导航下拉时固定在顶部：</p>
<ul>
<li>给<code>&lt;nav&gt;</code>元素添加<code>data-spy=&quot;affix&quot;</code>属性以及<code>data-offset-top</code>属性</li>
<li><code>data-offset-top</code>的属性值即为触发条件的下拉位移，同理还存在<code>data-offset-bottom</code>属性</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">      body &#123;</div><div class="line">          position: relative; </div><div class="line">      &#125;</div><div class="line">      .affix &#123;</div><div class="line">          top:0;</div><div class="line">          width: 100%;</div><div class="line">          z-index: 9999 !important;</div><div class="line">      &#125;</div><div class="line">      .navbar &#123;</div><div class="line">          margin-bottom: 0px;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      .affix ~ .container-fluid &#123;</div><div class="line">         position: relative;</div><div class="line">         top: 50px;</div><div class="line">      &#125;</div><div class="line">      #section1 &#123;padding-top:50px;height:500px;color: #fff; background-color: #1E88E5;&#125;</div><div class="line">      #section2 &#123;padding-top:50px;height:500px;color: #fff; background-color: #673ab7;&#125;</div><div class="line">      #section3 &#123;padding-top:50px;height:500px;color: #fff; background-color: #ff9800;&#125;</div><div class="line">      #section41 &#123;padding-top:50px;height:500px;color: #fff; background-color: #00bcd4;&#125;</div><div class="line">      #section42 &#123;padding-top:50px;height:500px;color: #fff; background-color: #009688;&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">data-spy</span>=<span class="string">"scroll"</span> <span class="attr">data-target</span>=<span class="string">".navbar"</span> <span class="attr">data-offset</span>=<span class="string">"20"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span> <span class="attr">style</span>=<span class="string">"background-color:#F44336;color:#fff;height:200px;"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Scrollspy &amp; Affix Example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Fixed navbar on scroll<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Scroll this page to see how the navbar behaves with data-spy="affix" and data-spy="scrollspy".<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>The navbar is attached to the top of the page after you have scrolled a specified amount of pixels, and the links in the navbar are automatically updated based on scroll position.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span> <span class="attr">data-spy</span>=<span class="string">"affix"</span> <span class="attr">data-offset-top</span>=<span class="string">"197"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#myNavbar"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>                        </div><div class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>WebSiteName<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"myNavbar"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#section1"</span>&gt;</span>Section 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#section2"</span>&gt;</span>Section 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#section3"</span>&gt;</span>Section 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Section 4 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#section41"</span>&gt;</span>Section 4-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#section42"</span>&gt;</span>Section 4-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span>    </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"section1"</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Section 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"section2"</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Section 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"section3"</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Section 3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"section41"</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Section 4 Submenu 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"section42"</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Section 4 Submenu 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> CSS </category>
            
            <category> Bootstrap </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bootstrap </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS]]></title>
      <url>/2017/css/</url>
      <content type="html"><![CDATA[<p>总结过了html，自然不能少了css，同样我几乎没系统看过，虽然我一直知道css不简单，手写css是需要过硬基础的，本文重点记录学习过程中的基础内容，可供需要时查阅。<br><a id="more"></a></p>
<h2 id="作用及使用"><a href="#作用及使用" class="headerlink" title="作用及使用"></a>作用及使用</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>css作为视图层决定了网页的展现方式，html决定了内容，css则决定了内容的呈现方式。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>css有三种使用方式</p>
<ul>
<li>inline 通过元素的<code>style</code>属性定义</li>
<li>internal 通过页面头部中的<code>&lt;style&gt;</code>元素定义</li>
<li>external 通过页面头部中的<code>&lt;link&gt;</code>元素链接一个外部的样式表</li>
</ul>
<h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><p><code>selector {property: value; ...}</code><br>eg:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">color</span>: blue;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>selector - 选择器，指向要渲染的元素</li>
<li>property - css属性</li>
<li>value - css属性值</li>
<li>定义多个属性时用<code>分号</code>分隔</li>
</ul>
<h2 id="css-selectors"><a href="#css-selectors" class="headerlink" title="css selectors"></a>css selectors</h2><p>css的选择器是基于目标元素的元素名、id、类、元素属性等特征，找出所有符合条件的元素。</p>
<ul>
<li>id selector <code>#id {property:value;}</code></li>
<li>class selector <code>.class {property:value;}</code></li>
<li>element selector <code>elementName {property:value;}</code></li>
<li><p>当然也能混合使用定位到具体的的元素，例如<code>p.center {text-align: center}</code>。即定位到类为center的p元素</p>
</li>
<li><p>group selectors 当某些元素的样式相同是可以一起定义，去除重复代码，例如</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="css-属性"><a href="#css-属性" class="headerlink" title="css 属性"></a>css 属性</h2><p>css属性如同html元素，数量较多，但各司其职。</p>
<h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><p>颜色有三种表示方式：</p>
<ol>
<li>颜色名， 类似于<code>red</code>, <code>green</code>等，html和css支持140种标准颜色名</li>
<li>RGB， eg:<code>rgb(255,0,0)</code></li>
<li>十六进制表示， eg:<code>#FF0000</code></li>
</ol>
<p>css3则新增了更多的表示方法，常用的有</p>
<ul>
<li>RGBA, eg:<code>rgba(255, 0, 0, 0.2);</code>最后一个值的范围是<code>0.0-1.0</code>,代表透明度，0代表完全透明，1表示纯色</li>
</ul>
<h3 id="backgrounds"><a href="#backgrounds" class="headerlink" title="backgrounds"></a>backgrounds</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#ffffff</span> <span class="built_in">url</span>(<span class="string">"img_tree.png"</span>) no-repeat fixed right top;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>示例为简写的方式，<code>background</code>的属性值的属性名依次是：</p>
<ul>
<li><code>background-color</code></li>
<li><code>background-image</code>  (url(‘URL))</li>
<li><code>background-repeat</code> (repeat/repeat-x/repeat-y/no-repeat/initial/inherit default repeat)</li>
<li><code>background-attachment</code> (fixed/scroll, default scroll)</li>
<li><code>background-position</code></li>
</ul>
<h3 id="borders"><a href="#borders" class="headerlink" title="borders"></a>borders</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>示例为简写的方式，<code>border</code>的属性值的属性名依次是：</p>
<ul>
<li><code>border-width</code></li>
<li><code>border-style</code> (required)</li>
<li><code>border-color</code></li>
</ul>
<h3 id="margins"><a href="#margins" class="headerlink" title="margins"></a>margins</h3><p>在盒模型中指包围在元素border外层的空间</p>
<ul>
<li>简写赋值依次是<code>顺时针上右下左</code></li>
<li><code>auto</code> 的赋值可以让元素水平居中<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">300px</span>;</div><div class="line">    <span class="attribute">margin</span>: auto;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>此时的<code>auto</code>等同于<code>0 auto</code>,让水平方向的margin相等从而实现居中的效果</p>
<h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><p>在盒模型中指元素内容和元素border之间的填充</p>
<ul>
<li>赋值方式和margin类似</li>
</ul>
<h3 id="height-width"><a href="#height-width" class="headerlink" title="height/width"></a>height/width</h3><p>设置元素的宽高，默认值是<code>auto</code>,即让浏览器自行计算占据的宽高，但也可以自定义<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还有其他一些设置方法，以<code>width</code>举例</p>
<ul>
<li><code>max-width</code> 设置最大宽度，默认值是<code>none</code>,即不存在最大宽度。</li>
<li><code>max-width</code> 覆盖<code>width</code>的值</li>
<li>使用<code>width</code>时当窗口小于设置宽度时会自动添加滚动条，用<code>max-width</code>则不会产生</li>
<li><code>min-width</code> 设置元素最小宽度，覆盖<code>max-width</code>、<code>width</code>的值</li>
</ul>
<h4 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h4><p>低版本的IE浏览器中，盒模型的<code>width</code> = <code>content_width</code> + <code>padding-left</code> + <code>padding-right</code> + <code>border</code>*2。<code>height</code>也类似包括了padding和border</p>
<p>而标准的w3c盒模型<code>width</code> = <code>content_width</code>， <code>height</code> = <code>content_height</code></p>
<p>在html中添加<code>DOCTYPE</code>的值，告诉浏览器以w3c的标准去解析盒模型</p>
<h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p>定义文本样式。</p>
<ul>
<li>网页的默认文本样式定义在<code>body</code>选择器上。例如，设置body的color为red，那页面所有文本颜色均为红色了。</li>
</ul>
<h4 id="text-align"><a href="#text-align" class="headerlink" title="text-align"></a>text-align</h4><p>设置文本的水平对其方式，可选值有</p>
<ul>
<li>center</li>
<li>left</li>
<li>right</li>
<li>justify - 使得每一行宽度相同，如同报纸里的内容展示那样。</li>
</ul>
<h4 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a>text-decoration</h4><p>装饰文本。一般设置值为<code>none</code>，用来去除<code>&lt;a&gt;</code>链接的下划线。<br>一般可选值还有：</p>
<ul>
<li>overline</li>
<li>underline</li>
<li>line-through</li>
</ul>
<h4 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a>text-transform</h4><p>文本转换，一般用来转换大小写。</p>
<ul>
<li>uppercase</li>
<li>lowercase</li>
<li>capitalize (每个单词首字母大写)</li>
</ul>
<h4 id="text-indent"><a href="#text-indent" class="headerlink" title="text-indent"></a>text-indent</h4><p>首行缩进。<br>eg:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">text-indent</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="letter-spacing"><a href="#letter-spacing" class="headerlink" title="letter-spacing"></a>letter-spacing</h4><p>词间隔。<br>eg:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">letter-spacing</span>: <span class="number">3px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h2</span> &#123;</div><div class="line">    <span class="attribute">letter-spacing</span>: -<span class="number">3px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="word-spacing"><a href="#word-spacing" class="headerlink" title="word-spacing"></a>word-spacing</h4><p>字间隔。<br>eg:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">word-spacing</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h2</span> &#123;</div><div class="line">    <span class="attribute">word-spacing</span>: -<span class="number">5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h3><p>定义字体的字体族，宽度, 以及字体风格。</p>
<h4 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h4><p>字体族分两类</p>
<ul>
<li>Generic family：一组风格差不多的字体组成, 如<code>Serif</code></li>
<li>font family：单个拥有具体名字的字体，如<code>Times New Roman</code></li>
</ul>
<p>赋值时一般设置多个字体名，用作回退。一般最后一个会设置为<code>Generic family</code>类字体族,防止前面的一个均为匹配上，系统会从一组中选一个近似的选择。eg:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="comment">/* 有空格时需加引号 */</span></div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"Times New Roman"</span>, Times, Serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="font-style"><a href="#font-style" class="headerlink" title="font-style"></a>font-style</h4><p>字体风格，一般为正常字体或斜体</p>
<ul>
<li>normal</li>
<li>italic</li>
</ul>
<h4 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h4><p>设置字体大小</p>
<h4 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h4><p>设置字体的粗细，一般为正常字体或粗体</p>
<ul>
<li>normal</li>
<li>bold</li>
</ul>
<h4 id="shorthand-font-property"><a href="#shorthand-font-property" class="headerlink" title="shorthand font property"></a>shorthand font property</h4><p>依次顺序为</p>
<ul>
<li>font-style,</li>
<li>font-variant ,</li>
<li>font-weight ,</li>
<li>font-size/line-height ,</li>
<li>font-family</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">font</span>: italic bold <span class="number">12px</span>/<span class="number">30px</span> Georgia, serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><h4 id="links-state"><a href="#links-state" class="headerlink" title="links state"></a>links state</h4><ul>
<li>a:link - a normal, unvisited link</li>
<li>a:visited - a link the user has visited</li>
<li>a:hover - a link when the user mouses over it</li>
<li>a:active - a link the moment it is clicked</li>
</ul>
<p>tips:</p>
<ul>
<li>a:hover MUST come after a:link and a:visited</li>
<li>a:active MUST come after a:hover</li>
</ul>
<h4 id="links-buttons"><a href="#links-buttons" class="headerlink" title="links buttons"></a>links buttons</h4><p>链接设置成按钮是多个属性的组合<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#f44336</span>;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">25px</span>;</div><div class="line">    <span class="attribute">text-align</span>: center; </div><div class="line">    <span class="attribute">text-decoration</span>: none;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><h4 id="list-style-type"><a href="#list-style-type" class="headerlink" title="list-style-type"></a>list-style-type</h4><p>列表风格，可选值有</p>
<ul>
<li>circle</li>
<li>square</li>
<li>upper-roman</li>
<li>lower-roman</li>
<li>lower-alpha</li>
<li>upper-alpha</li>
</ul>
<p>也可以使用自定义图片<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span> &#123;</div><div class="line">    <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">'sqpurple.gif'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="list-style-position"><a href="#list-style-position" class="headerlink" title="list-style-position"></a>list-style-position</h4><p>定义列表项的位置, 展示缩进效果，可选值有</p>
<ul>
<li>inside</li>
<li>outside （default）</li>
</ul>
<h4 id="shorthand-property"><a href="#shorthand-property" class="headerlink" title="shorthand property"></a>shorthand property</h4><p><code>list-style</code> 代表一下属性的顺序值</p>
<ul>
<li>list-style-type</li>
<li>list-style-position</li>
<li>list-style-image<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span> &#123;</div><div class="line">    <span class="attribute">list-style</span>: square inside <span class="built_in">url</span>(<span class="string">"sqpurple.gif"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><p>控制元素的布局。<code>display</code>默认值一般为<code>block</code>或<code>inline</code>。</p>
<p>Block-level Elements example:</p>
<ul>
<li><code>&lt;div&gt;</code></li>
<li><code>&lt;h1&gt; - &lt;h6&gt;</code></li>
<li><code>&lt;p&gt;</code></li>
<li><code>&lt;li&gt;</code></li>
<li><code>&lt;form&gt;</code></li>
<li><code>&lt;header&gt;</code></li>
<li><code>&lt;footer&gt;</code></li>
<li><code>&lt;section&gt;</code></li>
</ul>
<p>Inline Elements example:</p>
<ul>
<li><code>&lt;span&gt;</code></li>
<li><code>&lt;a&gt;</code></li>
<li><code>&lt;img&gt;</code></li>
</ul>
<h4 id="Override-The-Default-Display-Value"><a href="#Override-The-Default-Display-Value" class="headerlink" title="Override The Default Display Value"></a>Override The Default Display Value</h4><p>每个元素都有默认的显示值，但为了到达某种效果，也可以改写。<br>eg: 将分行的列表改为水平菜单<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同理也可以将<code>inline</code>元素改写为<code>block</code>显示</p>
<h4 id="display-none"><a href="#display-none" class="headerlink" title="display:none"></a>display:none</h4><p>不显示某元素有两种方式</p>
<ul>
<li>display:none</li>
<li>visibility:hidden</li>
</ul>
<p>区别在于前者不占据空间，后者仍然占据着位置只是不显示</p>
<h4 id="Inline-block"><a href="#Inline-block" class="headerlink" title="Inline-block"></a>Inline-block</h4><p><code>display: inline-block</code>让块级元素inline展示。</p>
<h3 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h3><p>元素定位。<code>position</code>可选值有</p>
<ul>
<li>static (default)</li>
<li>relative</li>
<li>fixed</li>
<li>absolute</li>
</ul>
<p>先设置position，再配合<code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>等定位方法的值，可实现元素的定位</p>
<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>网页元素默认都是<code>static</code>的。<br>它的位置不受<code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>定位方法的影响。</p>
<h4 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h4><p>位置设为<code>relative</code>后，它的位置可相对它原来的位置变化。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-class">.relative</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时，div的位置会相对原来<code>下移</code>5px。</p>
<h4 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h4><p>位置设为<code>fixed</code>后，元素相对页面的位置将不再改变即使页面发生滚动，常见的应用场景有页面下拉时产生一个“回到顶部”的按钮。<br>此时的<code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>都是用来辅助定位的， 一般使用其中的两个即可完成定位。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-class">.fixed</span> &#123;</div><div class="line">    <span class="attribute">position</span>: fixed;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>例子中的div元素会被定位到右下角位置。</p>
<h4 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h4><p>位置设为<code>absolute</code>后，元素的定位会相对它最近的已被定位(not static)的父元素，而不是像<code>fixed</code>那样相对于整个页面。然而如果不存在已被定位的父元素，就是使用文档的body，它就将随着页面滚动而变化。此时的<code>top</code> 等方法也是协助定位的。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-class">.absolute</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">80px</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时相对父元素下移80px,右侧与父元素重合。</p>
<h4 id="Overlapping-Elements"><a href="#Overlapping-Elements" class="headerlink" title="Overlapping Elements"></a>Overlapping Elements</h4><p>重叠元素的位置设置使用<code>z-index</code>属性。值越大优先显示在上层。<br>如果重叠元素没有设置<code>z-index</code>属性，那么最后定位的元素将被显示在最顶部。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</div><div class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h4><p>设置当元素内容超过元素边界的行为，一般可选值为</p>
<ul>
<li>hidden 不显示</li>
<li>scroll 横竖均显示滚动条</li>
<li>auto 自动显示滚动条</li>
</ul>
<h3 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h3><p><code>float</code>决定元素是否应该浮动，与之对应的有<code>clear</code>,用来清除浮动。<br>tip： </p>
<ul>
<li>float 只是水平方向的控制。</li>
<li>使用float通常设置body的margin和padding为0以避免浏览器视图差异。</li>
<li>IE8及更低版本在使用float时会在右侧预留17px的margin滚动条空间，所以需设置<code>!DOCTYPE</code> 防止差异，原因和盒模型的差异相同。<h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4>可选值有<code>left</code>或<code>right</code><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span> &#123;</div><div class="line">    <span class="attribute">float</span>: right;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><p>浮动会产生内容重叠，使用clear可产生换行避免该问题。</p>
<h4 id="clearfix"><a href="#clearfix" class="headerlink" title="clearfix"></a>clearfix</h4><p>当一个元素高于它的容器，且该元素浮动，则显示时会溢出容器，此时给容器添加<code>overflow: auto</code>，可解决该问题。</p>
<h3 id="Align"><a href="#Align" class="headerlink" title="Align"></a>Align</h3><ul>
<li>块元素水平居中，使用<code>margin: auto;</code></li>
<li>块元素内容居中，使用<code>text-align: center</code></li>
<li>居左或居右，使用<code>postition</code>以及<code>left</code>/<code>right</code>或<code>float</code></li>
</ul>
<h3 id="Combinators"><a href="#Combinators" class="headerlink" title="Combinators"></a>Combinators</h3><p>连接符，用来描述选择器之间的关系。<br>css3中有四种连接符：</p>
<ul>
<li>descendant selector (space)</li>
<li>child selector (&gt;)</li>
<li>adjacent sibling selector (+) </li>
<li>general sibling selector (~)</li>
</ul>
<p>eg：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* div下所有的p元素 */</span></div><div class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: yellow;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* div下所有的p子元素 */</span></div><div class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: yellow;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* div后第一个p元素 */</span></div><div class="line"><span class="selector-tag">div</span> + <span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: yellow;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* div后所有的p元素 */</span></div><div class="line"><span class="selector-tag">div</span> ~ <span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Pseudo-classes"><a href="#Pseudo-classes" class="headerlink" title="Pseudo-classes"></a>Pseudo-classes</h3><p>伪类，定义元素的不同状态。<br>语法为<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">selector</span><span class="selector-pseudo">:pseudo-class</span> &#123;</div><div class="line">    <span class="attribute">property</span>:value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>hover，常用于<code>&lt;a&gt;</code>,也可用于其他元素</li>
<li>first-child, 第一个元素</li>
<li>last-child, 最后一个元素</li>
<li>nth-child(n), 第n个元素</li>
</ul>
<h3 id="Pseudo-elements"><a href="#Pseudo-elements" class="headerlink" title="Pseudo-elements"></a>Pseudo-elements</h3><p>伪元素，通常用作修饰某一元素的特定部分。<br>语法为,区别于伪类，使用双引号<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">selector</span><span class="selector-pseudo">::pseudo-element</span> &#123;</div><div class="line">    <span class="attribute">property</span>:value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>first-line, 修饰第一行</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#ff0000</span>;</div><div class="line">    <span class="attribute">font-variant</span>: small-caps;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>first-letter, 修饰第一个字母</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#ff0000</span>;</div><div class="line">    <span class="attribute">font-size</span>: xx-large;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>before, 在元素前插入一些内容</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="built_in">url</span>(smiley.gif);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>after, 在元素后插入一些内容</li>
<li>selection, 改变选中文本的风格<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 选中文本为颜色为红色，背景为黄色 */</span></div><div class="line"><span class="selector-pseudo">::selection</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red; </div><div class="line">    <span class="attribute">background</span>: yellow;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* Code for Firefox */</span></div><div class="line"><span class="selector-pseudo">::-moz-selection</span> &#123; </div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">    <span class="attribute">background</span>: yellow;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* IE8及以下版本不支持该属性 */</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Attribute-Selectors"><a href="#Attribute-Selectors" class="headerlink" title="Attribute Selectors"></a>Attribute Selectors</h3><ul>
<li>CSS [attribute] Selector</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 仅选中包含target属性的a元素 */</span></div><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[target]</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>CSS [attribute=”value”] Selector</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[target="_blank"]</span> &#123; </div><div class="line">    <span class="attribute">background-color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>CSS [attribute~=”value”] Selector, 属性值包含某个具体值，The value has to be <code>a whole word</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 选中title中包含"flower"的元素 */</span></div><div class="line"><span class="selector-attr">[title~="flower"]</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>CSS [attribute|=”value”] Selector, 起始值匹配，The value has to be <code>a whole word</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 选中class起始值为top的元素 */</span></div><div class="line"><span class="comment">/* 不会匹配class="topclass"的元素*/</span></div><div class="line"><span class="selector-attr">[class|="top"]</span> &#123;</div><div class="line">    <span class="attribute">background</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>CSS [attribute^=”value”] Selector，起始值匹配，起始值包含value值即可。</li>
<li>CSS [attribute$=”value”] Selector，结束值匹配。</li>
<li>CSS [attribute*=”value”] Selector，全位置匹配，包含value值即可</li>
</ul>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML]]></title>
      <url>/2017/html/</url>
      <content type="html"><![CDATA[<p>到了这个阶段再来看html有一种说不出来的感觉，其实从未全面学习过，简单过一遍留个脚印。<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>html是一个文本描述语言，用来描述网页文档(web pages/documents)，几乎是专用的。</li>
<li>该描述语言由一系列描述标签(tags)组成</li>
<li>不同的标签描述不同的描述内容</li>
<li>描述标签的集合组成了HTML文档</li>
</ul>
<p>示例:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My First Heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>My first paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>样例说明：</p>
<ul>
<li>html对大小写不care，有过care的版本，但都是过去式，不必关心，但习惯上小写</li>
<li><code>DOCTYPE</code>声明定义文档类型为html，写html表示HTML5，是2014年提出的最新标准</li>
<li><code>&lt;html&gt;&lt;/html&gt;</code>标签内部的内容表示该文档的全部内容</li>
<li><code>&lt;head&gt;&lt;/head&gt;</code>表示头部,类似人体结构</li>
<li><code>&lt;body&gt;&lt;/body&gt;</code>表示主体部分</li>
<li>html是写给机器读的，tags标签不会显示，仅用作标识，用来定义其内容的展示方式</li>
<li>仅有body部分的内容会展现在浏览器中</li>
<li>html5标准中，<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>、<code>&lt;head&gt;</code>标签都是可以省略的，浏览器也能解析，但是不推荐这么做<h2 id="html元素"><a href="#html元素" class="headerlink" title="html元素"></a>html元素</h2>标签对以及其中的内容构成html元素。</li>
<li>元素内部可以包含元素，即元素是可嵌套的</li>
<li><code>&lt;html&gt;</code>元素定义了整个文档，其他元素都是它的子元素</li>
<li>不要忘记结束标签</li>
</ul>
<p>每个元素都有一个默认的展示值从而决定它展示的方式，这个值通常是<code>block</code>或者是<code>inline</code></p>
<h3 id="块级元素（block）"><a href="#块级元素（block）" class="headerlink" title="块级元素（block）"></a>块级元素（block）</h3><p>一个块级元素通常起始于行首，并占据整行，后续元素不会与之并排。<br>常见的这类元素有：</p>
<ul>
<li><code>&lt;div&gt;</code></li>
<li><code>&lt;h1&gt;-&lt;h6&gt;</code></li>
<li><code>&lt;p&gt;</code></li>
<li><code>&lt;form&gt;</code><h3 id="行内元素-（inline）"><a href="#行内元素-（inline）" class="headerlink" title="行内元素 （inline）"></a>行内元素 （inline）</h3>不需要从起始于行首，并且只占据它需要的宽度。<br>常见的这类元素有：</li>
<li><code>&lt;span&gt;</code></li>
<li><code>&lt;img&gt;</code></li>
<li><code>&lt;a&gt;</code></li>
</ul>
<h3 id="行内块元素-（inline-block）"><a href="#行内块元素-（inline-block）" class="headerlink" title="行内块元素 （inline-block）"></a>行内块元素 （inline-block）</h3><p>强制改变块级元素的展现方式，让它们能同行并排，常见做法是改变该元素的CSS属性<code>display</code>为<br><code>inline-block</code></p>
<h2 id="html属性"><a href="#html属性" class="headerlink" title="html属性"></a>html属性</h2><p>html属性具体的说是元素的属性，用来描述元素额外的信息。</p>
<ul>
<li>属性的作用是提供元素的额外信息</li>
<li>属性通常在起始tag中的定义</li>
<li>属性的定义规则是 <code>name=&quot;value&quot;</code>形式, 多个属性声明时，以<code>空格</code>间隔, 一般使用双引号，内部存在双引号时也可使用单引号<br>eg:<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-US"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>在html元素中声明<code>lang</code>属性，用来表明文档的语言类型。<br>常见的还有，</p>
<ul>
<li>在<code>&lt;p&gt;</code>元素中增加<code>title</code>属性，当鼠标移动到该元素上时，title的内容会在提示框中显示。</li>
<li><code>&lt;a&gt;</code>元素的<code>href</code>属性用于超链接</li>
<li><code>&lt;img&gt;</code>元素<code>&lt;img src=&quot;w3schools.jpg&quot; alt=&quot;W3Schools.com&quot; width=&quot;104&quot; height=&quot;142&quot;&gt;</code>,其中width和height单位为屏幕像素<h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3>设置元素的显示风格.<br>定义规则为<code>style=&quot;property:value;&quot;</code> property是一个css属性名，value是一个css属性值。<br>元素的展示形式属于视图层的范围，一般建议单独以css的形式定义，style属性提供内联的定义形式，这里不详细展开。只需区分style元素属性值的定义规则和元素属性定义规则的区别即可:</li>
<li>name=”value” html元素属性定义以空格分隔</li>
<li>style=”property:value;” style属性定义以<code>分号</code>分隔</li>
</ul>
<h2 id="html标签"><a href="#html标签" class="headerlink" title="html标签"></a>html标签</h2><p>html标签太多，但常用的虽然不多</p>
<ul>
<li><code>&lt;hr&gt;</code>水平分隔线，常与标题标签一起使用</li>
<li><code>&lt;p&gt;</code> 无论多少空格都会被算为一个，通常使用<code>&amp;nbsp;</code>表示多个空格。换行同样不起作用，需独立使用<code>&lt;br&gt;</code>标签换行。与之相对的<code>&lt;pre&gt;&lt;/pre&gt;</code>标签的空格和换行都会保留，但<br>会使用固定宽度的字体</li>
<li>…</li>
</ul>
<h2 id="html文本格式化"><a href="#html文本格式化" class="headerlink" title="html文本格式化"></a>html文本格式化</h2><ul>
<li>Bold text - <code>&lt;b&gt;&lt;/b&gt;</code>, <code>&lt;strong&gt;&lt;/strong&gt;</code></li>
<li>Italic text - <code>&lt;i&gt;&lt;/i&gt;</code>, <code>&lt;em&gt;&lt;/em&gt;</code>(Emphasized )</li>
<li>Marked text - <code>&lt;mark&gt;&lt;/mark&gt;</code></li>
<li>Small text - <code>&lt;small&gt;&lt;/small&gt;</code></li>
<li>Deleted text - <code>&lt;del&gt;&lt;/del&gt;</code></li>
<li>Inserted text - <code>&lt;ins&gt;&lt;/ins&gt;</code></li>
<li>Subscripts - <code>&lt;sub&gt;&lt;/sub&gt;</code></li>
<li>Superscripts - <code>&lt;sup&gt;&lt;/sup&gt;</code></li>
<li>Quotations - <code>&lt;q&gt;&lt;/q&gt;</code>, <code>&lt;blockquote&gt;&lt;/blockquote&gt;</code>, <code>&lt;cite&gt;&lt;/cite&gt;</code></li>
<li>Abbreviation - <code>&lt;abbr title=&quot;World Health Organization&quot;&gt;WHO&lt;/abbr&gt;</code></li>
<li>Bi-Directional Override - 方向逆转， <code>&lt;bdo dir=&quot;rtl&quot;&gt;This text will be written from right to left&lt;/bdo&gt;</code></li>
<li>comments - 注释 <code>&lt;!-- comment lines --&gt;</code></li>
</ul>
<h2 id="html布局"><a href="#html布局" class="headerlink" title="html布局"></a>html布局</h2><ol>
<li>通常使用<code>&lt;div&gt;</code>元素作为布局的工具，因为它能很方便的被css定位，从而定义它的样式。</li>
<li>html5提供了新的一套语义更清晰的元素来定义网页的不同部分。</li>
</ol>
<ul>
<li><code>&lt;header&gt;</code> 整个网页或某个局部区域的头部</li>
<li><code>&lt;nav&gt;</code> 导航链接的容器</li>
<li><code>&lt;section&gt;</code> 定义网页的各个不同区域</li>
<li><code>&lt;article&gt;</code> 定义一个独立的文章区域</li>
<li><code>&lt;footer&gt;</code> 整个网页或某个局部区域的底部</li>
</ul>
<ol>
<li>还有一些很老的网页使用<code>table</code>元素来布局，不推荐。</li>
</ol>
<h2 id="html响应式设计"><a href="#html响应式设计" class="headerlink" title="html响应式设计"></a>html响应式设计</h2><ol>
<li>最简单的方式就是将整个页面使用块级元素分隔成固定大小的模块，然后使用<code>float</code>属性，让其随屏幕变化产生自适应效果。</li>
<li>另一种方式就是使用响应式的样式表，例如<code>w3.css</code>等响应式css类库。</li>
</ol>
<h2 id="html实体符号"><a href="#html实体符号" class="headerlink" title="html实体符号"></a>html实体符号</h2><p>由于很多字符被html使用或其他原因被设定为保留字，因此想表达原有的意思只能选择替代方案。<br>一般有两种表达方式：</p>
<ol>
<li>&amp;entity_name</li>
<li>&amp;#entity_number<br>例如：</li>
</ol>
<ul>
<li>小于号的写法就为 <code>&amp;lt</code>或<code>&amp;#60</code></li>
<li>常见的还有空格的表示，<code>&amp;nbsp</code></li>
<li>copyright符号，<code>&amp;copy</code>或<code>&amp;#169</code></li>
<li>人民币符号，<code>&amp;ren</code>, <code>$#165</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript箭头函数]]></title>
      <url>/2017/arrow_function/</url>
      <content type="html"><![CDATA[<p>js从ES6开始引入一种新函数，箭头函数。<br>它拥有无比简洁优雅的写法，不用显式的写<code>function</code>，确实方便不少。但并非适应所有的函数应用场景，这里结合资料和个人理解做个总结。<br><a id="more"></a></p>
<pre><code>An arrow function expression has a shorter syntax than a function expression 
and does not bind its own this, arguments, super, or new.target. 
These function expressions are best suited for non-method functions, 
and they cannot be used as constructors.
</code></pre><p>箭头函数相比声明式的函数表达式语法更加简洁，但它不绑定自己的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">this</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="external">arguments</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super" target="_blank" rel="external">super</a>, 以及<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target" target="_blank" rel="external">new.target</a>, 箭头非常适合<code>非对象方法</code>的函数场景，而且也不能作为构造函数。</p>
<p>以上是我直接翻译的一段MDN资料,对于对象方法的使用场景特殊说明下：<br>不是说箭头函数不能用作对象方法，如果方法里不涉及this的调用，是完全可以的。<br>而如果使用了this，情况可能会和你想的不一样，这个后续会说到。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(param1, param2, …, paramN) =&gt; &#123; statements &#125;</div><div class="line">(param1, param2, …, paramN) =&gt; expression</div><div class="line"><span class="comment">/*当函数体只有一个表达式时，可以省略大括号， </span></div><div class="line">等价于: (param1, param2, …, paramN) =&gt; &#123; return expression; &#125; */</div><div class="line"></div><div class="line">(singleParam) =&gt; &#123; statements &#125;</div><div class="line">singleParam =&gt; &#123; statements &#125;</div><div class="line"><span class="comment">/*当只有一个参数时,可以省略括号 */</span></div><div class="line"></div><div class="line">() =&gt; &#123; statements &#125;</div><div class="line"><span class="comment">/* 无参数时，括号不可省 */</span></div><div class="line"></div><div class="line">params =&gt; (&#123;<span class="attr">foo</span>: bar&#125;)</div><div class="line"><span class="comment">/* 给函数体加上括号，表示函数返回一个对象 */</span></div><div class="line"></div><div class="line">(param1, param2, ...rest) =&gt; &#123; statements &#125;</div><div class="line">(param1 = defaultValue1, param2, …, paramN = defaultValueN) =&gt; &#123; statements &#125;</div><div class="line"><span class="comment">/* 支持Rest参数和默认参数 */</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">[a, b] = [<span class="number">1</span>, <span class="number">2</span>], &#123;x: c&#125; = &#123;x: a + b&#125;</span>) =&gt;</span> a + b + c</div><div class="line">f()  <span class="comment">//6</span></div><div class="line"><span class="comment">//支持带参数列表的解构赋值</span></div></pre></td></tr></table></figure>
<h2 id="从this说起"><a href="#从this说起" class="headerlink" title="从this说起"></a>从this说起</h2><p>this的用法，在面向对象编程的领域里显得非常的另类。<br>在箭头函数出现之前，每一个新的函数，都定义了自己的this这个特殊变量。<br>如果是作为构造函数，this指代一个新的对象;<br>如果是在strict模式下的函数调用，this被定义为undefind;<br>非strict模式则指向全局对象(window或global);<br>如果是被当做对象的方法调用，this则指代调用该方法的对象。</p>
<p>然而对于箭头函数，它不绑定自己的this。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">5</span>; <span class="comment">/* nodejs 需写成 global.age = 5  */</span> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">/* this.age = 0;//this 指向构造函数Foo的实例 */</span></div><div class="line">    <span class="keyword">var</span> test= <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/* 非strict模式下指向全局对象，非Foo的实例 */</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    test();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Foo(); </div><div class="line"><span class="comment">//5</span></div></pre></td></tr></table></figure>
<p>如想让以上这段代码输出为0怎么办呢？<br>在ES 3/5里，this可以被赋值给其他变量，于是可以有如下的这种办法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">/* 一开始捕获this，将它存为that */</span></div><div class="line">    that.age = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(that.age);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    test();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Foo();</div><div class="line"><span class="comment">//0</span></div></pre></td></tr></table></figure>
<p>当然还可以使用绑定函数，给函数绑定this的指向，如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">5</span>; <span class="comment">/* 如果是nodejs，需写成global.age = 5 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.age = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> test= <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> test = test.bind(<span class="keyword">this</span>);<span class="comment">/* 也可以用call或者apply </span></div><div class="line">    test.call(this, null); </div><div class="line">    test.apply(this, null); */</div><div class="line"></div><div class="line">    test();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Foo();</div><div class="line"><span class="comment">//0</span></div></pre></td></tr></table></figure></p>
<p>但是，这个场景刚好适合箭头函数登场<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">5</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.age = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> test = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    test();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Foo();</div><div class="line"><span class="comment">//0</span></div></pre></td></tr></table></figure></p>
<p>因为箭头函数没有自己的this上下文，所以它会根据外围的上下文获取this，<br>在这里就是我们希望所希望的Foo实例对象。</p>
<pre><code>总之正常函数里使用this时，指向虽然不确定，但是至少有迹可循，
但在箭头函数里使用，就是真的不确定，因为它是绑定在外层作用域的。
倘若不使用this，只亲睐它的简洁语法，那当然就没有这些问题了。
一旦使用，就要考虑清楚它是从哪里继承。
</code></pre><p>举最后一个例子,验收测试<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">            &#125;;</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> foo()()()()     <span class="comment">/* this ? */</span></div><div class="line">foo()()()()         <span class="comment">/* this ? */</span></div></pre></td></tr></table></figure></p>
<p>这段代码的两个结果分别是什么呢？可以自己验证下。<br>答案如下:<br>第一个this指向foo()的实例对象<br>第二个指向全局对象</p>
<h2 id="依次类推"><a href="#依次类推" class="headerlink" title="依次类推"></a>依次类推</h2><p>说完this，同理对一开始说到的arguments, super等也是适用的<br>参考下面这段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> test = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"args:"</span>, <span class="built_in">arguments</span>);</div><div class="line">   &#125;</div><div class="line">   test()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Foo(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>);</div><div class="line"><span class="comment">// args: &#123;'0':2, '1':4, '2':6, '3':8&#125;</span></div></pre></td></tr></table></figure></p>
<p>箭头函数没有自己的arguments, 它就取Foo()的arguments。和不绑定this一个道理。</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>箭头函数的箭头和参数之间不能有换行，否则报语法错误<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">()</span></span></div><div class="line">           =&gt; <span class="number">1</span>; </div><div class="line"><span class="comment">// SyntaxError: expected expression, got '=&gt;'</span></div></pre></td></tr></table></figure></p>
<p>箭头符号不是一个操作符，但会被误认为操作符，和其他操作符混用时需注意<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> callback;</div><div class="line"></div><div class="line">callback = callback || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">/* ok */</span></div><div class="line"></div><div class="line">callback = callback || <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;      </div><div class="line"><span class="comment">/* SyntaxError: invalid arrow-function arguments */</span></div><div class="line"></div><div class="line">callback = callback || <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;&#125;);    <span class="comment">// ok</span></div></pre></td></tr></table></figure></p>
<p>参考资料：<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">箭头函数</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Arrow-function </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 箭头函数 </tag>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[对微信消息内容类型的判断]]></title>
      <url>/2017/parse_wechat_msgType/</url>
      <content type="html"><![CDATA[<p>最近试着做些工作总结，这也是我开始写博客的初衷，少bb，just do it！</p>
<p>这是我最早进公司做的一个小项目，需求是判断手机收发微信消息内容类型。就是手机发了一条微信消息之后，程序要能解析出发的是文本、语音还是图片等类型，并且统计时延。接收也是如此，主要需求是对发送类型的判断。<br><a id="more"></a></p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><pre><code>1. 抓包
2. 解包
3. 结果展示
</code></pre><hr>
<h3 id="特殊说明"><a href="#特殊说明" class="headerlink" title="特殊说明"></a>特殊说明</h3><pre><code>该工作主要依赖部门内部高度定制的解析工具，可复现度几乎为0，因此全文只谈思路、方法与收获。
</code></pre><hr>
<h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>抓取终端发生微信消息时的消息包，根据3GPP协议可以获取该消息的id为0x11EB</p>
<hr>
<h3 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h3><p>这个过程就是把二进制的码流按照协议解析成有意义的字段。再从中筛选实际需要的内容做二次解析。<br>这部分按照当时使用的工具，解析语言用的lua。<br>这里主要说明下数据的过滤和解析</p>
<h4 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h4><p>如何判断数据是否有效？答案是<code>根据协议数据结构和自身业务需求</code>。<br>根据TCP/IP协议，数据包的格式是<code>Header + Data</code><br>这里具体来说就是，<code>ipHeader + tcpHeader + data</code>，其中data部分才是我们真正需要的解析目标。</p>
<hr>
<p>贴一下数据包的数据结构,分别对应IP数据包格式和TCP数据包格式，图片来源于网络<br>。更多内容可参考这篇文章<a href="http://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html" target="_blank" rel="external">TCP协议</a><br><img src="http://opxo4bto2.bkt.clouddn.com/pic/lua/wechat/IP_Package.png" alt="ip"></p>
<p><img src="http://opxo4bto2.bkt.clouddn.com/pic/lua/wechat/TCP_Package.png" alt="tcp"></p>
<p>根据协议，很清楚可以看到ipHeader和tcpHeader的固定部分都是20个字节，因此协议规则如下：</p>
<hr>
<ul>
<li>ipHeader 至少20个字节</li>
<li>tcpHeader 至少20个字节<br>加上和业务定制的规则如下：</li>
<li>ipHeader 中的版本（0-4位对应的字段值）为4，即0100，用来表明IP协议实现的版本号，当前规定为IPv4，因此如果是连wifi发微信消息，那么就直接被过滤掉了</li>
<li>ipHeader中的协议（72-80位）为6，指明IP层所封装的上层协议类型，如ICMP（1）、IGMP（2） 、TCP（6）、UDP（17）等，当前为TCP</li>
<li>data部分至少16个字节，这个是查资料获得，和微信消息类型相关的特征字信息，只在前16个字节中，后续字节内容应该表示的消息内容</li>
</ul>
<p>总的来说过滤数据，就是把不符合这五条规则的数据直接丢掉不处理，直接进入下一条log的处理。</p>
<hr>
<h4 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h4><p>假设我们已经获取数据，并过滤，得到了我们需要的data，下面开始处理，这里贴出当时写的很难看的处理函数。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDataTypeFromDataContent</span><span class="params">(mo, buf)</span></span></div><div class="line">    <span class="keyword">local</span> ls = stat[mo]</div><div class="line">    <span class="keyword">local</span> str, dataSN = <span class="string">''</span>, <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">12</span>, <span class="number">1</span> <span class="keyword">do</span></div><div class="line">    	str = str..buf[i]..<span class="string">' '</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">for</span> i = <span class="number">13</span>, <span class="number">16</span>, <span class="number">1</span> <span class="keyword">do</span></div><div class="line">    	dataSN = dataSN..buf[i]</div><div class="line">    <span class="keyword">end</span></div><div class="line">    ls.dataSNText = dataSN</div><div class="line"> 	</div><div class="line">    <span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"00 00 00 82 00 10 00 01 %x%x %x%x %x%x ED"</span>) <span class="keyword">then</span></div><div class="line">    	ls.dataType = <span class="string">'Text'</span>..<span class="string">'-'</span>..<span class="string">'Send OK'</span></div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"00 00 %x%x %x%x 00 10 00 01 %x%x %x%x %x%x ED"</span>) <span class="keyword">then</span></div><div class="line">    	ls.dataType = <span class="string">'Text'</span>..<span class="string">'-'</span>..<span class="string">'Send'</span></div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"00 00 00 7E 00 10 00 01 %x%x %x%x %x%x 13"</span>) <span class="keyword">then</span></div><div class="line">    	ls.dataType = <span class="string">'Voice'</span>..<span class="string">'-'</span>..<span class="string">'Send OK'</span></div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"00 00 00 81 00 10 00 01 %x%x %x%x %x%x 13"</span>) <span class="keyword">then</span></div><div class="line">    	ls.dataType = <span class="string">'Voice'</span>..<span class="string">'-'</span>..<span class="string">'Send OK'</span></div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"00 00 00 83 00 10 00 01 %x%x %x%x %x%x 13"</span>) <span class="keyword">then</span></div><div class="line">    	ls.dataType = <span class="string">'Voice'</span>..<span class="string">'-'</span>..<span class="string">'Send OK'</span></div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"00 00 %x%x %x%x 00 10 00 01 %x%x %x%x %x%x 13"</span>) <span class="keyword">then</span></div><div class="line">    	ls.dataType = <span class="string">'Voice'</span>..<span class="string">'-'</span>..<span class="string">'Send'</span></div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"AB 00 %x%x %x%x %x%x 27 14 00"</span>) <span class="keyword">then</span></div><div class="line">        ls.dataType = <span class="string">'Img'</span>..<span class="string">'-'</span>..<span class="string">'Request'</span></div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"AB 00 %x%x %x%x %x%x 2A FC 00"</span>) <span class="keyword">then</span></div><div class="line">        ls.dataType = <span class="string">'Img'</span>..<span class="string">'-'</span>..<span class="string">'Request OK'</span></div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"AB 00 %x%x %x%x %x%x 27 10 00"</span>) <span class="keyword">then</span></div><div class="line">        ls.dataType = <span class="string">'Img'</span>..<span class="string">'-'</span>..<span class="string">'Send'</span></div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"AB 00 %x%x %x%x %x%x 2A F8 00"</span>) <span class="keyword">then</span></div><div class="line">        ls.dataType = <span class="string">'Img'</span>..<span class="string">'-'</span>..<span class="string">'Send OK'</span></div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"AB 00 %x%x %x%x %x%x 75 30 00"</span>) <span class="keyword">then</span></div><div class="line">        ls.dataType = <span class="string">'Video'</span>..<span class="string">'-'</span>..<span class="string">'Send'</span>    </div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"AB 00 %x%x %x%x %x%x 79 18 00"</span>) <span class="keyword">then</span></div><div class="line">        ls.dataType = <span class="string">'Video'</span>..<span class="string">'-'</span>..<span class="string">'Send OK'</span> </div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">match</span>(str, <span class="string">"00 00 %x%x %x%x 00 10 00 01"</span>) <span class="keyword">then</span></div><div class="line">        ls.dataType = <span class="string">'WeChat'</span>..<span class="string">'-'</span>..<span class="string">'unknown'</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>这种全是if/else的代码着实难堪的，嗯，很符合当时的水平,说明如下：</p>
<pre><code>ls 为状态对象，是一个状态机的实现，用来记录每个手机实时的消息状态。
将data数组拼接成字符串，以空格为间隔。
可以看出，前12个字节用于判断类型，后四个字节用来记录序列号。
然后匹配对应各自的消息类型。
这些规则也是查阅资料论文和测试获得，微信也暂未公开这些信息。
</code></pre><hr>
<p>至此，已经可以获得消息类型了。当然只是常用的几种，文本，图片、语音及视频类型。但这里只完成了40%的任务，因为还需要统计发送消息的时延啊，例如发了一条消息，会马触发一条<code>Text-Send</code>的log，但直到有<code>Text-Send OK</code>的log上报，才会认定消息发送成功，二者之间的时间差就是需要记录的时延。</p>
<p>但理想很丰满，上面的消息判断依旧是很粗糙的，总有一些意外情况，例如<code>Send-OK</code>消息的格式总是有意外情况，图片会有分包的情况，如何判断是一次而不是多次发送等等问。</p>
<p>所以后来第二个迭代时就完全结束了这种不完全靠谱的做法，直接自定义两条log，在发送之前发一次，里面写好发送类型手机id等信息，发送完毕再发一条结束消息确认。这样来，一切就简单多了，相当于固定场景测试了。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结下此次开发任务的收获和心得体会</p>
<ul>
<li><p>熟练掌握了lua的基本语法和使用，体验到了动态语言的优越性。</p>
</li>
<li><p>对IP数据包的结构有了基本认识，一切都是站在协议的肩膀上完成的</p>
</li>
<li><p>学会了如何分拆将一个稍微大点的任务分拆成小块，快速挖掘关注核心部分</p>
</li>
<li><p>收集资料的也是一种能力，懂业务比写代码实现更重要</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Lua </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wechat-message </tag>
            
            <tag> lua </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
